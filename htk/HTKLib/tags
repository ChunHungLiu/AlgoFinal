!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
A	HParm.c	/^   Vector A;          \/* Parameters for decompressing *\/$/;"	m	struct:__anon62	file:
ACCWINDOW	HParm.c	/^   ACCWINDOW,     \/* Window size for 2nd diffs *\/$/;"	e	enum:__anon63	file:
ADAPTKIND	HModel.c	/^   NUMCLASSES, ADAPTKIND, PREQUAL, INPUTXFORM,$/;"	e	enum:__anon38	file:
ADDDITHER	HParm.c	/^   ADDDITHER,     \/* Amount of additional dither added to file *\/$/;"	e	enum:__anon63	file:
ADS_CLOSED	HAudio.c	/^               ADS_STOPPED, ADS_CLOSED } AudioDevStatus;$/;"	e	enum:__anon12	file:
ADS_INIT	HAudio.c	/^typedef enum { ADS_INIT, ADS_OPEN, ADS_SAMPLING, $/;"	e	enum:__anon12	file:
ADS_OPEN	HAudio.c	/^typedef enum { ADS_INIT, ADS_OPEN, ADS_SAMPLING, $/;"	e	enum:__anon12	file:
ADS_SAMPLING	HAudio.c	/^typedef enum { ADS_INIT, ADS_OPEN, ADS_SAMPLING, $/;"	e	enum:__anon12	file:
ADS_STOPPED	HAudio.c	/^               ADS_STOPPED, ADS_CLOSED } AudioDevStatus;$/;"	e	enum:__anon12	file:
AIFF	HWave.h	/^        AIFF,              \/* Apple Audio Interchange format *\/$/;"	e	enum:__anon102
AI_CLEARED	HAudio.h	/^   AI_CLEARED,    \/* Not sampling and buffer empty *\/$/;"	e	enum:__anon14
AI_ERROR	HAudio.h	/^   AI_ERROR       \/* Error state - eg buffer overflow *\/$/;"	e	enum:__anon14
AI_SAMPLING	HAudio.h	/^   AI_SAMPLING,   \/* Sampling speech and filling buffer *\/   $/;"	e	enum:__anon14
AI_STOPPED	HAudio.h	/^   AI_STOPPED,    \/* Stopped but waiting for buffer to be emptied *\/$/;"	e	enum:__anon14
AI_WAITSIG	HAudio.h	/^   AI_WAITSIG,    \/* Wait for start signal *\/$/;"	e	enum:__anon14
AInfo	HAdapt.c	/^} AInfo;$/;"	t	typeref:struct:_AInfo	file:
ALIEN	HWave.h	/^        ALIEN,             \/* Unknown *\/$/;"	e	enum:__anon102
ALTPATHCHAR	HShell.h	489;"	d
ALT_DOWN	HGraf_WIN32.c	/^enum _AltState {ALT_UP,ALT_DOWN}; \/* keep track of Alt key *\/$/;"	e	enum:_AltState	file:
ALT_UP	HGraf_WIN32.c	/^enum _AltState {ALT_UP,ALT_DOWN}; \/* keep track of Alt key *\/$/;"	e	enum:_AltState	file:
ANON	HParm.h	/^      ANON};$/;"	e	enum:_BaseParmKind
ARRAY	esignal.h	65;"	d
ASCII	esignal.h	106;"	d
ASpec2LPCep	HSigP.c	/^void ASpec2LPCep (Vector as, Vector ac, Vector lp, Vector c, DMatrix cm)$/;"	f
AUDBUFSIZE	HAudio.c	140;"	d	file:
AUDIOSIG	HParm.c	/^   AUDIOSIG,      \/* Signal for audio control *\/$/;"	e	enum:__anon63	file:
AUDIO_DEV	HAudio.c	126;"	d	file:
AUDIO_DEV	HAudio.c	81;"	d	file:
AUDIO_DEV	HAudio.c	83;"	d	file:
AUDIO_IO	HAudio.c	106;"	d	file:
AUDIO_IO	HAudio.c	97;"	d	file:
AUDIO_IODEV	HAudio.c	105;"	d	file:
AUDIO_IODEV	HAudio.c	96;"	d	file:
AUDIO_RD	HAudio.c	128;"	d	file:
AUDIO_WR	HAudio.c	129;"	d	file:
AccAdaptBaseTriMat	HAdapt.c	/^static Boolean AccAdaptBaseTriMat(AdaptXForm *xform)$/;"	f	file:
AccAdaptFrame	HAdapt.c	/^void AccAdaptFrame(HMMSet *hset, double Lr, Vector svec, MixPDF *mp, int t)$/;"	f
AccAdaptMean	HAdapt.c	/^static Boolean AccAdaptMean(AdaptXForm *xform)$/;"	f	file:
AccAdaptVar	HAdapt.c	/^static Boolean AccAdaptVar(AdaptXForm *xform)$/;"	f	file:
AccBaseClassStats	HAdapt.c	/^static void AccBaseClassStats(MixPDF *mp, AccStruct *accs)$/;"	f	file:
AccBaseTriMat	HAdapt.c	/^static void AccBaseTriMat(HMMSet *hset, double Lr, Vector svec, MixPDF *mp, int t)$/;"	f	file:
AccCMLLRBaseStats	HAdapt.c	/^static void AccCMLLRBaseStats(MixPDF *mp, AccStruct *accs)$/;"	f	file:
AccCMLLRPDFStats	HAdapt.c	/^static void AccCMLLRPDFStats(MixPDF *mp,  AccStruct *accs)$/;"	f	file:
AccCache	HAdapt.c	/^} AccCache;                       \/* acc cache to save accumulators related to parent XForm *\/  $/;"	t	typeref:struct:_AccCache	file:
AccMLLRCOVPDFStats	HAdapt.c	/^static void AccMLLRCOVPDFStats(MixPDF *mp,  AccStruct *accs)$/;"	f	file:
AccMLLRPDFStats	HAdapt.c	/^static void AccMLLRPDFStats(MixPDF *mp,  AccStruct *accs)$/;"	f	file:
AccMixPDFSemiTiedStats	HAdapt.c	/^static void AccMixPDFSemiTiedStats(HMMSet *hset,MixPDF *mp, AccStruct *accs)$/;"	f	file:
AccMixPDFStats	HAdapt.c	/^static void AccMixPDFStats(HMMSet *hset, MixPDF *mp, AccStruct *accs)$/;"	f	file:
AccNodeStats	HAdapt.c	/^static void AccNodeStats(RegNode *node, AccStruct *accs, $/;"	f	file:
AccScale	HFBLat.h	/^  float AccScale; \/*normally 1.0*\/$/;"	m	struct:__anon23
AccStruct	HAdapt.c	/^} AccStruct;$/;"	t	typeref:struct:__anon6	file:
Acoustic	HArc.h	/^} Acoustic;  \/* for calculating acoustic likelihoods... *\/$/;"	t	typeref:struct:_Acoustic
AdaptKind	HModel.h	/^typedef enum _AdaptKind AdaptKind;$/;"	t	typeref:enum:_AdaptKind
AdaptKind2Str	HModel.c	/^char *AdaptKind2Str(AdaptKind akind, char *buf)$/;"	f
AdaptWgt	HModel.h	/^} AdaptWgt; $/;"	t	typeref:union:__anon52
AdaptXForm	HModel.h	/^} AdaptXForm;$/;"	t	typeref:struct:_AdaptXForm
AdaptXForm2InputXForm	HAdapt.c	/^InputXForm *AdaptXForm2InputXForm(HMMSet *hset, AdaptXForm *xform)$/;"	f
AddArcTrans	HArc.c	/^void AddArcTrans(MemHeap *mem,  HArc *start, HArc *end, float lmlike){$/;"	f
AddAuxLab	HLabel.c	/^void AddAuxLab(LLink lab, int n, LabId *auxLab, float *auxScore)$/;"	f
AddChain	HNet.c	/^static void AddChain(Network*net, NetNode *hd) $/;"	f	file:
AddChar	esig_asc.c	/^AddChar(int     ch,$/;"	f	file:
AddDiffs	HParm.c	/^static void AddDiffs(float *data, int nRows, int nCols, int si, int ti, int d, $/;"	f	file:
AddField	esignal.c	/^AddField(FieldList   *list,     \/* variable containing field list *\/$/;"	f
AddHCIContext	HNet.c	/^int AddHCIContext(HMMSetCxtInfo *hci,LabId labid)$/;"	f
AddHeadRegress	HSigP.c	/^void AddHeadRegress(float *data, int vSize, int n, int step, int offset,$/;"	f
AddInXFormDir	HModel.c	/^void AddInXFormDir(HMMSet *hset, char *dirname)$/;"	f
AddInitialFinal	HNet.c	/^static void AddInitialFinal(Lattice *wnet, Network *net,int xc)$/;"	f	file:
AddItem	HUtil.c	/^void AddItem(HLink owner, Ptr item, ILink *list)$/;"	f
AddLabel	HLabel.c	/^LLink AddLabel(MemHeap *x, LabList *ll, LabId id,$/;"	f
AddLabelList	HLabel.c	/^void AddLabelList(LabList *ll, Transcription *t)$/;"	f
AddMMF	HModel.c	/^MILink AddMMF(HMMSet *hset, char *fname)$/;"	f
AddMember	HUtil.c	/^void AddMember(IntSet s, int x)$/;"	f
AddQualifiers	HParm.c	/^static void AddQualifiers(ParmBuf pbuf,float *data, int nRows, IOConfig cf, $/;"	f	file:
AddRegression	HSigP.c	/^void AddRegression(float *data, int vSize, int n, int step, int offset,$/;"	f
AddSubfield	esignal.c	/^AddSubfield(FieldSpec   *field,    \/* field to aquire subfield *\/$/;"	f
AddTailRegress	HSigP.c	/^void AddTailRegress(float *data, int vSize, int n, int step, int offset,$/;"	f
AddToBuffer	HParm.c	/^void AddToBuffer(ParmBuf pbuf, Observation o)$/;"	f
AddTrans	HExactMPE.c	/^void AddTrans(MemHeap *x, CorrN *start, CorrN *end, float sc_lmlike){$/;"	f
AddTransP	HUtil.c	/^static void AddTransP(ILink models, ILink *ilist, char *type)$/;"	f	file:
AddXFormItem	HModel.c	/^static void AddXFormItem(MemHeap *x, Ptr item, Ptr owner, ILink *list)$/;"	f	file:
AdjSubList	HNet.c	/^SubLatDef *AdjSubList(Lattice *lat,LabId subLatId,Lattice *subLat,int adj)$/;"	f
AlarmOn	HGraf.c	/^static void AlarmOn(void)$/;"	f	file:
Align	HRec.h	/^typedef struct align Align;        \/* Alignment route (HRec.c) *\/$/;"	t	typeref:struct:align
AllocBlock	HMem.c	/^static BlockP AllocBlock(size_t size, size_t num, HeapType type)$/;"	f	file:
AllocSamples	esignal.c	/^AllocSamples(long       nrec,$/;"	f
AllocateVectors	HTrain.c	/^static int AllocateVectors(float *totalCost)$/;"	f	file:
AlphaBeta	HFB.h	/^} AlphaBeta;$/;"	t	typeref:struct:__anon19
AltKeyState	HGraf_WIN32.c	/^static AltState AltKeyState = ALT_UP;$/;"	v	file:
AltState	HGraf_WIN32.c	/^typedef enum _AltState AltState;$/;"	t	typeref:enum:_AltState	file:
Annot	esignal.h	/^struct Annot {$/;"	s
Annot	esignal.h	/^typedef struct Annot	Annot;$/;"	t	typeref:struct:Annot
AnyCKind	HShell.h	/^   AnyCKind             \/* dont care *\/$/;"	e	enum:__anon76
ApplyCompFXForm	HAdapt.c	/^Vector ApplyCompFXForm(MixPDF *mp, Vector svec, AdaptXForm *xform, LogFloat *det, int t)$/;"	f
ApplyCompXForm	HAdapt.c	/^void ApplyCompXForm(MixPDF *mp, AdaptXForm *xform)$/;"	f
ApplyHMMSetXForm	HAdapt.c	/^void ApplyHMMSetXForm(HMMSet *hset, AdaptXForm *xform)$/;"	f
ApplyNGram2LabLat	HLat.c	/^void ApplyNGram2LabLat(Lattice *lat, LModel *lm)$/;"	f
ApplyStaticMat	HParm.c	/^static void ApplyStaticMat(IOConfig cf, float *data, Matrix trans, int vSize, int n, int step, int offset)$/;"	f	file:
ApplyVFloor	HModel.c	/^void ApplyVFloor(HMMSet *hset)$/;"	f
ApplyWPNet2LabLat	HLat.c	/^void ApplyWPNet2LabLat(Lattice *lat, Lattice *wdNet)$/;"	f
ApplyXForm2TriMat	HAdapt.c	/^static void ApplyXForm2TriMat(LinXForm *linXForm, TriMat t, Matrix m)$/;"	f	file:
ApplyXForm2Vector	HAdapt.c	/^static void ApplyXForm2Vector(LinXForm *linXForm, Vector mean)$/;"	f	file:
ApplyXForm2Vector	HParm.c	/^static void ApplyXForm2Vector(LinXForm *linXForm, Vector mean)$/;"	f	file:
ApproxWidth	esig_asc.c	/^ApproxWidth(int type)$/;"	f	file:
ArcFromLat	HArc.c	/^void ArcFromLat(ArcInfo *aInfo, HMMSet *hset){$/;"	f
ArcId	HNet.h	/^typedef struct larc *ArcId;$/;"	t	typeref:struct:larc
ArcInfo	HArc.h	/^}ArcInfo;$/;"	t	typeref:struct:ArcInfoStruct
ArcInfoStruct	HArc.h	/^typedef struct ArcInfoStruct{$/;"	s
ArcList	HArc.c	/^} ArcList;$/;"	t	typeref:struct:_ArcList	file:
ArcTrans	HArc.h	/^typedef struct _ArcTrans ArcTrans;$/;"	t	typeref:struct:_ArcTrans
ArgError	HShell.c	/^static void ArgError(char *s)$/;"	f	file:
ArgKind	HShell.h	/^typedef enum {SWITCHARG, STRINGARG, INTARG, FLOATARG, NOARG} ArgKind;$/;"	t	typeref:enum:__anon79
Array	esignal.h	/^struct Array {$/;"	s
Array	esignal.h	/^typedef struct Array	Array;$/;"	t	typeref:struct:Array
AsciiRead	esig_asc.c	/^AsciiRead(void  *datap,$/;"	f	file:
AsciiWrite	esig_asc.c	/^AsciiWrite(void     *datap,$/;"	f	file:
AsciiWriteChar	esig_asc.c	/^AsciiWriteChar(char     *data,$/;"	f	file:
AsciiWriteSub	esig_asc.c	/^AsciiWriteSub(void  *data,$/;"	f	file:
AsciiWriteWchar	esig_asc.c	/^AsciiWriteWchar(Wchar   *data,$/;"	f	file:
AttachAccs	HTrain.c	/^void AttachAccs(HMMSet *hset, MemHeap *x, UPDSet uFlags){ AttachAccsParallel(hset,x,uFlags,1); }$/;"	f
AttachAccsParallel	HTrain.c	/^void AttachAccsParallel(HMMSet *hset, MemHeap *x, UPDSet uFlags, int nPara)$/;"	f
AttachInst	HRec.c	/^static void AttachInst(NetNode *node)$/;"	f	file:
AttachMPEInfo	HArc.c	/^void AttachMPEInfo(ArcInfo *aInfo){  \/* attach the "mpe" structure to the arcs. *\/$/;"	f
AttachPreComps	HTrain.c	/^void AttachPreComps(HMMSet *hset, MemHeap *x)$/;"	f
AttachRegAccs	HAdapt.c	/^static void AttachRegAccs(HMMSet *hset, AdaptXForm *xform)$/;"	f	file:
AttachReplayBuf	HAudio.c	/^void AttachReplayBuf(AudioIn a, int bufSize)$/;"	f
AttachSource	HShell.c	/^void AttachSource(FILE *file, Source *src)$/;"	f
AttachWtTrAccs	HFB.c	/^static void AttachWtTrAccs(HMMSet *hset, MemHeap *x)$/;"	f	file:
AttachXFormInfo	HAdapt.c	/^static void AttachXFormInfo(HMMSet *hset)$/;"	f	file:
AudioDevInput	HAudio.c	/^int AudioDevInput(int *mask) $/;"	f
AudioDevOutput	HAudio.c	/^int AudioDevOutput(int *mask) $/;"	f
AudioDevStatus	HAudio.c	/^               ADS_STOPPED, ADS_CLOSED } AudioDevStatus;$/;"	t	typeref:enum:__anon12	file:
AudioIn	HAudio.h	/^typedef struct _AudioIn  *AudioIn;    \/* Abstract audio input stream *\/$/;"	t	typeref:struct:_AudioIn
AudioInRec	HAudio.c	/^}AudioInRec;$/;"	t	typeref:struct:_AudioIn	file:
AudioInStatus	HAudio.h	/^}AudioInStatus;$/;"	t	typeref:enum:__anon14
AudioOut	HAudio.h	/^typedef struct _AudioOut *AudioOut;   \/* Abstract audio output stream *\/$/;"	t	typeref:struct:_AudioOut
AudioOutRec	HAudio.c	/^}AudioOutRec;$/;"	t	typeref:struct:_AudioOut	file:
AudioSigHandler	HAudio.c	/^static void AudioSigHandler(void)$/;"	f	file:
AutoCorrelate	HSigP.c	/^static float AutoCorrelate(Vector s, Vector r, int p, int frameSize)$/;"	f	file:
AuxLabEndTime	HLabel.c	/^HTime AuxLabEndTime(LLink p, int i)$/;"	f
AvgCorr	HFBLat.h	/^  float AvgCorr; \/* averate correctness. *\/$/;"	m	struct:__anon23
B	HParm.c	/^   Vector B;          \/*  HTK parameterised files *\/$/;"	m	struct:__anon62	file:
BASE	HModel.h	/^enum _AdaptKind {TREE, BASE};$/;"	e	enum:_AdaptKind
BASECLASS	HModel.c	/^   LINXFORM, OFFSET, BIAS, LOGDET, BLOCKINFO, BLOCK, BASECLASS, $/;"	e	enum:__anon38	file:
BASEMASK	HParm.h	69;"	d
BAddSearch	HNet.c	/^static int BAddSearch(HMMSetCxtInfo *hci,LabId labid, int *np,LabId **ap)$/;"	f	file:
BEGINHMM	HModel.c	/^   BEGINHMM, USEMAC, ENDHMM, NUMMIXES, $/;"	e	enum:__anon38	file:
BIAS	HModel.c	/^   LINXFORM, OFFSET, BIAS, LOGDET, BLOCKINFO, BLOCK, BASECLASS, $/;"	e	enum:__anon38	file:
BIN_ARPA_HAS_BOWT	HLM.c	366;"	d	file:
BIN_ARPA_INT_LMID	HLM.c	367;"	d	file:
BLACK	HGraf.h	/^                LIGHT_GREY, GREY, DARK_GREY, BLACK};$/;"	e	enum:_HColour
BLOCK	HModel.c	/^   LINXFORM, OFFSET, BIAS, LOGDET, BLOCKINFO, BLOCK, BASECLASS, $/;"	e	enum:__anon38	file:
BLOCKINFO	HModel.c	/^   LINXFORM, OFFSET, BIAS, LOGDET, BLOCKINFO, BLOCK, BASECLASS, $/;"	e	enum:__anon38	file:
BOOL	esignal.h	74;"	d
BSearch	HNet.c	/^static int BSearch(LabId labid, int n,LabId *array)$/;"	f	file:
BTN_LINE_WIDTH	HGraf.c	622;"	d	file:
BTN_LINE_WIDTH	HGraf_WIN32.c	916;"	d	file:
BTN_WAIT	HGraf.c	621;"	d	file:
BTN_WAIT	HGraf_WIN32.c	915;"	d	file:
BUF_SIZE	HAudio.c	130;"	d	file:
BackTransitions	HArc.c	/^Boolean BackTransitions(ArcInfo *aInfo){ \/* a check, should never happen *\/$/;"	f
BaseClass	HModel.h	/^} BaseClass;$/;"	t	typeref:struct:__anon50
BaseClassKind	HModel.h	/^typedef enum _BaseClassKind BaseClassKind;$/;"	t	typeref:enum:_BaseClassKind
BaseClassKind2Str	HModel.c	/^char *BaseClassKind2Str(BaseClassKind bkind, char *buf)$/;"	f
BaseOf	HShell.c	/^char * BaseOf(char *fn, char *s)$/;"	f
BaseParmKind	HParm.c	/^ParmKind BaseParmKind(ParmKind kind) { return kind & BASEMASK; }$/;"	f
BiFactor	HMath.c	/^static void BiFactor(DMatrix A, DMatrix U, DMatrix V)$/;"	f	file:
BiSVD	HMath.c	/^static void BiSVD(DVector d, DVector f, DMatrix U, DMatrix V)$/;"	f	file:
BiggestCluster	HTrain.c	/^static int BiggestCluster(void)$/;"	f	file:
Block	HMem.h	/^} Block;$/;"	t	typeref:struct:_Block
BlockP	HMem.h	/^typedef struct _Block *BlockP;$/;"	t	typeref:struct:_Block
BlockReorder	HMem.c	/^static void BlockReorder(BlockP *p, int n)$/;"	f	file:
Bool	esignal.h	/^typedef unsigned char			Bool;$/;"	t
BoolCKind	HShell.h	/^   BoolCKind,           \/* Boolean: T,F,True,False *\/$/;"	e	enum:__anon76
Boolean	HShell.h	/^typedef enum {FALSE=0, TRUE=1} Boolean;$/;"	t	typeref:enum:__anon73
BtnLink	HGraf.h	/^typedef struct _HButton *BtnLink;$/;"	t	typeref:struct:_HButton
BufferInfo	HParm.h	/^}BufferInfo;$/;"	t	typeref:struct:__anon70
BufferStatus	HParm.c	/^PBStatus BufferStatus(ParmBuf pbuf)$/;"	f
ButtonId	HGraf.h	/^typedef short ButtonId;$/;"	t
ByteP	HMem.h	/^typedef unsigned char * ByteP;$/;"	t
ByteSwap	HWave.c	/^void ByteSwap(Wave w)$/;"	f
CAPTURE_ALT	HGraf_WIN32.c	28;"	d	file:
CC	Makefile	/^CC     = g++$/;"	m
CEPLIFTER	HParm.c	/^   CEPLIFTER,     \/* Cepstral liftering coefficient *\/$/;"	e	enum:__anon63	file:
CEPSCALE	HParm.c	/^   CEPSCALE,      \/* Scale factor to prevent arithmetic errors *\/$/;"	e	enum:__anon63	file:
CFGSIZE	HParm.c	/^   CFGSIZE$/;"	e	enum:__anon63	file:
CFLAGS	Makefile	/^CFLAGS := $(CFLAGS) -m32 -ansi -D_SVID_SOURCE -DOSS_AUDIO -D'ARCH="x86_64"' -w -I. -DPHNALG$/;"	m
CHAR	esignal.h	80;"	d
CHEAP	HMem.h	/^typedef enum{MHEAP, MSTAK, CHEAP} HeapType;$/;"	e	enum:__anon36
CHR_W	esig_asc.c	94;"	d	file:
CKCheck	HVQ.c	/^static CovKind CKCheck(CovKind ck)$/;"	f	file:
CLASS	HModel.c	/^   CLASS, XFORMWGTSET, CLASSXFORM, MMFIDMASK, PARAMETERS,$/;"	e	enum:__anon38	file:
CLASSXFORM	HModel.c	/^   CLASS, XFORMWGTSET, CLASSXFORM, MMFIDMASK, PARAMETERS,$/;"	e	enum:__anon38	file:
CLR_ALL	HModel.h	/^typedef enum {CLR_HMMS,CLR_STATES,CLR_STREAMS,CLR_ALL} ClearDepth;$/;"	e	enum:__anon56
CLR_HMMS	HModel.h	/^typedef enum {CLR_HMMS,CLR_STATES,CLR_STREAMS,CLR_ALL} ClearDepth;$/;"	e	enum:__anon56
CLR_STATES	HModel.h	/^typedef enum {CLR_HMMS,CLR_STATES,CLR_STREAMS,CLR_ALL} ClearDepth;$/;"	e	enum:__anon56
CLR_STREAMS	HModel.h	/^typedef enum {CLR_HMMS,CLR_STATES,CLR_STREAMS,CLR_ALL} ClearDepth;$/;"	e	enum:__anon56
CMEANDIR	HParm.c	/^   CMEANDIR,     \/* dir to find the means *\/$/;"	e	enum:__anon63	file:
CMEANMASK	HParm.c	/^   CMEANMASK,    \/* label mask to idenitfy mean file *\/$/;"	e	enum:__anon63	file:
CMEANPATHMASK	HParm.c	/^   CMEANPATHMASK,\/* label mask to idenitfy the path of mean file *\/$/;"	e	enum:__anon63	file:
CMLLR	HModel.h	/^enum _XFormKind {MLLRMEAN, MLLRCOV, MLLRVAR, CMLLR, SEMIT};$/;"	e	enum:_XFormKind
CNew	HMem.c	/^Ptr CNew (MemHeap *x, size_t size)$/;"	f
COMMANDKEY	HGraf.h	/^enum _KeyType {NORMALKEY, SHIFTKEY, COMMANDKEY, CONTROLKEY, $/;"	e	enum:_KeyType
COMMCHAR	HLabel.c	582;"	d	file:
COMPRESSFACT	HParm.c	/^   COMPRESSFACT,  \/* Compression Factor fo PLP *\/$/;"	e	enum:__anon63	file:
CONTROLKEY	HGraf.h	/^enum _KeyType {NORMALKEY, SHIFTKEY, COMMANDKEY, CONTROLKEY, $/;"	e	enum:_KeyType
COVBASE	HModel.h	/^enum _BaseClassKind {MIXBASE, MEANBASE, COVBASE};$/;"	e	enum:_BaseClassKind
COV_KEY	HUtil.c	/^   MIX_KEY, MEAN_KEY, STREAM_KEY, COV_KEY$/;"	e	enum:__anon89	file:
COutP	HModel.c	/^static LogFloat COutP(Vector x, int vecSize, MixPDF *mp)$/;"	f	file:
CRCC_AT_CLOSE	HParm.c	3354;"	d	file:
CRCC_NONE	HParm.c	3353;"	d	file:
CRCC_STREAM	HParm.c	3355;"	d	file:
CREATEFIDX	HModel.c	66;"	d	file:
CRETURN	HLabel.c	584;"	d	file:
CachingInitialised	HFBLat.c	/^Boolean CachingInitialised = FALSE;$/;"	v
CalcAsError	HFBLat.c	/^static Boolean CalcAsError = FALSE;   \/* if TRUE, new way of calc'ing error... *\/ $/;"	v	file:
CalcCompress	HParm.c	/^static void CalcCompress(ParmBuf pbuf, PBlock *pbInit,int nCols, Boolean irefc)$/;"	f	file:
CalcSilDetParms	HParm.c	/^static void CalcSilDetParms(ParmBuf pbuf, float *res, $/;"	f	file:
CalcStats	HLat.c	/^void CalcStats (Lattice *lat)$/;"	f
CalcVolume	HAudio.c	/^static float CalcVolume(short *data, int len)$/;"	f	file:
CentreX	HGraf.c	/^int CentreX(int x, char *str)$/;"	f
CentreX	HGraf.null.c	/^int CentreX(int x, char *str)$/;"	f
CentreX	HGraf_WIN32.c	/^int CentreX(int x, char *str)$/;"	f
CentreY	HGraf.c	/^int CentreY(int y, char *str)$/;"	f
CentreY	HGraf.null.c	/^int CentreY(int y, char *str)$/;"	f
CentreY	HGraf_WIN32.c	/^int CentreY(int y, char *str)$/;"	f
Cepstrum2LPC	HSigP.c	/^void Cepstrum2LPC (Vector c, Vector a)$/;"	f
ChangeState	HAudio.c	/^static void ChangeState(AudioIn a, AudioInStatus newState)$/;"	f	file:
ChangeState	HParm.c	/^static void ChangeState(ParmBuf pbuf, PBStatus newState)$/;"	f	file:
ChannelInfo	HParm.c	/^ChannelInfo;$/;"	t	typeref:struct:channelinfo	file:
ChannelType	HParm.c	/^ChannelType;$/;"	t	typeref:enum:channeltype	file:
CheckAdaptOptions	HAdapt.c	/^static void CheckAdaptOptions()$/;"	f	file:
CheckAndFillBuffer	HParm.c	/^static void CheckAndFillBuffer(ParmBuf pbuf)$/;"	f	file:
CheckBaseClass	HModel.c	/^static ReturnStatus CheckBaseClass(HMMSet *hset, BaseClass *bclass)$/;"	f	file:
CheckBuffer	HParm.c	/^static void CheckBuffer(ParmBuf pbuf)$/;"	f	file:
CheckButtonList	HGraf.c	/^HButton *CheckButtonList(HButton *btnlst, int x, int y)$/;"	f
CheckButtonList	HGraf.null.c	/^HButton *CheckButtonList(HButton *btnlst, int x, int y)$/;"	f
CheckButtonList	HGraf_WIN32.c	/^HButton *CheckButtonList(HButton *btnlst, int x, int y)$/;"	f
CheckCorners	HGraf.c	/^static void CheckCorners(int *x0, int *y0, int *x1, int *y1)$/;"	f	file:
CheckCorners	HGraf_WIN32.c	/^static void CheckCorners(int *x0, int *y0, int *x1, int *y1)$/;"	f	file:
CheckData	HFB.c	/^static void CheckData(HMMSet *hset, char *fn, BufferInfo *info, $/;"	f	file:
CheckData	HFBLat.c	/^static void CheckData(char *fn, BufferInfo *info) $/;"	f	file:
CheckDiscrete	HModel.c	/^static ReturnStatus CheckDiscrete(HMMSet *hset)$/;"	f	file:
CheckFn	HShell.c	/^static char *CheckFn(char *fn)$/;"	f	file:
CheckHMM	HModel.c	/^static ReturnStatus CheckHMM(char *defName, HLink hmm)$/;"	f	file:
CheckHSet	HModel.c	/^static ReturnStatus CheckHSet(HMMSet *hset)$/;"	f	file:
CheckMarker	HTrain.c	/^static void CheckMarker(Source *src)$/;"	f	file:
CheckMix	HModel.c	/^static ReturnStatus CheckMix(char *defName, MixPDF *mp, int n, int s, int m, int sw)$/;"	f	file:
CheckOptions	HModel.c	/^static ReturnStatus CheckOptions(HMMSet *hset)$/;"	f	file:
CheckPName	HTrain.c	/^static void CheckPName(Source *src, char *pname)$/;"	f	file:
CheckPruning	HFB.c	/^static void CheckPruning(AlphaBeta *ab, int t, int skipstart, int skipend)$/;"	f	file:
CheckSemiTiedOptions	HAdapt.c	/^static void CheckSemiTiedOptions(AdaptXForm *xform, AccStruct *accs)$/;"	f	file:
CheckStEndNodes	HNet.c	/^static ReturnStatus CheckStEndNodes(Lattice *lat)$/;"	f	file:
CheckState	HModel.c	/^static ReturnStatus CheckState(char *defName, HLink hmm, StateInfo *si, int n)$/;"	f	file:
CheckStream	HModel.c	/^static ReturnStatus CheckStream(char *defName, HLink hmm, StreamElem *se, int s, int n)$/;"	f	file:
CheckTMRecs	HModel.c	/^static ReturnStatus CheckTMRecs(HMMSet *hset)$/;"	f	file:
ChkType	HUtil.c	/^static void ChkType(char newtype, char *type)$/;"	f	file:
Choleski	HMath.c	/^static Boolean Choleski(TriMat A, DMatrix L)$/;"	f	file:
ClassifyMLFPattern	HLabel.c	/^MLFPatType ClassifyMLFPattern(char *s)$/;"	f
ClearBoNGram	HLM.c	/^void ClearBoNGram(LModel *lm)$/;"	f
ClearDepth	HModel.h	/^typedef enum {CLR_HMMS,CLR_STATES,CLR_STREAMS,CLR_ALL} ClearDepth;$/;"	t	typeref:enum:__anon56
ClearLModel	HLM.c	/^void ClearLModel(LModel *lm)$/;"	f
ClearSeenFlags	HModel.c	/^void ClearSeenFlags(HMMSet *hset, ClearDepth depth)$/;"	f
ClearSet	HUtil.c	/^void ClearSet(IntSet s)$/;"	f
ClearStreams	HModel.c	/^void ClearStreams(HMMSet *hset, StreamElem *ste, ClearDepth depth)$/;"	f
ClearVocab	HDict.c	/^void ClearVocab(Vocab *voc)$/;"	f
ClientRect	HGraf_WIN32.c	/^static RECT  ClientRect;$/;"	v	file:
CloneHMM	HUtil.c	/^void CloneHMM(HLink src, HLink tgt, Boolean sharing)$/;"	f
CloneMixPDF	HUtil.c	/^MixPDF *CloneMixPDF(HMMSet *hset, MixPDF *s, Boolean sharing)$/;"	f
CloneSMatrix	HUtil.c	/^SMatrix CloneSMatrix(MemHeap *hmem, SMatrix s, Boolean sharing)$/;"	f
CloneSTriMat	HUtil.c	/^STriMat CloneSTriMat(MemHeap *hmem, STriMat s, Boolean sharing)$/;"	f
CloneSVector	HUtil.c	/^SVector CloneSVector(MemHeap *hmem, SVector s, Boolean sharing)$/;"	f
CloneState	HUtil.c	/^StateInfo *CloneState(HMMSet *hset, StateInfo *ssi, Boolean sharing)$/;"	f
CloneStream	HUtil.c	/^MixtureVector CloneStream(HMMSet *hset, StreamElem *ste, Boolean sharing)$/;"	f
CloseAudi	HAudio.c	/^static void CloseAudi(AudioIn a)$/;"	f	file:
CloseAudioInput	HAudio.c	/^void CloseAudioInput(AudioIn a)$/;"	f
CloseAudioOutput	HAudio.c	/^void CloseAudioOutput(AudioOut a)$/;"	f
CloseAudo	HAudio.c	/^static void CloseAudo(AudioOut a)$/;"	f	file:
CloseBuffer	HParm.c	/^void CloseBuffer(ParmBuf pbuf)$/;"	f
CloseLLF	HLat.c	/^void CloseLLF (LLFInfo *llf)$/;"	f
CloseMLFSaveFile	HLabel.c	/^void CloseMLFSaveFile(void)$/;"	f
CloseSource	HShell.c	/^void CloseSource(Source *src)$/;"	f
CloseWaveInput	HWave.c	/^void CloseWaveInput(Wave w)$/;"	f
CloseWaveOutput	HWave.c	/^ReturnStatus CloseWaveOutput(Wave w, FileFormat fmt, char *fname)$/;"	f
ClosedDict	HNet.c	/^static Boolean ClosedDict(Vocab *voc,HMMSet *hset)$/;"	f	file:
Cluster	HTrain.h	/^}Cluster;$/;"	t	typeref:struct:__anon82
ClusterSet	HTrain.h	/^}ClusterSet;$/;"	t	typeref:struct:__anon83
CmpTM	HModel.c	/^static int CmpTM(const void *t1, const void *t2)$/;"	f	file:
CodeStyle	HParm.c	/^typedef enum { FFTbased, LPCbased, VQbased} CodeStyle;$/;"	t	typeref:enum:__anon61	file:
CollectPaths	HRec.c	/^static void CollectPaths(void)$/;"	f	file:
CommonChunk1	HWave.c	/^} CommonChunk1;$/;"	t	typeref:struct:__anon99	file:
CommonChunk2	HWave.c	/^} CommonChunk2;   $/;"	t	typeref:struct:__anon100	file:
CompBlockSizes	HAdapt.c	/^static Boolean CompBlockSizes(IntVec blocks1, IntVec blocks2)$/;"	f	file:
CompFXForm	HAdapt.c	/^static Vector CompFXForm(MixPDF *mp, Vector svec, AdaptXForm *xform, AInfo *ai, LogFloat *det)$/;"	f	file:
CompXForm	HAdapt.c	/^static void CompXForm(MixPDF *mp, AdaptXForm *xform, AInfo *ai)$/;"	f	file:
CompareMInfo	HAdapt.c	/^static Boolean CompareMInfo(HMMSet *hset, AdaptXForm *xform)$/;"	f	file:
CompareXFormInfo	HAdapt.c	/^static Boolean CompareXFormInfo(AdaptXForm *xform1, AdaptXForm *xform2)$/;"	f	file:
CompleteRecognition	HRec.c	/^Lattice *CompleteRecognition(VRecInfo *vri,HTime frameDur,MemHeap *heap)$/;"	f
CompressItemList	HModel.c	/^static void CompressItemList(MemHeap *x, ILink ilist, ILink *bilist)$/;"	f	file:
CompressPBlock	HParm.c	/^static void CompressPBlock(ParmBuf pbuf, PBlock *pb, short *sp, int nCols)$/;"	f	file:
CompressType	HWave.c	/^typedef enum _CompressType CompressType;$/;"	t	typeref:enum:_CompressType	file:
ConcatFN	HModel.c	/^static char *ConcatFN(char *path, char *base, char *ext, char *fname)$/;"	f	file:
ConfKind	HShell.h	/^} ConfKind;$/;"	t	typeref:enum:__anon76
ConfParam	HShell.h	/^} ConfParam;$/;"	t	typeref:struct:__anon78
ConfVal	HShell.h	/^}ConfVal;$/;"	t	typeref:union:__anon77
ConfigEntry	HShell.c	/^}ConfigEntry;$/;"	t	typeref:struct:_ConfigEntry	file:
ConsArcList	HArc.c	/^ArcList *ConsArcList(MemHeap *mem, HArc *h, ArcList *t){$/;"	f
ConsumeHeader	HWave.c	/^static void ConsumeHeader(FILE *f, int bytesRead, int headSize)$/;"	f	file:
ContextName	HNet.c	/^static LabId ContextName(HMMSetCxtInfo *hci,int c)$/;"	f	file:
ConvDiagC	HUtil.c	/^void ConvDiagC(HMMSet *hset, Boolean convData)$/;"	f
ConvExpWt	HUtil.c	/^void ConvExpWt(HMMSet *hset)$/;"	f
ConvLogLikeFromBase	HNet.c	524;"	d	file:
ConvLogLikeToBase	HNet.c	526;"	d	file:
ConvLogWt	HUtil.c	/^void ConvLogWt(HMMSet *hset)$/;"	f
ConvertFrame	HParm.c	/^static int ConvertFrame(IOConfig cf, float *pbuf)$/;"	f	file:
ConvertNISTData	HWave.c	/^ReturnStatus ConvertNISTData(Wave w, InputAction ia)$/;"	f
ConvertSUNAU8Data	HWave.c	/^static ReturnStatus ConvertSUNAU8Data(Wave w)$/;"	f	file:
ConvertWAVData	HWave.c	/^ReturnStatus ConvertWAVData(Wave w, InputAction *ia)$/;"	f
CopyAdaptXForm	HAdapt.c	/^AdaptXForm *CopyAdaptXForm(MemHeap *x, AdaptXForm *xform)$/;"	f
CopyDColumn	HMath.c	/^static void CopyDColumn(DMatrix M, int k, DVector v) $/;"	f	file:
CopyDMatrix	HMath.c	/^void CopyDMatrix(DMatrix m1, DMatrix m2)$/;"	f
CopyDRow	HMath.c	/^static void CopyDRow(DMatrix M, int k, DVector v) $/;"	f	file:
CopyDVector	HMath.c	/^void CopyDVector(DVector v1, DVector v2)$/;"	f
CopyIntVec	HMath.c	/^void CopyIntVec(IntVec v1, IntVec v2)$/;"	f
CopyLabelList	HLabel.c	/^LabList* CopyLabelList(MemHeap *x, LabList* ll)$/;"	f
CopyLattice	HNet.c	/^void CopyLattice(Lattice *lat, Lattice *newlat, $/;"	f
CopyLinXForm	HAdapt.c	/^LinXForm *CopyLinXForm(MemHeap *x, LinXForm *xf)$/;"	f
CopyMatrix	HMath.c	/^void CopyMatrix(Matrix m1, Matrix m2)$/;"	f
CopyShortVec	HMath.c	/^void CopyShortVec(ShortVec v1, ShortVec v2)$/;"	f
CopyString	HMem.c	/^char *CopyString(MemHeap *x, char *s)$/;"	f
CopyTranscription	HLabel.c	/^Transcription *CopyTranscription(MemHeap *x, Transcription *t)$/;"	f
CopyTriMat	HMath.c	/^void CopyTriMat(TriMat m1, TriMat m2)$/;"	f
CopyVector	HMath.c	/^void CopyVector(Vector v1, Vector v2)$/;"	f
CopyXFormSet	HAdapt.c	/^XFormSet *CopyXFormSet(MemHeap *x, XFormSet *xfset)$/;"	f
CorrA	HArc.h	/^typedef struct _CorrA CorrA;$/;"	t	typeref:struct:_CorrA
CorrN	HArc.h	/^typedef struct _CorrN CorrN; \/* for exact MPE. *\/$/;"	t	typeref:struct:_CorrN
CorrectArc	HFBLat.c	/^} CorrectArc;$/;"	t	typeref:struct:__anon21	file:
CorrectArcList	HFBLat.c	/^} CorrectArcList;$/;"	t	typeref:struct:_CorrectArcList	file:
CountAuxLabs	HLabel.c	/^int CountAuxLabs(LabList *ll, int i)$/;"	f
CountLabs	HLabel.c	/^int CountLabs(LabList *ll)$/;"	f
CountNonNullNodes	HNet.c	/^static int CountNonNullNodes(Lattice *lat)$/;"	f	file:
CounterFN	HShell.c	/^char * CounterFN(char *prefix, char* suffix, int count, int width, char *s)$/;"	f
CovDet	HMath.c	/^LogFloat CovDet(TriMat c)$/;"	f
CovInvert	HMath.c	/^LogFloat CovInvert(TriMat c, Matrix invc)$/;"	f
CovKind	HMath.h	/^} CovKind;$/;"	t	typeref:enum:__anon34
CovKind2Str	HModel.c	/^char *CovKind2Str(CovKind ckind, char *buf)$/;"	f
Covariance	HMath.h	/^} Covariance;$/;"	t	typeref:union:__anon35
CreateAccCache	HAdapt.c	/^static AccCache  *CreateAccCache(IntVec size,  int b)$/;"	f	file:
CreateAccStruct	HAdapt.c	/^static AccStruct *CreateAccStruct(MemHeap *x, AdaptXForm *xform, $/;"	f	file:
CreateAdaptXForm	HAdapt.c	/^AdaptXForm *CreateAdaptXForm(HMMSet *hset, char *xformName)$/;"	f
CreateAlpha	HFB.c	/^static void CreateAlpha(AlphaBeta *ab, HMMSet *hset, int Q)$/;"	f	file:
CreateArc	HArc.c	/^HArc *CreateArc(MemHeap *mem, Lattice *lat, LArc *la, int start_time, int pos, int arcId, HArc *lastArc, float insPen, float lmScale, HMMSet *hset, ArcInfo *aInfo){ \/*Creates an arc.*\/$/;"	f
CreateBaseAdaptXForm	HAdapt.c	/^static AdaptXForm *CreateBaseAdaptXForm(HMMSet *hset, char *xformName)$/;"	f	file:
CreateBaseTriMat	HAdapt.c	/^static void CreateBaseTriMat(MemHeap *x, MixPDF *mp, AdaptXForm *xform, int class)$/;"	f	file:
CreateBeta	HFB.c	/^static void CreateBeta(AlphaBeta *ab, int T)$/;"	f	file:
CreateBetaQ	HFB.c	/^static DVector *CreateBetaQ(MemHeap *x, int qLo,int qHi,int Q)$/;"	f	file:
CreateBlockTriMat	HAdapt.c	/^static TriMat *CreateBlockTriMat(MemHeap *x, IntVec blockSize)$/;"	f	file:
CreateBoNGram	HLM.c	/^NGramLM *CreateBoNGram(LModel *lm,int vocSize, int counts[NSIZE])$/;"	f
CreateCME	HModel.c	/^static MixtureElem *CreateCME(HMMSet *hset, int M)$/;"	f	file:
CreateDME	HModel.c	/^static ShortVec CreateDME(HMMSet *hset, int M)$/;"	f	file:
CreateDMatrix	HMem.c	/^DMatrix CreateDMatrix(MemHeap *x, int nrows,int ncols)$/;"	f
CreateDVector	HMem.c	/^DVector CreateDVector(MemHeap *x, int size)$/;"	f
CreateHButton	HGraf.c	/^HButton *CreateHButton(HButton *btnlst, ButtonId btnid, int x, int y, int w, $/;"	f
CreateHButton	HGraf.null.c	/^HButton *CreateHButton(HButton *btnlst, ButtonId btnid, int x, int y, int w, $/;"	f
CreateHButton	HGraf_WIN32.c	/^HButton *CreateHButton(HButton *btnlst, ButtonId btnid, int x, int y, int w, $/;"	f
CreateHMM	HModel.c	/^static ReturnStatus CreateHMM(HMMSet *hset, LabId lId, LabId pId)$/;"	f	file:
CreateHMMSet	HModel.c	/^void CreateHMMSet(HMMSet *hset, MemHeap *heap, Boolean allowTMods)$/;"	f
CreateHeap	HMem.c	/^void CreateHeap(MemHeap *x, char *name, HeapType type, size_t elemSize, $/;"	f
CreateIEModels	HNet.c	/^void CreateIEModels(Word thisWord,PronHolder *pInst,int p,int q,$/;"	f
CreateInsts	HFB.c	/^static int CreateInsts(FBInfo *fbInfo, AlphaBeta *ab, int Q, Transcription *tr)$/;"	f	file:
CreateIntVec	HMem.c	/^IntVec CreateIntVec(MemHeap *x,int size)$/;"	f
CreateLabel	HLabel.c	/^LLink CreateLabel(MemHeap *x, int maxAux)$/;"	f
CreateLabelList	HLabel.c	/^LabList* CreateLabelList(MemHeap *x, int maxAuxLab)$/;"	f
CreateLattice	HRec.c	/^static Lattice *CreateLattice(MemHeap *heap,TokenSet *res,HTime framedur)$/;"	f	file:
CreateLinXForm	HAdapt.c	/^static LinXForm *CreateLinXForm(MemHeap *x,int vsize,IntVec blockSize)$/;"	f	file:
CreateMInfo	HAdapt.c	/^static MInfo *CreateMInfo(MemHeap *x, MixPDF *mp, AdaptXForm *xform)$/;"	f	file:
CreateMatBigram	HLM.c	/^MatBiLM *CreateMatBigram(LModel *lm,int nw)$/;"	f
CreateMatrix	HMem.c	/^Matrix CreateMatrix(MemHeap *x, int nrows, int ncols)$/;"	f
CreateMuAcc	HTrain.c	/^static MuAcc *CreateMuAcc(MemHeap *x, int vSize, int nPara)$/;"	f	file:
CreateObsCache	HAdapt.c	/^static ObsCache *CreateObsCache(MemHeap *heap, ObsCache **headoc, int size)$/;"	f	file:
CreateOjsprob	HFB.c	/^static float *** CreateOjsprob(MemHeap *x, int N, int S)$/;"	f	file:
CreateOqprob	HFB.c	/^static float ****CreateOqprob(MemHeap *x, int qLo,int qHi)$/;"	f	file:
CreateOtprob	HFB.c	/^static void CreateOtprob(AlphaBeta *ab, int T)$/;"	f	file:
CreatePreComp	HTrain.c	/^static PreComp *CreatePreComp(MemHeap *x)$/;"	f	file:
CreateRegAcc	HAdapt.c	/^static RegAcc *CreateRegAcc(MemHeap *x, MixPDF *mp, AdaptXForm *xform)$/;"	f	file:
CreateRegNode	HModel.c	/^static RegNode *CreateRegNode(MemHeap *m, int nodeId)$/;"	f	file:
CreateSE	HModel.c	/^static StreamElem *CreateSE(HMMSet *hset, int S)$/;"	f	file:
CreateSEIndex	HRec.c	/^static void CreateSEIndex(PSetInfo *psi,HLink hmm)$/;"	f	file:
CreateSMatrix	HMem.c	/^Matrix CreateSMatrix(MemHeap *x, int nrows,int ncols)$/;"	f
CreateSTriMat	HMem.c	/^STriMat CreateSTriMat(MemHeap *x,int size)$/;"	f
CreateSVector	HMem.c	/^Vector CreateSVector(MemHeap *x, int size)$/;"	f
CreateSegStore	HTrain.c	/^SegStore CreateSegStore(MemHeap *x, Observation obs, int segLen)$/;"	f
CreateSequence	HTrain.c	/^Sequence CreateSequence(MemHeap *x, int blkSize)$/;"	f
CreateSet	HUtil.c	/^IntSet CreateSet(int size)$/;"	f
CreateShortVec	HMem.c	/^ShortVec CreateShortVec(MemHeap *x,int size)$/;"	f
CreateSrcExt	HParm.c	/^HParmSrcDef CreateSrcExt(Ptr xInfo, ParmKind pk, int size, HTime sampPeriod, $/;"	f
CreateTME	HModel.c	/^static Vector CreateTME(HMMSet *hset, int M)$/;"	f	file:
CreateTrAcc	HFB.c	/^static TrAcc *CreateTrAcc(MemHeap *x, int numStates)$/;"	f	file:
CreateTrAcc	HTrain.c	/^static TrAcc *CreateTrAcc(MemHeap *x, int numStates, int nPara)$/;"	f	file:
CreateTraceOcc	HFB.c	/^static void CreateTraceOcc(AlphaBeta *ab, UttInfo *utt)$/;"	f	file:
CreateTranscription	HLabel.c	/^Transcription *CreateTranscription(MemHeap *x)$/;"	f
CreateTriMat	HMem.c	/^TriMat CreateTriMat(MemHeap *x,int size)$/;"	f
CreateVQNode	HVQ.c	/^VQNode CreateVQNode(short vqidx, short nid, short lid, short rid, $/;"	f
CreateVQTab	HVQ.c	/^VQTable CreateVQTab(char *tabFN, short magic, TreeType type,$/;"	f
CreateVaAcc	HTrain.c	/^static VaAcc *CreateVaAcc(MemHeap *x, int vSize, CovKind ck, int nPara)$/;"	f	file:
CreateVector	HMem.c	/^Vector CreateVector(MemHeap *x, int size)$/;"	f
CreateWIModels	HNet.c	/^void CreateWIModels(PronHolder *pInst,int p,int q,$/;"	f
CreateWave	HWave.c	/^static Wave CreateWave(MemHeap *x, FileFormat fmt)$/;"	f	file:
CreateWtAcc	HFB.c	/^static WtAcc *CreateWtAcc(MemHeap *x, int nMix)$/;"	f	file:
CreateWtAcc	HTrain.c	/^static WtAcc *CreateWtAcc(MemHeap *x, int nMix, int nPara)$/;"	f	file:
CreateX1Model	HNet.c	/^static void CreateX1Model(PronHolder *pInst,int p, int q,$/;"	f	file:
CreateXEModels	HNet.c	/^static void CreateXEModels(PronHolder *pInst,int p, int q,$/;"	f	file:
CreateXFormInfo	HAdapt.c	/^static XFormInfo *CreateXFormInfo(MemHeap *x)$/;"	f	file:
CreateXFormMacro	HModel.c	/^void CreateXFormMacro(HMMSet *hset,AdaptXForm *xform, char* macroname)$/;"	f
CurrentColour	HGraf_WIN32.c	/^static COLORREF CurrentColour = RGB(0,0,0);$/;"	v	file:
CurrentFont	HGraf.c	/^static XFontStruct  *DefaultFont, *CurrentFont, *FontInfo[NO_OF_FONTS];$/;"	v	file:
D	HAdapt.c	/^   DVector *K, D;$/;"	m	struct:__anon6	file:
DARK_BLUE	HGraf.h	/^enum _HColour { WHITE, YELLOW, ORANGE, RED, MAUVE, PURPLE, DARK_BLUE, $/;"	e	enum:_HColour
DARK_BROWN	HGraf.h	/^                LIGHT_BLUE, DARK_GREEN, LIGHT_GREEN, DARK_BROWN, LIGHT_BROWN, $/;"	e	enum:_HColour
DARK_GREEN	HGraf.h	/^                LIGHT_BLUE, DARK_GREEN, LIGHT_GREEN, DARK_BROWN, LIGHT_BROWN, $/;"	e	enum:_HColour
DARK_GREY	HGraf.h	/^                LIGHT_GREY, GREY, DARK_GREY, BLACK};$/;"	e	enum:_HColour
DBLCX_FMT	esig_asc.c	75;"	d	file:
DBLCX_W	esig_asc.c	74;"	d	file:
DBLCX_WFMT	esig_asc.c	76;"	d	file:
DBL_FMT	esig_asc.c	43;"	d	file:
DBL_QUOTE	HShell.h	81;"	d
DBL_W	esig_asc.c	42;"	d	file:
DBL_WFMT	esig_asc.c	44;"	d	file:
DBUFLEN	HNet.c	889;"	d	file:
DCSaved	HGraf_WIN32.c	/^static HDC DCSaved;               \/* to store memDC when saving Metafile *\/$/;"	v	file:
DEF_FONTSIZE	HGraf_WIN32.c	40;"	d	file:
DEF_SNR	HParm.c	2404;"	d	file:
DELKEY	HGraf.h	/^               ENTERKEY, DELKEY, ESCKEY};$/;"	e	enum:_KeyType
DELTAWINDOW	HParm.c	/^   DELTAWINDOW,   \/* Window size for 1st diffs *\/$/;"	e	enum:__anon63	file:
DIAGC	HMath.h	/^   DIAGC,         \/* diagonal covariance *\/$/;"	e	enum:__anon34
DIAGCOV	HModel.c	/^   DIAGCOV,  FULLCOV, XFORMCOV,$/;"	e	enum:__anon38	file:
DISCRETE	HParm.h	/^      DISCRETE,                        \/* Discrete VQ symbols (shorts) *\/$/;"	e	enum:_BaseParmKind
DISCRETEHS	HModel.h	/^enum _HSetKind {PLAINHS, SHAREDHS, TIEDHS, DISCRETEHS};$/;"	e	enum:_HSetKind
DLOGSCALE	HModel.h	56;"	d
DLOGZERO	HModel.h	57;"	d
DLUDecompose	HMath.c	/^static Boolean DLUDecompose(DMatrix a, int *perm, int *sign)$/;"	f	file:
DLinSolve	HMath.c	/^static void DLinSolve(DMatrix a, int *perm, double *b)$/;"	f	file:
DMat2Mat	HMath.c	/^void DMat2Mat(DMatrix m1, Matrix m2)$/;"	f
DMatCofact	HMath.c	/^double DMatCofact(DMatrix c, int r, DVector cofact)$/;"	f
DMatDet	HMath.c	/^double DMatDet(DMatrix c)$/;"	f
DMatInvert	HMath.c	/^double DMatInvert(DMatrix c, DMatrix invc)$/;"	f
DMatrix	HMem.h	/^typedef double **DMatrix;  \/* double matrix[1..nrows][1..ncols] *\/$/;"	t
DMatrixElemSize	HMem.c	/^size_t DMatrixElemSize(int nrows,int ncols)$/;"	f
DOT	esignal.h	60;"	d
DOUBLE	esignal.h	66;"	d
DOUBLEFFT	HParm.c	/^   DOUBLEFFT,     \/* Use twice the required FFT size *\/$/;"	e	enum:__anon63	file:
DOUBLE_COMPLEX	esignal.h	75;"	d
DOutP	HModel.c	/^static LogFloat DOutP(Vector x, int vecSize, MixPDF *mp)$/;"	f	file:
DPROB	HModel.c	/^   DURATION, INVDIAGCOV, TRANSP, DPROB, LLTCOV, LLTCOVAR,$/;"	e	enum:__anon38	file:
DProb2Short	HModel.c	/^short DProb2Short(float p)$/;"	f
DURATION	HModel.c	/^   DURATION, INVDIAGCOV, TRANSP, DPROB, LLTCOV, LLTCOVAR,$/;"	e	enum:__anon38	file:
DUR_KEY	HUtil.c	/^   TRANSP_KEY, STATE_KEY, DUR_KEY, WEIGHTS_KEY,$/;"	e	enum:__anon89	file:
DVector	HMem.h	/^typedef double *DVector;   \/* double vector[1..size]   *\/$/;"	t
DVectorElemSize	HMem.c	/^size_t DVectorElemSize(int size){ return (size+1)*sizeof(double);}$/;"	f
DVectorSize	HMem.c	/^int DVectorSize(DVector v)$/;"	f
DeRefAlign	HRec.c	/^static void DeRefAlign(Align *align)$/;"	f	file:
DeRefPathPrev	HRec.c	/^static void DeRefPathPrev(Path *path)$/;"	f	file:
DebugMsg	esignal.h	298;"	d
DebugMsg	esignal.h	303;"	d
DebugMsgFunc	esignal.c	/^void    (*DebugMsgFunc)(char *msg);$/;"	v
DebugMsgLevel	esignal.c	/^int     DebugMsgLevel;$/;"	v
DebugPrint	esignal.c	/^DebugPrint(char *msg)$/;"	f
DecUse	HMem.c	/^void DecUse(Ptr m)$/;"	f
DecodeIMuLaw	HWave.c	/^static void DecodeIMuLaw(Wave w)$/;"	f	file:
DecodeKeyPress	HGraf.c	/^static void DecodeKeyPress(XKeyEvent *xkev, HEventRec *hev)$/;"	f	file:
DecompressShortPack	HWave.c	/^void DecompressShortPack(Wave w)$/;"	f
DefaultFont	HGraf.c	/^static XFontStruct  *DefaultFont, *CurrentFont, *FontInfo[NO_OF_FONTS];$/;"	v	file:
DefineContexts	HNet.c	/^static int DefineContexts(HMMSetCxtInfo *hci)$/;"	f	file:
DelPron	HDict.c	/^void DelPron(Vocab *voc, Word word, Pron pron)$/;"	f
DelQualifiers	HParm.c	/^static void DelQualifiers(float *data, IOConfig cf)$/;"	f	file:
DelWord	HDict.c	/^void DelWord(Vocab *voc, Word word)$/;"	f
DeleteColumn	HParm.c	/^static void DeleteColumn(float *data, int nUsed, int si, int d)$/;"	f	file:
DeleteHeap	HMem.c	/^void DeleteHeap(MemHeap *x)$/;"	f
DeleteItem	HTrain.c	/^void DeleteItem(Sequence seq, int i)$/;"	f
DeleteLabel	HLabel.c	/^void DeleteLabel(LLink item)$/;"	f
DeleteMacro	HModel.c	/^void DeleteMacro(HMMSet *hset, MLink p)$/;"	f
DeleteMacroStruct	HModel.c	/^void DeleteMacroStruct(HMMSet *hset, char type, Ptr structure)$/;"	f
DeleteVRecInfo	HRec.c	/^void DeleteVRecInfo(VRecInfo *vri)$/;"	f
Depth	HArc.c	/^float Depth(ArcInfo *aInfo, Boolean All){$/;"	f
DetachInst	HRec.c	/^static void DetachInst(NetNode *node)$/;"	f	file:
DiagApplyMat2TXForm	HAdapt.c	/^static void DiagApplyMat2TXForm(LinXForm *linXForm, Matrix m, Vector v)$/;"	f	file:
DictEntry	HDict.h	/^} DictEntry;$/;"	t	typeref:struct:_DictEntry
DictFilter	HShell.h	/^   DictFilter,      \/* Dictionary file input via HDict *\/$/;"	e	enum:__anon74
DictOFilter	HShell.h	/^   DictOFilter,     \/* Dictionary file output via HDict *\/$/;"	e	enum:__anon74
Dispose	HMem.c	/^void Dispose(MemHeap *x, void *p)$/;"	f
Distance	HTrain.c	/^static float Distance(Vector v1, Vector v2)$/;"	f	file:
Do8_16	HWave.c	/^               Do8_16  = 64,    \/* 8 bit PCM expansion needed *\/$/;"	e	enum:__anon93	file:
DoALAW	HWave.c	/^               DoALAW  = 32,    \/* 8 bit A-Law expansion needed *\/$/;"	e	enum:__anon93	file:
DoAllMixUpdates	HFBLat.c	/^void DoAllMixUpdates(int t){$/;"	f
DoBSWAP	HWave.c	/^               DoBSWAP  = 2,     \/* byte swap needed *\/$/;"	e	enum:__anon93	file:
DoCVT	HWave.c	/^typedef enum { DoCVT    = 1,     \/* input conversion needed *\/$/;"	e	enum:__anon93	file:
DoCorrectness	HExactMPE.c	/^float DoCorrectness(FBLatInfo *fbInfo, MemHeap *mem, ArcInfo *ai, float prune, $/;"	f
DoExactCorrectness	HExactMPE.c	/^void DoExactCorrectness(FBLatInfo *fbInfo, Lattice *lat){$/;"	f
DoMULAW	HWave.c	/^               DoMULAW  = 16,    \/* 8 bit Mu-Law expansion needed *\/$/;"	e	enum:__anon93	file:
DoMatch	HShell.c	/^Boolean DoMatch(char *s, char *p)$/;"	f
DoMixUpdate	HFBLat.c	/^void DoMixUpdate(MixPDF *mp, int s, float Lr, float meescale, int t){  $/;"	f
DoPreComps	HTrain.c	75;"	d	file:
DoSHORT	HWave.c	/^               DoSHORT  = 8,     \/* SHORTEN decompression needed *\/$/;"	e	enum:__anon93	file:
DoSPACK	HWave.c	/^               DoSPACK  = 4,     \/* SHORT PACK decompression needed *\/$/;"	e	enum:__anon93	file:
DoSTEREO	HWave.c	/^               DoSTEREO = 128     \/* Convert stereo to mono*\/ $/;"	e	enum:__anon93	file:
DoingFourthAcc	HFBLat.c	/^static Boolean DoingFourthAcc=FALSE;    \/* Indicate currently it is doing MPE with MMI prior *\/$/;"	v	file:
DoubleComplex	esignal.h	/^typedef struct {double	real, imag;}	DoubleComplex;$/;"	t	typeref:struct:__anon1
DumpAccs	HTrain.c	/^FILE * DumpAccs(HMMSet *hset, char *fname, UPDSet uFlags, int n){ return DumpAccsParallel(hset,fname,n,uFlags,0); }$/;"	f
DumpAccsParallel	HTrain.c	/^FILE * DumpAccsParallel(HMMSet *hset, char *fname, int n, UPDSet uFlags, int index)$/;"	f
DumpClusterMap	HTrain.c	/^static void DumpClusterMap(void)$/;"	f	file:
DumpMarker	HTrain.c	/^static void DumpMarker(FILE *f)$/;"	f	file:
DumpMuAcc	HTrain.c	/^static void DumpMuAcc(FILE *f, MuAcc *ma)$/;"	f	file:
DumpPName	HTrain.c	/^static void DumpPName(FILE *f, char *pname)$/;"	f	file:
DumpTrAcc	HTrain.c	/^static void DumpTrAcc(FILE *f, TrAcc *ta)$/;"	f	file:
DumpVaAcc	HTrain.c	/^static void DumpVaAcc(FILE *f, VaAcc *va, CovKind ck)$/;"	f	file:
DumpWtAcc	HTrain.c	/^static void DumpWtAcc(FILE *f, WtAcc *wa)$/;"	f	file:
DurKind	HModel.h	/^typedef enum _DurKind DurKind;$/;"	t	typeref:enum:_DurKind
DurKind2Str	HModel.c	/^char *DurKind2Str(DurKind dkind, char *buf)$/;"	f
Durbin	HSigP.c	/^static float Durbin(Vector k, Vector thisA, Vector r, float E, int order)$/;"	f	file:
EArcId	HNet.h	/^typedef struct larc_e *EArcId;$/;"	t	typeref:struct:larc_e
EDR1	esignal.h	103;"	d
EDR2	esignal.h	104;"	d
ENDHMM	HModel.c	/^   BEGINHMM, USEMAC, ENDHMM, NUMMIXES, $/;"	e	enum:__anon38	file:
ENORMALISE	HParm.c	/^   ENORMALISE,    \/* Normalise log energy *\/$/;"	e	enum:__anon63	file:
ENTERKEY	HGraf.h	/^               ENTERKEY, DELKEY, ESCKEY};$/;"	e	enum:_KeyType
EOFSYM	HModel.c	/^   MACRO, EOFSYM, NULLSYM   \/* Special Syms - not literals *\/$/;"	e	enum:__anon38	file:
ESCALE	HParm.c	/^   ESCALE,        \/* Log energy scale factor *\/$/;"	e	enum:__anon63	file:
ESCAPE_CHAR	HShell.h	82;"	d
ESCKEY	HGraf.h	/^               ENTERKEY, DELKEY, ESCKEY};$/;"	e	enum:_KeyType
ESIG	HWave.h	/^	ESIG,              \/* used for both wave and parm files *\/$/;"	e	enum:__anon102
ESIGFieldList	HWave.c	/^static FieldList  ESIGFieldList;  $/;"	v	file:
ESPS	HWave.h	/^        ESPS,              \/* used for both wave and parm files *\/$/;"	e	enum:__anon102
EXACTCORR_PRUNE	HExactMPE.c	/^static float EXACTCORR_PRUNE= -8.5 \/*0.0002*\/; $/;"	v	file:
EdError	HUtil.c	/^static void EdError(char *s)$/;"	f	file:
EdrRead	esig_edr.c	/^EdrRead(void    *data,$/;"	f	file:
EdrReadArray	esig_edr.c	/^EdrReadArray(Array      *data,$/;"	f	file:
EdrReadBool	esig_edr.c	/^EdrReadBool(Bool    *data,$/;"	f	file:
EdrReadChar	esig_edr.c	/^EdrReadChar(char *data,$/;"	f	file:
EdrReadDouble	esig_edr.c	/^EdrReadDouble(double    *data,$/;"	f	file:
EdrReadDoubleComplex	esig_edr.c	/^EdrReadDoubleComplex(DoubleComplex  *data,$/;"	f	file:
EdrReadFloat	esig_edr.c	/^EdrReadFloat(float  *data,$/;"	f	file:
EdrReadFloatComplex	esig_edr.c	/^EdrReadFloatComplex(FloatComplex    *data,$/;"	f	file:
EdrReadLong	esig_edr.c	/^EdrReadLong(long    *data,$/;"	f	file:
EdrReadLongComplex	esig_edr.c	/^EdrReadLongComplex(LongComplex  *data,$/;"	f	file:
EdrReadSchar	esig_edr.c	/^EdrReadSchar(Schar  *data,$/;"	f	file:
EdrReadScharComplex	esig_edr.c	/^EdrReadScharComplex(ScharComplex    *data,$/;"	f	file:
EdrReadShort	esig_edr.c	/^EdrReadShort(short  *data,$/;"	f	file:
EdrReadShortComplex	esig_edr.c	/^EdrReadShortComplex(ShortComplex    *data,$/;"	f	file:
EdrReadUchar	esig_edr.c	/^EdrReadUchar(Uchar  *data,$/;"	f	file:
EdrReadUlong	esig_edr.c	/^EdrReadUlong(Ulong *data,$/;"	f	file:
EdrReadUshort	esig_edr.c	/^EdrReadUshort(Ushort *data,$/;"	f	file:
EdrReadWchar	esig_edr.c	/^EdrReadWchar(Wchar      *data,$/;"	f	file:
EdrRecordSize	esig_edr.c	/^EdrRecordSize(FieldList list,$/;"	f
EdrTypeSize	esig_edr.c	/^EdrTypeSize(int type,           \/* numeric data-type code *\/$/;"	f
EdrWrite	esig_edr.c	/^EdrWrite(void   *data,$/;"	f	file:
EdrWriteArray	esig_edr.c	/^EdrWriteArray(Array     *data,$/;"	f	file:
EdrWriteBool	esig_edr.c	/^EdrWriteBool(Bool   *data,$/;"	f	file:
EdrWriteChar	esig_edr.c	/^EdrWriteChar(char *data,$/;"	f	file:
EdrWriteDouble	esig_edr.c	/^EdrWriteDouble(double   *data,$/;"	f	file:
EdrWriteDoubleComplex	esig_edr.c	/^EdrWriteDoubleComplex(DoubleComplex *data,$/;"	f	file:
EdrWriteFloat	esig_edr.c	/^EdrWriteFloat(float     *data,$/;"	f	file:
EdrWriteFloatComplex	esig_edr.c	/^EdrWriteFloatComplex(FloatComplex   *data,$/;"	f	file:
EdrWriteLong	esig_edr.c	/^EdrWriteLong(long       *data,$/;"	f	file:
EdrWriteLongComplex	esig_edr.c	/^EdrWriteLongComplex(LongComplex *data,$/;"	f	file:
EdrWriteSchar	esig_edr.c	/^EdrWriteSchar(Schar     *data,$/;"	f	file:
EdrWriteScharComplex	esig_edr.c	/^EdrWriteScharComplex(ScharComplex   *data,$/;"	f	file:
EdrWriteShort	esig_edr.c	/^EdrWriteShort(short     *data,$/;"	f	file:
EdrWriteShortComplex	esig_edr.c	/^EdrWriteShortComplex(ShortComplex   *data,$/;"	f	file:
EdrWriteUchar	esig_edr.c	/^EdrWriteUchar(Uchar     *data,$/;"	f	file:
EdrWriteUlong	esig_edr.c	/^EdrWriteUlong(Ulong *data,$/;"	f	file:
EdrWriteUshort	esig_edr.c	/^EdrWriteUshort(Ushort *data,$/;"	f	file:
EdrWriteWchar	esig_edr.c	/^EdrWriteWchar(Wchar     *data,$/;"	f	file:
EmptyBuffer	HParm.c	/^ParmBuf EmptyBuffer(MemHeap *x, int size, Observation o, BufferInfo info)$/;"	f
EmptyMixPDF	HModel.c	/^static MixPDF *EmptyMixPDF(HMMSet *hset, int vSize, int s)$/;"	f	file:
EndHMMScan	HUtil.c	/^void EndHMMScan(HMMScanState *hss)$/;"	f
EndOfWord	HArc.h	216;"	d
EndOfWord	HExactMPE.c	94;"	d	file:
EndOfWord	HFBLat.c	134;"	d	file:
EqualKind	HParm.c	/^static Boolean EqualKind(ParmKind a, ParmKind b)$/;"	f	file:
EstCMLLRXForm	HAdapt.c	/^static void EstCMLLRXForm(AccStruct *accs, LinXForm *xf)$/;"	f	file:
EstMLLRCovXForm	HAdapt.c	/^static void EstMLLRCovXForm(AccStruct *accs, LinXForm *xf)$/;"	f	file:
EstMLLRDiagCovXForm	HAdapt.c	/^static void EstMLLRDiagCovXForm(AccStruct *accs, LinXForm *xf, LinXForm *dxf)$/;"	f	file:
EstMLLRMeanXForm	HAdapt.c	/^static void EstMLLRMeanXForm(AccStruct *accs, LinXForm *xf)$/;"	f	file:
EstSemiTXForm	HAdapt.c	/^static void EstSemiTXForm(AdaptXForm *xform, AccStruct *accs, LinXForm *xf, IntVec classes)$/;"	f	file:
EstXForm	HAdapt.c	/^static void EstXForm(AccStruct *accs, AdaptXForm *xform, IntVec classes)$/;"	f	file:
ExactCorrectness	HFBLat.c	/^static Boolean ExactCorrectness=FALSE; \/*IMPORTANT*\/         \/* Do 'exact' version of MPE\/MWE, not using approximation.  This is slightly better for$/;"	v	file:
Exit	HShell.c	/^void Exit(int exitcode)$/;"	f
ExpandLattice	HNet.c	/^static void ExpandLattice(Lattice *newlat, int nNodes, int nArcs)$/;"	f	file:
ExpandMultiLevelLattice	HNet.c	/^Lattice *ExpandMultiLevelLattice(MemHeap *heap, Lattice *lat, Vocab *voc)$/;"	f
ExpandWordNet	HNet.c	/^Network *ExpandWordNet(MemHeap *heap,Lattice *lat,Vocab *voc,HMMSet *hset)$/;"	f
ExpandedLatticeSize	HNet.c	/^static void ExpandedLatticeSize(Lattice *lat, int *nNodes,int *nArcs)$/;"	f	file:
ExplainObservation	HParm.c	/^void ExplainObservation(Observation *o, int itemsPerLine)$/;"	f
ExtFile	HShell.c	/^}ExtFile;$/;"	t	typeref:struct:__anon71	file:
ExtendAux	HLabel.c	/^static void ExtendAux(MemHeap *x, LabList *ll, int n)$/;"	f	file:
ExternTypeSize	esignal.c	/^ExternTypeSize(int type,$/;"	f
ExtnOf	HShell.c	/^char * ExtnOf(char *fn, char *s)$/;"	f
ExtractObservation	HParm.c	/^static void ExtractObservation(float *fp, Observation *o)$/;"	f	file:
FAIL	HShell.h	/^typedef enum {FAIL=-1, SUCCESS=0} ReturnStatus;$/;"	e	enum:__anon72
FALSE	HShell.h	/^typedef enum {FALSE=0, TRUE=1} Boolean;$/;"	e	enum:__anon73
FALSE	HShell.h	89;"	d
FALSE	esignal.h	49;"	d
FALSE_dup	HParm.h	/^   FALSE_dup=FALSE, \/*  0 *\/$/;"	e	enum:__anon67
FBANK	HParm.h	/^      FBANK,                           \/* Log Filter Bank *\/$/;"	e	enum:_BaseParmKind
FBFile	HFB.c	/^Boolean FBFile(FBInfo *fbInfo, UttInfo *utt, char * datafn)$/;"	f
FBInfo	HFB.h	/^} FBInfo;$/;"	t	typeref:struct:__anon20
FBLatAddLattice	HFBLat.c	/^void FBLatAddLattice (FBLatInfo *fbInfo, Lattice *lat){  \/* add this lattice, $/;"	f
FBLatClearUp	HFBLat.c	/^void FBLatClearUp(FBLatInfo *fbInfo){  $/;"	f
FBLatFirstPass	HFBLat.c	/^void FBLatFirstPass(FBLatInfo *_fbInfo, FileFormat dff, char * datafn, char *datafn2, Lattice *MPECorrLat){$/;"	f
FBLatInfo	HFBLat.h	/^} FBLatInfo;$/;"	t	typeref:struct:__anon23
FBLatSecondPass	HFBLat.c	/^void FBLatSecondPass(FBLatInfo *_fbInfo, int num_index, int den_index){$/;"	f
FBLatSetAccScale	HFBLat.c	/^void FBLatSetAccScale(FBLatInfo *fbInfo, float AccScale){ \/*scale accumulators by this amount. *\/$/;"	f
FBank2ASpec	HSigP.c	/^void FBank2ASpec (Vector fbank, Vector as, Vector eql, float compressFact, $/;"	f
FBank2C0	HSigP.c	/^float FBank2C0(Vector fbank)$/;"	f
FBank2MFCC	HSigP.c	/^void FBank2MFCC(Vector fbank, Vector c, int n)$/;"	f
FBank2MelSpec	HSigP.c	/^void FBank2MelSpec(Vector fbank)$/;"	f
FBankInfo	HSigP.h	/^}FBankInfo;$/;"	t	typeref:struct:__anon80
FBinfo	HLat.h	/^} FBinfo;$/;"	t	typeref:struct:FBlnodeInfo
FBlnodeInfo	HLat.h	/^typedef struct FBlnodeInfo {$/;"	s
FClose	HShell.c	/^void FClose(FILE *f, Boolean isPipe)$/;"	f
FFT	HSigP.c	/^void FFT(Vector s, int invert)$/;"	f
FFTbased	HParm.c	/^typedef enum { FFTbased, LPCbased, VQbased} CodeStyle;$/;"	e	enum:__anon61	file:
FIELD_ORDER	esignal.h	98;"	d
FLOAT	esignal.h	67;"	d
FLOATARG	HShell.h	/^typedef enum {SWITCHARG, STRINGARG, INTARG, FLOATARG, NOARG} ArgKind;$/;"	e	enum:__anon79
FLOAT_COMPLEX	esignal.h	76;"	d
FLTCX_FMT	esig_asc.c	79;"	d	file:
FLTCX_W	esig_asc.c	78;"	d	file:
FLTCX_WFMT	esig_asc.c	80;"	d	file:
FLT_FIELD	HNet.c	/^typedef enum {UNK_FIELD, STR_FIELD, INT_FIELD, FLT_FIELD} LatFieldType;$/;"	e	enum:__anon57	file:
FLT_FMT	esig_asc.c	47;"	d	file:
FLT_W	esig_asc.c	46;"	d	file:
FLT_WFMT	esig_asc.c	48;"	d	file:
FONT1	HGraf.c	153;"	d	file:
FONT2	HGraf.c	154;"	d	file:
FONT3	HGraf.c	155;"	d	file:
FONTNAME	HGraf_WIN32.c	/^static char *FONTNAME = "Helvetica";$/;"	v	file:
FONTS_AVAILABLE	HGraf.c	135;"	d	file:
FOURTHWINDOW	HParm.c	/^   FOURTHWINDOW,$/;"	e	enum:__anon63	file:
FOpen	HShell.c	/^FILE *FOpen(char *fname, IOFilter filter, Boolean *isPipe)$/;"	f
FOutP	HModel.c	/^static LogFloat FOutP(Vector x, int vecSize, MixPDF *mp)$/;"	f	file:
FRAMEDUR	HArc.c	/^static float FRAMEDUR = 0; $/;"	v	file:
FULLC	HMath.h	/^   FULLC,         \/* inverse full rank covariance *\/$/;"	e	enum:__anon34
FULLCOV	HModel.c	/^   DIAGCOV,  FULLCOV, XFORMCOV,$/;"	e	enum:__anon38	file:
FVec2Spectrum	HSigP.c	/^void FVec2Spectrum (float fzero, Vector f, Vector s)$/;"	f
FWORD	HMem.c	41;"	d	file:
FZERO	HMath.c	683;"	d	file:
FZeroMean	HSigP.c	/^void FZeroMean(float *data, int vSize, int n, int step)$/;"	f
FieldArrayLength	esignal.c	/^FieldArrayLength(FieldSpec **fields)$/;"	f	file:
FieldLength	esignal.c	/^FieldLength(FieldSpec *field)$/;"	f
FieldList	esignal.h	/^typedef FieldSpec	    **FieldList;$/;"	t
FieldListLength	esignal.c	/^FieldListLength(FieldList list)$/;"	f
FieldOrder	esignal.c	/^FieldOrder(FieldList list)$/;"	f
FieldSpec	esignal.h	/^struct FieldSpec {$/;"	s
FieldSpec	esignal.h	/^typedef struct FieldSpec    FieldSpec;$/;"	t	typeref:struct:FieldSpec
FileBytes	HWave.c	/^static long FileBytes(FILE *f, Wave w)$/;"	f	file:
FileFormat	HWave.h	/^} FileFormat;$/;"	t	typeref:enum:__anon102
FillBufFromChannel	HParm.c	/^static void FillBufFromChannel(ParmBuf pbuf,int minRows)$/;"	f	file:
FillBufferFromAudio	HAudio.c	/^static void FillBufferFromAudio(AudioIn a,int min)$/;"	f	file:
FilterLevel	HLabel.c	/^static void FilterLevel(Transcription *t, int lev)$/;"	f	file:
FilterSet	HShell.c	/^static Boolean FilterSet(IOFilter filter, char *s)$/;"	f	file:
FindAddSubLNode	HLat.c	/^static SubLNode *FindAddSubLNode (MemHeap *heap, LNode *ln, LMState lmstate, int *nsln)$/;"	f	file:
FindButton	HGraf.c	/^HButton *FindButton(HButton *btnlst, ButtonId key)$/;"	f
FindButton	HGraf.null.c	/^HButton *FindButton(HButton *btnlst, ButtonId key)$/;"	f
FindButton	HGraf_WIN32.c	/^HButton *FindButton(HButton *btnlst, ButtonId key)$/;"	f
FindCentres	HTrain.c	/^static void FindCentres(int a, int b)$/;"	f	file:
FindConfEntry	HShell.c	/^static ConfigEntry *FindConfEntry(char *user, char *name)$/;"	f	file:
FindConfParm	HShell.c	/^static int FindConfParm(ConfParam **list,int size,char *name,ConfKind kind)$/;"	f	file:
FindCovariance	HTrain.c	/^static void FindCovariance(int n)$/;"	f	file:
FindField	esignal.c	/^FindField(FieldList list,       \/* field list *\/$/;"	f
FindItemBlock	HTrain.c	/^static IBLink FindItemBlock(Sequence seq, int i, int *j)$/;"	f	file:
FindLContext	HNet.c	/^static int FindLContext(HMMSetCxtInfo *hci,PronHolder *p,int pos,int lc)$/;"	f	file:
FindLatEnd	HNet.c	/^NodeId FindLatEnd(Lattice *lat)$/;"	f
FindLatStart	HNet.c	/^NodeId FindLatStart(Lattice *lat)$/;"	f
FindMLFStr	HLabel.c	/^static Boolean FindMLFStr(char *s, char **st, char **en)$/;"	f	file:
FindMLFType	HLabel.c	/^static MLFDefType FindMLFType(char *s, char **en)$/;"	f	file:
FindMMF	HModel.c	/^static MILink FindMMF(HMMSet *hset, char *fname, Boolean ignorePath)$/;"	f	file:
FindMacroName	HModel.c	/^MLink FindMacroName(HMMSet *hset, char type, LabId id)$/;"	f
FindMacroStruct	HModel.c	/^MLink FindMacroStruct(HMMSet *hset, char type, Ptr structure)$/;"	f
FindModel	HNet.c	/^static HLink FindModel(HMMSetCxtInfo *hci,int lc,LabId name,int rc)$/;"	f	file:
FindNode	HModel.c	/^static RegNode *FindNode(RegNode *n, RegNode *r, int id)$/;"	f	file:
FindRContext	HNet.c	/^static int FindRContext(HMMSetCxtInfo *hci,PronHolder *p,int pos,int rc)$/;"	f	file:
FindSEntry	HLM.c	/^static SEntry *FindSEntry (SEntry *se, lmId pronId, int l, int h)$/;"	f	file:
FindSpans	HParm.c	/^static void FindSpans(short span[12], ParmKind k, int size)$/;"	f	file:
FindStateOrder	HFB.c	/^void FindStateOrder(HLink hmm,IntVec so,int s,int *d)$/;"	f
FindVQNode	HVQ.c	/^static VQNode FindVQNode(VQNode *list, short nid)$/;"	f	file:
FindVQTable	HVQ.c	/^static VQTable FindVQTable(char * tabFN, short magic)$/;"	f	file:
FindWordNode	HNet.c	/^static NetNode *FindWordNode(MemHeap *heap,Pron pron,$/;"	f	file:
FirstComponent	esignal.c	/^FirstComponent(char *name)$/;"	f	file:
FixAllGConsts	HModel.c	/^void FixAllGConsts(HMMSet *hset)$/;"	f
FixBadLat	HLat.c	/^void FixBadLat (Lattice *lat)$/;"	f
FixDet	HAdapt.c	/^static void FixDet(LinXForm *xf)$/;"	f	file:
FixDiagGConst	HModel.c	/^void FixDiagGConst(MixPDF *mp)$/;"	f
FixFullGConst	HModel.c	/^void FixFullGConst(MixPDF *mp, LogFloat ldet)$/;"	f
FixGConsts	HModel.c	/^void FixGConsts(HLink hmm)$/;"	f
FixInvDiagGConst	HModel.c	/^void FixInvDiagGConst(MixPDF *mp)$/;"	f
FixLLTGConst	HModel.c	/^void FixLLTGConst(MixPDF *mp)$/;"	f
FixLatTimes	HArc.c	/^void FixLatTimes(Lattice *lat){ \/*Makes it so that the sum of phone lengths equals the length of each word.*\/$/;"	f
FixOrphanMacros	HModel.c	/^void FixOrphanMacros(HMMSet *hset)$/;"	f
FixPronProbs	HLat.c	/^void FixPronProbs (Lattice *lat, Vocab *voc)$/;"	f
FixSVD	HMath.c	/^static void FixSVD(DVector d, DMatrix U, DMatrix V)$/;"	f	file:
FixSemiTiedStats	HAdapt.c	/^static void FixSemiTiedStats(HMMSet *hset)$/;"	f	file:
FixTiedGConsts	HModel.c	/^void FixTiedGConsts(HMMSet *hset)$/;"	f
FlatCluster	HTrain.c	/^ClusterSet *FlatCluster(MemHeap *x, Sequence vpool, int nc, $/;"	f
FloatComplex	esignal.h	/^typedef struct {float	real, imag;}	FloatComplex;$/;"	t	typeref:struct:__anon2
FloorDProbs	HMap.c	/^static void FloorDProbs(ShortVec mixes, int M, float floor)$/;"	f	file:
FloorMixes	HMap.c	/^static void FloorMixes(MixtureElem *mixes, int M, float floor)$/;"	f	file:
FloorMixtures	HMap.c	/^static void FloorMixtures(HSetKind hskind, StreamElem *ste, int M, float floor)$/;"	f	file:
FloorTMMixes	HMap.c	/^static void FloorTMMixes(Vector mixes, int M, float floor)$/;"	f	file:
FltCKind	HShell.h	/^   FltCKind,            \/* float value *\/$/;"	e	enum:__anon76
FontInfo	HGraf.c	/^static XFontStruct  *DefaultFont, *CurrentFont, *FontInfo[NO_OF_FONTS];$/;"	v	file:
FontNm	HGraf.c	/^static char *FontNm[NO_OF_FONTS] = {$/;"	v	file:
FontSize	HGraf.c	/^static int FontSize[NO_OF_FONTS] = {8, 9, 10, 12, 14, 15, 16, 19, 20, 24};$/;"	v	file:
ForceDiagC	HUtil.c	/^void ForceDiagC(HMMSet *hset)$/;"	f
ForcePKind	HParm.c	/^static ParmKind ForcePKind = ANON; \/* force to output a customized parm kind to make older versions$/;"	v	file:
FormChunk	HWave.c	/^} FormChunk;$/;"	t	typeref:struct:__anon98	file:
Format2Str	HWave.c	/^char *Format2Str(FileFormat format)$/;"	f
FormatTranscription	HRec.c	/^void FormatTranscription(Transcription *trans,HTime frameDur,$/;"	f
FramesInAudio	HAudio.c	/^int FramesInAudio(AudioIn a)$/;"	f
FramesInChannel	HParm.c	/^static int FramesInChannel(ParmBuf pbuf,int chType)$/;"	f	file:
FramesInParm	HParm.c	/^static int FramesInParm(ParmBuf pbuf)$/;"	f	file:
FramesInWave	HWave.c	/^int FramesInWave(Wave w)$/;"	f
FreeAxisNames	esignal.c	/^FreeAxisNames(char  **axis_names,$/;"	f
FreeClusterSet	HTrain.c	/^void FreeClusterSet(ClusterSet *cs)$/;"	f
FreeDMatrix	HMem.c	/^void FreeDMatrix(MemHeap *x, DMatrix m)$/;"	f
FreeDVector	HMem.c	/^void FreeDVector(MemHeap *x, DVector v)$/;"	f
FreeFieldList	esignal.c	/^FreeFieldList(FieldList list)$/;"	f
FreeFieldSpec	esignal.c	/^FreeFieldSpec(FieldSpec *spec)$/;"	f
FreeIntVec	HMem.c	/^void FreeIntVec(MemHeap *x,IntVec v)$/;"	f
FreeItems	HUtil.c	/^void FreeItems(ILink *list)$/;"	f
FreeLattice	HNet.c	/^void FreeLattice(Lattice *lat)$/;"	f
FreeMatrix	HMem.c	/^void FreeMatrix(MemHeap *x, Matrix m)$/;"	f
FreePSetInfo	HRec.c	/^void FreePSetInfo(PSetInfo *psi)$/;"	f
FreeSMatrix	HMem.c	/^void FreeSMatrix(MemHeap *x, Matrix m)$/;"	f
FreeSTriMat	HMem.c	/^void FreeSTriMat(MemHeap *x,STriMat m)$/;"	f
FreeSVector	HMem.c	/^void FreeSVector(MemHeap *x, Vector v)$/;"	f
FreeSet	HUtil.c	/^void FreeSet(IntSet s)$/;"	f
FreeShortVec	HMem.c	/^void FreeShortVec(MemHeap *x,ShortVec v)$/;"	f
FreeTriMat	HMem.c	/^void FreeTriMat(MemHeap *x,TriMat m)$/;"	f
FreeVector	HMem.c	/^void FreeVector(MemHeap *x, Vector v)$/;"	f
FreezeOptions	HModel.c	/^static ReturnStatus FreezeOptions(HMMSet *hset)$/;"	f	file:
FullInvGConst	HVQ.c	/^static float FullInvGConst(TriMat ic)$/;"	f	file:
FullestCluster	HTrain.c	/^static int FullestCluster(void)$/;"	f	file:
G	HAdapt.c	/^   DMatrix *G;$/;"	m	struct:__anon6	file:
GAMMAD	HModel.h	/^enum _DurKind {NULLD, POISSOND, GAMMAD, RELD, GEND};$/;"	e	enum:_DurKind
GB	HParm.c	/^Boolean GB(char *s){Boolean b; GetConfBool(cParm,nParm,s,&b); return b;}$/;"	f
GCONST	HModel.c	/^   MEAN, VARIANCE, INVCOVAR, XFORM, GCONST,$/;"	e	enum:__anon38	file:
GCOPY	HGraf.h	/^enum _XferMode {GCOPY, GOR, GXOR, GINVERT};$/;"	e	enum:_XferMode
GDUR	HModel.c	/^   NDUR, PDUR, GDUR, RELDUR, GENDUR,$/;"	e	enum:__anon38	file:
GEND	HModel.h	/^enum _DurKind {NULLD, POISSOND, GAMMAD, RELD, GEND};$/;"	e	enum:_DurKind
GENDUR	HModel.c	/^   NDUR, PDUR, GDUR, RELDUR, GENDUR,$/;"	e	enum:__anon38	file:
GF	HParm.c	/^double  GF(char *s){double d;  GetConfFlt(cParm,nParm,s,&d); return d;}$/;"	f
GHOST_ARC	HArc.h	126;"	d
GI	HParm.c	/^int     GI(char *s){int i;     GetConfInt(cParm,nParm,s,&i); return i;}$/;"	f
GINVERT	HGraf.h	/^enum _XferMode {GCOPY, GOR, GXOR, GINVERT};$/;"	e	enum:_XferMode
GLOBAL	esignal.h	89;"	d
GOR	HGraf.h	/^enum _XferMode {GCOPY, GOR, GXOR, GINVERT};$/;"	e	enum:_XferMode
GREY	HGraf.h	/^                LIGHT_GREY, GREY, DARK_GREY, BLACK};$/;"	e	enum:_HColour
GS	HParm.c	/^char *GS(char *s){static char b[MAXFNAMELEN]; GetConfStr(cParm,nParm,s,b); return b;}$/;"	f
GSTP	HGraf.c	305;"	d	file:
GSTP	HGraf_WIN32.c	264;"	d	file:
GXOR	HGraf.h	/^enum _XferMode {GCOPY, GOR, GXOR, GINVERT};$/;"	e	enum:_XferMode
GaussDeviate	HMath.c	/^float GaussDeviate(float mu, float sigma)$/;"	f
GenAdaptXForm	HAdapt.c	/^Boolean GenAdaptXForm(HMMSet *hset, AdaptXForm* xform)$/;"	f
GenCepWin	HSigP.c	/^static void GenCepWin (int cepLiftering, int count)$/;"	f	file:
GenClassXForm	HAdapt.c	/^static Boolean GenClassXForm(BaseClass *bclass, AdaptXForm *xform)$/;"	f	file:
GenHamWindow	HSigP.c	/^static void GenHamWindow (int frameSize)$/;"	f	file:
GenXForm	HAdapt.c	/^void GenXForm(RegNode *node, AdaptXForm *xform, IntVec classes)$/;"	f
GetAIFFHeaderInfo	HWave.c	/^static long GetAIFFHeaderInfo(FILE *f, Wave w, InputAction *ia)$/;"	f	file:
GetAIStatus	HAudio.c	/^AudioInStatus GetAIStatus(AudioIn a)$/;"	f
GetAInfo	HAdapt.c	/^static AInfo *GetAInfo(MixPDF *mp)$/;"	f	file:
GetALIENHeaderInfo	HWave.c	/^static long GetALIENHeaderInfo(FILE *f, Wave w, InputAction *ia)$/;"	f	file:
GetAdaptKind	HAdapt.c	/^static AdaptKind GetAdaptKind(AdaptXForm *xform)$/;"	f	file:
GetAdaptXForm	HModel.c	/^static AdaptXForm* GetAdaptXForm(HMMSet *hset, Source *src, Token *tok)$/;"	f	file:
GetAlpha	HAdapt.c	/^static double GetAlpha(DMatrix invgmat,DVector kmat,double occ, DVector cofact)$/;"	f	file:
GetAlpha	HUtil.c	/^static char *GetAlpha(char *s)$/;"	f	file:
GetAlphaLike	HAdapt.c	/^static double GetAlphaLike(double a, double b, double c, double alpha)$/;"	f	file:
GetAudio	HAudio.c	/^void GetAudio(AudioIn a, int nFrames, float *buf)$/;"	f
GetAuxCase	HLabel.c	/^LLink GetAuxCase(LabList *ll, LabId id, int n, int i)$/;"	f
GetAuxLabN	HLabel.c	/^LLink GetAuxLabN(LabList *ll, int n, int i)$/;"	f
GetBaseClass	HAdapt.c	/^static BaseClass* GetBaseClass(HMMSet *hset,AdaptXForm *xform)$/;"	f	file:
GetBaseClass	HModel.c	/^static BaseClass* GetBaseClass(HMMSet *hset,Source *src, Token *tok)$/;"	f	file:
GetBestCorrectness	HExactMPE.c	/^Boolean GetBestCorrectness \/*step correctness by 1 phone.*\/$/;"	f
GetBias	HModel.c	/^static SVector GetBias(HMMSet *hset, Source *src, Token *tok)$/;"	f	file:
GetBlockSize	HAdapt.c	/^static IntVec GetBlockSize(AdaptXForm *xform, int class)$/;"	f	file:
GetBufferInfo	HParm.c	/^void GetBufferInfo(ParmBuf pbuf, BufferInfo *info)$/;"	f
GetCRCCFrame	HParm.c	/^static Boolean GetCRCCFrame(ParmBuf pbuf,void *data,int n,int s,Boolean bSwap)$/;"	f	file:
GetCase	HLabel.c	/^LLink GetCase(LabList *ll, LabId id, int n)$/;"	f
GetCh	HShell.c	/^int GetCh(Source *src)$/;"	f
GetChkedFlt	HShell.c	/^float GetChkedFlt(float min, float max, char * swtname)$/;"	f
GetChkedInt	HShell.c	/^int GetChkedInt(int min, int max, char * swtname)$/;"	f
GetChkedLong	HShell.c	/^long GetChkedLong(long min, long max, char * swtname)$/;"	f
GetConfBool	HShell.c	/^Boolean GetConfBool(ConfParam **list,int size,char *name, Boolean *b)$/;"	f
GetConfFlt	HShell.c	/^Boolean GetConfFlt(ConfParam **list,int size,char *name, double *fval)$/;"	f
GetConfInt	HShell.c	/^Boolean GetConfInt(ConfParam **list,int size,char *name, int *ival)$/;"	f
GetConfStr	HShell.c	/^Boolean GetConfStr(ConfParam **list,int size,char *name,char *str)$/;"	f
GetConfig	HShell.c	/^int GetConfig(char *user, Boolean incGlob, ConfParam **list, int max)$/;"	f
GetCovar	HModel.c	/^static STriMat GetCovar(HMMSet *hset, Source *src, Token *tok)$/;"	f	file:
GetCurrentVol	HAudio.c	/^float GetCurrentVol(AudioIn a)$/;"	f
GetDiscreteWeights	HModel.c	/^ReturnStatus GetDiscreteWeights(Source *src, Token *tok, int M, ShortVec dpdf)$/;"	f
GetDumpFile	HTrain.c	/^static FILE * GetDumpFile(char *name, int n)$/;"	f	file:
GetDuration	HModel.c	/^static SVector GetDuration(HMMSet *hset, Source *src, Token *tok)$/;"	f	file:
GetESIGHeaderInfo	HWave.c	/^static long GetESIGHeaderInfo(FILE *f, Wave w, InputAction *ia)$/;"	f	file:
GetElem	HMem.c	/^static void *GetElem(BlockP p, size_t elemSize, HeapType type)$/;"	f	file:
GetField	esignal.c	/^GetField(FieldList  list,       \/* field list *\/$/;"	f	file:
GetFieldOrdering	esignal.c	/^GetFieldOrdering(FieldList  list,$/;"	f
GetFieldValue	HNet.c	/^static LatFieldType GetFieldValue(char *buf, Source *src, int buflen)$/;"	f	file:
GetFileNameExt	HShell.c	/^Boolean GetFileNameExt(char *logfn, char *actfn, long *st, long *en)$/;"	f
GetFinalError	HFBLat.c	/^float GetFinalError(float curr_total, float curr_corr, Boolean hyp_is_sil){  \/* re the "CALCASERROR" option, other version of approx MPE. *\/$/;"	f
GetFloat	HLM.c	/^static float GetFloat(Boolean bin)$/;"	f	file:
GetFltArg	HShell.c	/^float GetFltArg(void)$/;"	f
GetFltField	HNet.c	/^static double GetFltField(char ntype,char del,char *vbuf,Source *src)$/;"	f	file:
GetFrameFromChannel	HParm.c	/^static int GetFrameFromChannel(ParmBuf pbuf,int chType,void *vp)$/;"	f	file:
GetHCIContext	HNet.c	/^int GetHCIContext(HMMSetCxtInfo *hci,LabId labid)$/;"	f
GetHCIModel	HNet.c	/^HLink GetHCIModel(HMMSetCxtInfo *hci,int lc,LabId name,int rc)$/;"	f
GetHMMDef	HModel.c	/^static ReturnStatus GetHMMDef(HMMSet *hset, Source *src, Token *tok,$/;"	f	file:
GetHMMSetCxtInfo	HNet.c	/^HMMSetCxtInfo *GetHMMSetCxtInfo(HMMSet *hset, Boolean frcCxtInd)$/;"	f
GetHTKHeaderInfo	HWave.c	/^static long GetHTKHeaderInfo(FILE *f, Wave w, InputAction *ia)$/;"	f	file:
GetHashCounts	HModel.c	/^static void GetHashCounts(MLink * mtab,int size, int *min, int *max,$/;"	f	file:
GetHook	HMem.c	/^Ptr GetHook(Ptr m)$/;"	f
GetInLine	HLM.c	/^static char *GetInLine(char *buf)$/;"	f	file:
GetInputObs	HFB.c	/^void GetInputObs( UttInfo *utt, int t, HSetKind hsKind )$/;"	f
GetInputXForm	HModel.c	/^InputXForm* GetInputXForm(HMMSet *hset, Source *src, Token *tok)$/;"	f
GetInt	HLM.c	/^static int GetInt(void)$/;"	f	file:
GetInt	HUtil.c	/^static int GetInt(int lo, int hi)$/;"	f	file:
GetIntArg	HShell.c	/^int GetIntArg(void)$/;"	f
GetIntEnvVar	HShell.c	/^Boolean GetIntEnvVar(char *envVar, int *value)$/;"	f
GetIntField	HNet.c	/^static int GetIntField(char ntype,char del,char *vbuf,Source *src)$/;"	f	file:
GetItem	HTrain.c	/^Ptr GetItem(Sequence seq, int i)$/;"	f
GetKey	HUtil.c	/^static Keyword GetKey(void)$/;"	f	file:
GetLMProb	HLM.c	/^float GetLMProb(LModel *lm, LabId prid[NSIZE], LabId wdid)$/;"	f
GetLabId	HLabel.c	/^LabId GetLabId(char *name, Boolean insert)$/;"	f
GetLabN	HLabel.c	/^LLink GetLabN(LabList *ll, int n)$/;"	f
GetLabelList	HLabel.c	/^LabList* GetLabelList(Transcription *t, int n)$/;"	f
GetLattice	HLat.c	/^Lattice *GetLattice (char *fn, char *path, char *ext,$/;"	f
GetLinXForm	HModel.c	/^static LinXForm* GetLinXForm(HMMSet *hset, Source *src, Token *tok)$/;"	f	file:
GetLine	esignal.c	/^GetLine(char    *buf,$/;"	f	file:
GetLong	esignal.c	/^GetLong(long    *val,$/;"	f	file:
GetLongArg	HShell.c	/^long GetLongArg(void)$/;"	f
GetLowestNegError	HFBLat.c	/^float GetLowestNegError(int tStart, int tEnd, int tCurr, float curr_corr, float curr_total,  CorrectArcList **correctArc, int iphone, int *compute_count, Boolean hyp_is_sil){$/;"	f
GetMInfo	HAdapt.c	/^static MInfo *GetMInfo(MixPDF *mp)$/;"	f	file:
GetMLFFile	HLabel.c	/^FILE *GetMLFFile(int fidx)$/;"	f
GetMLFTable	HLabel.c	/^MLFEntry *GetMLFTable(void)$/;"	f
GetMLLRDiagCov	HAdapt.c	/^AdaptXForm *GetMLLRDiagCov(AdaptXForm *xform)$/;"	f
GetMacroHook	HUtil.c	/^Ptr GetMacroHook(MLink ml)$/;"	f
GetMacroUse	HUtil.c	/^int GetMacroUse(MLink ml)$/;"	f
GetMean	HModel.c	/^static SVector GetMean(HMMSet *hset, Source *src, Token *tok)$/;"	f	file:
GetMixPDF	HModel.c	/^static MixPDF *GetMixPDF(HMMSet *hset, Source *src, Token *tok)$/;"	f	file:
GetMixPDFInfo	HModel.c	/^static void GetMixPDFInfo(HMMSet *hset, HMMDef *hmm, MixtureElem *tme, int *state, int *stream, int *comp)$/;"	f	file:
GetMixture	HModel.c	/^static ReturnStatus GetMixture(HMMSet *hset,Source *src,Token *tok,int M,MixtureElem *spdf)$/;"	f	file:
GetNEntry	HLM.c	/^NEntry *GetNEntry(NGramLM *nglm,lmId ndx[NSIZE],Boolean create)$/;"	f
GetNISTHeaderInfo	HWave.c	/^static long GetNISTHeaderInfo(FILE *f, Wave w, InputAction *ia)$/;"	f	file:
GetNISTIVal	HWave.c	/^static int GetNISTIVal(FILE *f)$/;"	f	file:
GetNISTSVal	HWave.c	/^static void GetNISTSVal(FILE *f, char *s)$/;"	f	file:
GetNISTToken	HWave.c	/^static char * GetNISTToken(FILE *f,char *buf)$/;"	f	file:
GetNOHEADHeaderInfo	HWave.c	/^static long GetNOHEADHeaderInfo(FILE *f, Wave w, InputAction *ia)$/;"	f	file:
GetNextArg	HShell.c	/^static char * GetNextArg(Boolean step)$/;"	f	file:
GetNextFieldName	HNet.c	/^static char *GetNextFieldName(char *buf, char *del, Source *src)$/;"	f	file:
GetNoContextPhone	HFBLat.c	/^int GetNoContextPhone(LabId phone, int *nStates_quinphone\/*actually,number of HMMs per phone*\/, int *state_quinphone, HArc *a, int *frame_end){ $/;"	f
GetNode	HVQ.c	/^static VQNode GetNode(Source *src, CovKind ck, short width)$/;"	f	file:
GetNonSpace	esig_asc.c	/^GetNonSpace(FILE *file)$/;"	f	file:
GetNumPhones	HExactMPE.c	/^int GetNumPhones(LArc *larc){ \/*returns num phones in a word...*\/$/;"	f
GetOGIHeaderInfo	HWave.c	/^static long GetOGIHeaderInfo(FILE *f, Wave w, InputAction *ia)$/;"	f	file:
GetObsCache	HAdapt.c	/^static ObsCache *GetObsCache(MixPDF *mp)$/;"	f	file:
GetOption	HModel.c	/^static ReturnStatus GetOption(HMMSet *hset, Source *src, Token *tok, int *nState)$/;"	f	file:
GetOptions	HModel.c	/^static ReturnStatus GetOptions(HMMSet *hset, Source *src, Token *tok, int *nState)$/;"	f	file:
GetPAAccCache	HAdapt.c	/^static AccCache *GetPAAccCache(MixPDF *mp)$/;"	f	file:
GetPAInfo	HAdapt.c	/^static AInfo *GetPAInfo(MixPDF *mp)$/;"	f	file:
GetPAObsCache	HAdapt.c	/^static ObsCache *GetPAObsCache(MixPDF *mp)$/;"	f	file:
GetParm	HParm.c	/^static int GetParm(ParmBuf pbuf,int nFrame,void *data)$/;"	f	file:
GetRawAudio	HAudio.c	/^void GetRawAudio(AudioIn a, int nSamples, short *buf)$/;"	f
GetRegAcc	HAdapt.c	/^static RegAcc *GetRegAcc(MixPDF *mp)$/;"	f	file:
GetRegTree	HAdapt.c	/^static RegTree* GetRegTree(HMMSet *hset, AdaptXForm *xform)$/;"	f	file:
GetRegTree	HModel.c	/^static RegTree *GetRegTree(HMMSet *hset, Source *src, Token *tok)$/;"	f	file:
GetReplayBuf	HAudio.c	/^int GetReplayBuf(AudioIn a, int nSamples, short *buf)$/;"	f
GetRowLike	HAdapt.c	/^static double GetRowLike(DMatrix gmat,DVector kmat, DVector cofact, double occ, DVector w)$/;"	f	file:
GetSCRIBEHeaderInfo	HWave.c	/^static long GetSCRIBEHeaderInfo(FILE *f, Wave w, InputAction *ia)$/;"	f	file:
GetSDES1HeaderInfo	HWave.c	/^static long GetSDES1HeaderInfo(FILE *f, Wave w, InputAction *ia)$/;"	f	file:
GetSUNAU8HeaderInfo	HWave.c	/^static long GetSUNAU8HeaderInfo(FILE *f, Wave w, InputAction *ia)$/;"	f	file:
GetSWeights	HModel.c	/^static SVector GetSWeights(HMMSet *hset, Source *src, Token *tok)$/;"	f	file:
GetSampleFromBuffer	HAudio.c	/^static short GetSampleFromBuffer(AudioIn a)$/;"	f	file:
GetScribeLab	HLabel.c	/^static ScribeLab GetScribeLab(Source *src)$/;"	f	file:
GetSegObs	HTrain.c	/^Observation GetSegObs(SegStore ss, int i, int j)$/;"	f
GetSemiTiedLike	HAdapt.c	/^static double GetSemiTiedLike(AccStruct *accs, LinXForm *xf)$/;"	f	file:
GetSemiTiedTotCov	HAdapt.c	/^static void GetSemiTiedTotCov(AdaptXForm *xform, IntVec classes, TriMat totCov, Vector totMean)$/;"	f	file:
GetShortPackBlock	HWave.c	/^static int GetShortPackBlock(char **inData, short **outData)$/;"	f	file:
GetSplitThresh	HAdapt.c	/^static float GetSplitThresh(AdaptXForm *xform)$/;"	f	file:
GetStateInfo	HModel.c	/^static StateInfo *GetStateInfo(HMMSet *hset, Source *src, Token *tok)$/;"	f	file:
GetStrArg	HShell.c	/^char * GetStrArg(void)$/;"	f
GetStream	HModel.c	/^static ReturnStatus GetStream(HMMSet *hset, Source *src, Token *tok,$/;"	f	file:
GetStructure	HModel.c	/^static Ptr GetStructure(HMMSet *hset, Source *src, char type)$/;"	f	file:
GetSubLat	HNet.c	/^static Lattice *GetSubLat(LabId subLatId,Lattice *subLat)$/;"	f	file:
GetSwtArg	HShell.c	/^char * GetSwtArg(void)$/;"	f
GetTIMITHeaderInfo	HWave.c	/^static long GetTIMITHeaderInfo(FILE *f, Wave w, InputAction *ia)$/;"	f	file:
GetTiedMixtures	HModel.c	/^ReturnStatus GetTiedMixtures(HMMSet *hset, Source *src, Token *tok, $/;"	f
GetTiedWeights	HModel.c	/^ReturnStatus GetTiedWeights(Source *src, Token *tok, int M, Vector tpdf)$/;"	f
GetTimes	HFBLat.c	/^void GetTimes(LArc *larc, int i, int *start, int *end){ \/* get start & end times for a lattice arc.  Frame$/;"	f
GetToken	HModel.c	/^static ReturnStatus GetToken(Source *src, Token *tok)$/;"	f	file:
GetTrSym	HLabel.c	/^static void GetTrSym(Source *src, Boolean htk)$/;"	f	file:
GetTransMat	HModel.c	/^static SMatrix GetTransMat(HMMSet *hset, Source *src, Token *tok)$/;"	f	file:
GetTransform	HModel.c	/^static SMatrix GetTransform(HMMSet *hset, Source *src, Token *tok)$/;"	f	file:
GetUse	HMem.c	/^int  GetUse(Ptr m)$/;"	f
GetVQ	HVQ.c	/^void GetVQ(VQTable vqTab, int numS, Vector *fv, short *vq)$/;"	f
GetVal	HVQ.c	/^static short GetVal(Source *src, short lo, short hi, char *item)$/;"	f	file:
GetVariance	HModel.c	/^static SVector GetVariance(HMMSet *hset, Source *src, Token *tok)$/;"	f	file:
GetVecSizeClass	HAdapt.c	/^static int GetVecSizeClass(BaseClass *bclass, int class)$/;"	f	file:
GetWAVHeaderInfo	HWave.c	/^static long GetWAVHeaderInfo(FILE *f, Wave w, InputAction *ia)$/;"	f	file:
GetWave	HWave.c	/^void GetWave(Wave w, int nFrames, float *buf)$/;"	f
GetWaveDirect	HWave.c	/^short *GetWaveDirect(Wave w, long *nSamples)$/;"	f
GetWord	HDict.c	/^Word GetWord(Vocab *voc, LabId wordName, Boolean insert)$/;"	f
GetXFormMacros	HModel.c	/^static ReturnStatus GetXFormMacros(HMMSet *hset, Source *src, Token *tok, int fidx)$/;"	f	file:
GetXFormSet	HModel.c	/^static XFormSet* GetXFormSet(HMMSet *hset, Source *src, Token *tok)$/;"	f	file:
GetXFormStream	HAdapt.c	/^static int GetXFormStream(AdaptXForm *xform, IntVec classes, IntVec streams)$/;"	f	file:
Givens	HMath.c	/^static void Givens(double x, double y, double *c, double *s)$/;"	f	file:
GoNextHMM	HUtil.c	/^Boolean GoNextHMM(HMMScanState *hss)$/;"	f
GoNextMix	HUtil.c	/^Boolean GoNextMix(HMMScanState *hss, Boolean noSkip)$/;"	f
GoNextState	HUtil.c	/^Boolean GoNextState(HMMScanState *hss, Boolean noSkip)$/;"	f
GoNextStream	HUtil.c	/^Boolean GoNextStream(HMMScanState *hss, Boolean noSkip)$/;"	f
HASACCS	HParm.h	61;"	d
HASCOMPX	HParm.h	62;"	d
HASCRCC	HParm.h	64;"	d
HASDELTA	HParm.h	60;"	d
HASENERGY	HParm.h	58;"	d
HASHSIZE	HLabel.c	135;"	d	file:
HASNULLE	HParm.h	59;"	d
HASTHIRD	HParm.h	67;"	d
HASVQ	HParm.h	66;"	d
HASZEROC	HParm.h	65;"	d
HASZEROM	HParm.h	63;"	d
HAUDIO	HWave.h	/^        HAUDIO,            \/* Direct Audio Input *\/$/;"	e	enum:__anon102
HA_IN_LINE	HAudio.h	42;"	d
HA_IN_MIC	HAudio.h	41;"	d
HA_IN_NONE	HAudio.h	40;"	d
HA_OUT_LINE	HAudio.h	37;"	d
HA_OUT_NONE	HAudio.h	34;"	d
HA_OUT_PHONES	HAudio.h	36;"	d
HA_OUT_SPEAKER	HAudio.h	35;"	d
HArc	HArc.h	/^typedef struct _Arc HArc;$/;"	t	typeref:struct:_Arc
HButton	HGraf.h	/^} HButton;$/;"	t	typeref:struct:_HButton
HCI_CXT_BLOCKSIZE	HNet.c	1736;"	d	file:
HColour	HGraf.h	/^typedef enum _HColour HColour;  \/* implementations may map these onto grey *\/$/;"	t	typeref:enum:_HColour
HCopyArea	HGraf.c	/^void HCopyArea(int srcx, int srcy, int width, int height, int destx, int desty)$/;"	f
HCopyArea	HGraf.null.c	/^void HCopyArea(int srcx, int srcy, int width, int height, int destx, int desty)$/;"	f
HCopyArea	HGraf_WIN32.c	/^void HCopyArea(int srcx, int srcy, int width, int height, int destx, int desty)$/;"	f
HDrawArc	HGraf.c	/^void HDrawArc(int x0, int y0, int x1, int y1, int stAngle, int arcAngle)$/;"	f
HDrawArc	HGraf.null.c	/^void HDrawArc(int x0, int y0, int x1, int y1, int stAngle, int arcAngle)$/;"	f
HDrawArc	HGraf_WIN32.c	/^void HDrawArc(int x0, int y0, int x1, int y1, int stAngle, int arcAngle)$/;"	f
HDrawImage	HGraf.c	/^void HDrawImage(unsigned char *p, int x, int y, int width, int height)$/;"	f
HDrawImage	HGraf.null.c	/^void HDrawImage(unsigned char *p, int x, int y, int width, int height)$/;"	f
HDrawImage	HGraf_WIN32.c	/^void HDrawImage(unsigned char *p, int x, int y, int width, int height)$/;"	f
HDrawLine	HGraf.c	/^void HDrawLine(int x0, int y0, int x1, int y1)$/;"	f
HDrawLine	HGraf.null.c	/^void HDrawLine(int x0, int y0, int x1, int y1)$/;"	f
HDrawLine	HGraf_WIN32.c	/^void HDrawLine(int x0, int y0, int x1, int y1)$/;"	f
HDrawLines	HGraf.c	/^void HDrawLines(HPoint *points, int n)$/;"	f
HDrawLines	HGraf.null.c	/^void HDrawLines(HPoint *points, int n)$/;"	f
HDrawLines	HGraf_WIN32.c	/^void HDrawLines(HPoint *points, int n)$/;"	f
HDrawRectangle	HGraf.c	/^void HDrawRectangle(int x0, int y0, int x1, int y1)$/;"	f
HDrawRectangle	HGraf.null.c	/^void HDrawRectangle(int x0, int y0, int x1, int y1)$/;"	f
HDrawRectangle	HGraf_WIN32.c	/^void HDrawRectangle(int x0, int y0, int x1, int y1)$/;"	f
HDumpGraf	HGraf.c	/^void HDumpGraf(char *fname)$/;"	f
HDumpGraf	HGraf.null.c	/^void HDumpGraf(char *fname)$/;"	f
HDumpGraf	HGraf_WIN32.c	/^void HDumpGraf(char *fname)$/;"	f
HEndSpoolGraf	HGraf_WIN32.c	/^void HEndSpoolGraf()$/;"	f
HError	HShell.c	/^void HError(int errcode, char *message, ...)$/;"	f
HEvent	HGraf.h	/^typedef enum _HEvent HEvent;$/;"	t	typeref:enum:_HEvent
HEventRec	HGraf.h	/^} HEventRec;$/;"	t	typeref:struct:__anon24
HEventsPending	HGraf.c	/^int HEventsPending(void)$/;"	f
HEventsPending	HGraf.null.c	/^int HEventsPending(void)$/;"	f
HEventsPending	HGraf_WIN32.c	/^int HEventsPending(void)$/;"	f
HFieldList	HWave.h	/^typedef struct FieldSpec **HFieldList;$/;"	t	typeref:struct:FieldSpec
HFillArc	HGraf.c	/^void HFillArc(int x0,int y0,int x1,int y1,int stAngle,int arcAngle)$/;"	f
HFillArc	HGraf.null.c	/^void HFillArc(int x0,int y0,int x1,int y1,int stAngle,int arcAngle)$/;"	f
HFillArc	HGraf_WIN32.c	/^void HFillArc(int x0,int y0,int x1,int y1,int stAngle,int arcAngle)$/;"	f
HFillPolygon	HGraf.c	/^void HFillPolygon(HPoint *points, int n)$/;"	f
HFillPolygon	HGraf.null.c	/^void HFillPolygon(HPoint *points, int n)$/;"	f
HFillPolygon	HGraf_WIN32.c	/^void HFillPolygon(HPoint *points, int n)$/;"	f
HFillRectangle	HGraf.c	/^void HFillRectangle(int x0, int y0, int x1, int y1)$/;"	f
HFillRectangle	HGraf.null.c	/^void HFillRectangle(int x0, int y0, int x1, int y1)$/;"	f
HFillRectangle	HGraf_WIN32.c	/^void HFillRectangle(int x0, int y0, int x1, int y1)$/;"	f
HFlush	HGraf.c	/^void HFlush(void)$/;"	f
HFlush	HGraf.null.c	/^void HFlush(void)$/;"	f
HFlush	HGraf_WIN32.c	/^void HFlush(void)$/;"	f
HGWinFunc	HGraf_WIN32.c	/^LRESULT CALLBACK HGWinFunc(HWND WindowHandle, unsigned int msg, WPARAM wParam, LPARAM lParam)$/;"	f
HGetEvent	HGraf.c	/^HEventRec HGetEvent(Boolean anyEvent, void (*action)(void))$/;"	f
HGetEvent	HGraf.null.c	/^HEventRec HGetEvent(Boolean anyEvent, void (*action)(void))$/;"	f
HGetEvent	HGraf_WIN32.c	/^HEventRec HGetEvent(Boolean anyEvent, void (*action)(void))$/;"	f
HGetKeyType	HGraf_WIN32.c	/^KeyType HGetKeyType(char c)$/;"	f
HIFREQ	HParm.c	/^   HIFREQ,        \/* Hi Fbank frequency *\/$/;"	e	enum:__anon63	file:
HKEYPRESS	HGraf.h	/^              HKEYPRESS,   \/* key pressed *\/$/;"	e	enum:_HEvent
HKEYRELEASE	HGraf.h	/^              HKEYRELEASE, \/* key released *\/$/;"	e	enum:_HEvent
HLAT_ACLIKE	HNet.h	81;"	d
HLAT_ALABS	HNet.h	77;"	d
HLAT_ALDUR	HNet.h	84;"	d
HLAT_ALIGN	HNet.h	83;"	d
HLAT_ALLIKE	HNet.h	85;"	d
HLAT_DEFAULT	HNet.h	94;"	d
HLAT_LBIN	HNet.h	78;"	d
HLAT_LMLIKE	HNet.h	82;"	d
HLAT_NOSORT	HNet.h	89;"	d
HLAT_NOSUBS	HNet.h	90;"	d
HLAT_PRLIKE	HNet.h	86;"	d
HLAT_PRON	HNet.h	80;"	d
HLAT_SHARC	HNet.h	92;"	d
HLAT_TAGS	HNet.h	87;"	d
HLAT_TIMES	HNet.h	79;"	d
HLIBS	Makefile	/^HLIBS = ${exec_prefix}\/lib\/HTKLib.a$/;"	m
HLink	HModel.h	/^typedef HMMDef * HLink;$/;"	t
HMError	HModel.c	/^static void HMError(Source *src, char *message)$/;"	f	file:
HMMDef	HModel.h	/^} HMMDef;$/;"	t	typeref:struct:__anon49
HMMDefFilter	HShell.h	/^   HMMDefFilter,    \/* HMM definition files input via HModel *\/$/;"	e	enum:__anon74
HMMDefOFilter	HShell.h	/^   HMMDefOFilter,   \/* HMM definition files output via HModel *\/$/;"	e	enum:__anon74
HMMListFilter	HShell.h	/^   HMMListFilter,   \/* HMM lists input via HModel *\/$/;"	e	enum:__anon74
HMMListOFilter	HShell.h	/^   HMMListOFilter,  \/* HMM lists output via HModel *\/$/;"	e	enum:__anon74
HMMPhysName	HUtil.c	/^char *HMMPhysName(HMMSet *hset,HLink hmm)$/;"	f
HMMSETID	HModel.c	/^   HMMSETID=119,$/;"	e	enum:__anon38	file:
HMMScanState	HUtil.h	/^}HMMScanState;$/;"	t	typeref:struct:__anon90
HMMSet	HModel.h	/^} HMMSet;$/;"	t	typeref:struct:_HMMSet
HMMSetCxtInfo	HNet.h	/^HMMSetCxtInfo;$/;"	t	typeref:struct:hmmsetcxtinfo
HMOUSEDOWN	HGraf.h	/^enum _HEvent {HMOUSEDOWN,  \/* (left) mouse button pressed *\/$/;"	e	enum:_HEvent
HMOUSEMOVE	HGraf.h	/^              HMOUSEMOVE,  \/* mouse has moved *\/$/;"	e	enum:_HEvent
HMOUSEUP	HGraf.h	/^              HMOUSEUP,    \/* (left) mouse button released *\/$/;"	e	enum:_HEvent
HMousePos	HGraf.c	/^Boolean HMousePos(int *x, int *y)$/;"	f
HMousePos	HGraf.null.c	/^Boolean HMousePos(int *x, int *y)$/;"	f
HMousePos	HGraf_WIN32.c	/^Boolean HMousePos(int *x, int *y)$/;"	f
HParmSrcDef	HParm.h	/^typedef struct hparmsrcdef *HParmSrcDef;$/;"	t	typeref:struct:hparmsrcdef
HParmSrcDefRec	HParm.c	/^} HParmSrcDefRec;$/;"	t	typeref:struct:hparmsrcdef	file:
HPlotVector	HGraf.c	/^void HPlotVector(int x0, int y0, int x1, int y1, Vector v, int st, int en, float ymax, float ymin)$/;"	f
HPlotVector	HGraf.null.c	/^void HPlotVector(int x0, int y0, int x1, int y1, Vector v, int st, int en, float ymax, float ymin)$/;"	f
HPlotVector	HGraf_WIN32.c	/^void HPlotVector(int x0, int y0, int x1, int y1, Vector v, int st, int en, float ymax, float ymin)$/;"	f
HPoint	HGraf.h	/^} HPoint;$/;"	t	typeref:struct:__anon25
HPrintf	HGraf.c	/^void HPrintf(int x, int y, char *format, ...)$/;"	f
HPrintf	HGraf.null.c	/^void HPrintf(int x, int y, char *format, ...)$/;"	f
HPrintf	HGraf_WIN32.c	/^void HPrintf(int x, int y, char *format, ...)$/;"	f
HREDRAW	HGraf.h	/^              HREDRAW      \/* window damaged *\/$/;"	e	enum:_HEvent
HRError	HShell.c	/^void HRError(int errcode, char *message, ...)$/;"	f
HSetColour	HGraf.c	/^void HSetColour(HColour c)$/;"	f
HSetColour	HGraf.null.c	/^void HSetColour(HColour c)$/;"	f
HSetColour	HGraf_WIN32.c	/^void HSetColour(HColour c)$/;"	f
HSetFontSize	HGraf.c	/^void HSetFontSize(int size)$/;"	f
HSetFontSize	HGraf.null.c	/^void HSetFontSize(int size)$/;"	f
HSetFontSize	HGraf_WIN32.c	/^void HSetFontSize(int size)$/;"	f
HSetGrey	HGraf.c	/^void HSetGrey(int g)$/;"	f
HSetGrey	HGraf.null.c	/^void HSetGrey(int g)$/;"	f
HSetGrey	HGraf_WIN32.c	/^void HSetGrey(int g)$/;"	f
HSetKind	HModel.h	/^typedef enum _HSetKind HSetKind;$/;"	t	typeref:enum:_HSetKind
HSetLineWidth	HGraf.c	/^void HSetLineWidth(int w)$/;"	f
HSetLineWidth	HGraf.null.c	/^void HSetLineWidth(int w)$/;"	f
HSetLineWidth	HGraf_WIN32.c	/^void HSetLineWidth(int w)$/;"	f
HSetXMode	HGraf.c	/^void HSetXMode(XferMode m)$/;"	f
HSetXMode	HGraf.null.c	/^void HSetXMode(XferMode m)$/;"	f
HSetXMode	HGraf_WIN32.c	/^void HSetXMode(XferMode m)$/;"	f
HSpoolGraf	HGraf.c	/^void HSpoolGraf(char *fname)$/;"	f
HSpoolGraf	HGraf.null.c	/^void HSpoolGraf(char *fname)$/;"	f
HSpoolGraf	HGraf_WIN32.c	/^void HSpoolGraf(char *fname)$/;"	f
HTK	HWave.h	/^        HTK,               \/* used for both wave and parm files *\/$/;"	e	enum:__anon102
HTKhdr	HWave.c	/^} HTKhdr;$/;"	t	typeref:struct:__anon101	file:
HTextHeight	HGraf.c	/^int HTextHeight(char *str)$/;"	f
HTextHeight	HGraf.null.c	/^int HTextHeight(char *str)$/;"	f
HTextHeight	HGraf_WIN32.c	/^int HTextHeight(char *str)$/;"	f
HTextWidth	HGraf.c	/^int HTextWidth(char *str)$/;"	f
HTextWidth	HGraf.null.c	/^int HTextWidth(char *str)$/;"	f
HTextWidth	HGraf_WIN32.c	/^int HTextWidth(char *str)$/;"	f
HTime	HShell.h	/^typedef double HTime;      \/* time in 100ns units *\/$/;"	t
Ham	HSigP.c	/^void Ham (Vector s)$/;"	f
HardAssign	HAdapt.c	/^Boolean HardAssign(AdaptXForm *xform)$/;"	f
HasAccs	HParm.c	/^Boolean HasAccs(ParmKind kind)  {return (kind & HASACCS) != 0;}$/;"	f
HasCompx	HParm.c	/^Boolean HasCompx(ParmKind kind) {return (kind & HASCOMPX) != 0;}$/;"	f
HasConfParm	HShell.c	/^Boolean HasConfParm(ConfParam **list, int size, char *name)$/;"	f
HasCrcc	HParm.c	/^Boolean HasCrcc(ParmKind kind)  {return (kind & HASCRCC) != 0;}$/;"	f
HasDelta	HParm.c	/^Boolean HasDelta(ParmKind kind) {return (kind & HASDELTA) != 0;}$/;"	f
HasEnergy	HParm.c	/^Boolean HasEnergy(ParmKind kind){return (kind & HASENERGY) != 0;}$/;"	f
HasMacros	HModel.c	/^Boolean HasMacros(HMMSet *hset, char * types)$/;"	f
HasNulle	HParm.c	/^Boolean HasNulle(ParmKind kind) {return (kind & HASNULLE) != 0;}$/;"	f
HasThird	HParm.c	/^Boolean HasThird(ParmKind kind) {return (kind & HASTHIRD) != 0;}$/;"	f
HasVQ	HParm.c	/^Boolean HasVQ(ParmKind kind)    {return (kind & HASVQ) != 0;}$/;"	f
HasZeroc	HParm.c	/^Boolean HasZeroc(ParmKind kind) {return (kind & HASZEROC) != 0;}$/;"	f
HasZerom	HParm.c	/^Boolean HasZerom(ParmKind kind) {return (kind & HASZEROM) != 0;}$/;"	f
Hash	HLabel.c	/^static unsigned Hash(char *name)$/;"	f	file:
Hash	HModel.c	/^static unsigned Hash(char *name)$/;"	f	file:
HeapType	HMem.h	/^typedef enum{MHEAP, MSTAK, CHEAP} HeapType;$/;"	t	typeref:enum:__anon36
HholdTrCols	HMath.c	/^static void HholdTrCols(DMatrix M, int i0, int j0, $/;"	f	file:
HholdTrRows	HMath.c	/^static void HholdTrRows(DMatrix M, int i0, int j0, DVector hh, double beta)$/;"	f	file:
HholdVec	HMath.c	/^static void HholdVec(DVector tmp, int i0, int size,$/;"	f	file:
IBLink	HTrain.h	/^typedef struct _ItemBlock *IBLink;$/;"	t	typeref:struct:_ItemBlock
IDOutP	HModel.c	/^LogFloat IDOutP(Vector x, int vecSize, MixPDF *mp)$/;"	f
ILink	HModel.h	/^typedef struct _ItemRec *ILink;$/;"	t	typeref:struct:_ItemRec
IMULAW	HWave.c	/^   IMULAW       \/* Interleaved 8 bit u-law *\/$/;"	e	enum:_CompressType	file:
INCLUDED	esignal.h	93;"	d
INPUTXFORM	HModel.c	/^   NUMCLASSES, ADAPTKIND, PREQUAL, INPUTXFORM,$/;"	e	enum:__anon38	file:
INSTALL	Makefile	/^INSTALL= \/usr\/bin\/install -c$/;"	m
INTARG	HShell.h	/^typedef enum {SWITCHARG, STRINGARG, INTARG, FLOATARG, NOARG} ArgKind;$/;"	e	enum:__anon79
INT_FIELD	HNet.c	/^typedef enum {UNK_FIELD, STR_FIELD, INT_FIELD, FLT_FIELD} LatFieldType;$/;"	e	enum:__anon57	file:
INVCOVAR	HModel.c	/^   MEAN, VARIANCE, INVCOVAR, XFORM, GCONST,$/;"	e	enum:__anon38	file:
INVDIAGC	HMath.h	/^   INVDIAGC,      \/* inverse diagonal covariance *\/$/;"	e	enum:__anon34
INVDIAGCOV	HModel.c	/^   DURATION, INVDIAGCOV, TRANSP, DPROB, LLTCOV, LLTCOVAR,$/;"	e	enum:__anon38	file:
IOConfParm	HParm.c	/^}IOConfParm;$/;"	t	typeref:enum:__anon63	file:
IOConfig	HParm.c	/^typedef IOConfigRec *IOConfig;$/;"	t	file:
IOConfigRec	HParm.c	/^}IOConfigRec;$/;"	t	typeref:struct:__anon62	file:
IOFilter	HShell.h	/^}IOFilter;$/;"	t	typeref:enum:__anon74
IREFC	HParm.h	/^      IREFC,                           \/* Ref Coef in 16 bit form *\/$/;"	e	enum:_BaseParmKind
ImmDef	HLabel.h	/^}ImmDef;$/;"	t	typeref:struct:__anon28
InSamples	HAudio.c	/^static int InSamples(AudioIn a)$/;"	f	file:
InUse	HFBLat.h	/^  Boolean InUse; \/* FALSE if stacks are cleared and lattices empty. *\/$/;"	m	struct:__anon23
IncUse	HMem.c	/^void IncUse(Ptr m)$/;"	f
InfoPrinted	HShell.c	/^Boolean InfoPrinted(void)$/;"	f
InitAdapt	HAdapt.c	/^void InitAdapt (XFInfo *xfinfo) $/;"	f
InitAlpha	HFB.c	/^static void InitAlpha(AlphaBeta *ab, int *start, int *end, $/;"	f	file:
InitArc	HArc.c	/^void InitArc(void)$/;"	f
InitAudi	HAudio.c	/^static void InitAudi(AudioIn a, HTime *sampPeriod)$/;"	f	file:
InitAudio	HAudio.c	/^void InitAudio(void)$/;"	f
InitAudo	HAudio.c	/^static void InitAudo(AudioOut a, HTime *sampPeriod)$/;"	f	file:
InitCMLLRXForm	HAdapt.c	/^static void InitCMLLRXForm(AccStruct *accs, DVector W, DVector bias)$/;"	f	file:
InitClustering	HTrain.c	/^static void InitClustering(MemHeap *x, Sequence vpool, int nc,$/;"	f	file:
InitDict	HDict.c	/^void InitDict(void)$/;"	f
InitExactMPE	HExactMPE.c	/^void InitExactMPE(void)$/;"	f
InitFB	HFB.c	/^void InitFB(void)$/;"	f
InitFBLat	HFBLat.c	/^void InitFBLat(void)$/;"	f
InitFBank	HSigP.c	/^FBankInfo InitFBank(MemHeap *x, int frameSize, long sampPeriod, int numChans,$/;"	f
InitGCs	HGraf.c	/^static void InitGCs(void)$/;"	f	file:
InitGlobals	HGraf.c	/^static void InitGlobals(void)$/;"	f	file:
InitGlobals	HGraf_WIN32.c	/^static void InitGlobals(void)$/;"	f	file:
InitGraf	HGraf.c	/^void InitGraf(void)$/;"	f
InitGraf	HGraf.null.c	/^void InitGraf(void)$/;"	f
InitGraf	HGraf_WIN32.c	/^void InitGraf(void)$/;"	f
InitHMMSet	HModel.c	/^static ReturnStatus InitHMMSet(HMMSet *hset, char *fname, Boolean isSingle)$/;"	f	file:
InitIdentity	HMath.c	/^static void InitIdentity(DMatrix A) $/;"	f	file:
InitLM	HLM.c	/^void InitLM(void)$/;"	f
InitLabel	HLabel.c	/^void InitLabel(void)$/;"	f
InitLat	HLat.c	/^void InitLat(void)$/;"	f
InitMap	HMap.c	/^void InitMap(void)$/;"	f
InitMath	HMath.c	/^void InitMath(void)$/;"	f
InitMem	HMem.c	/^void InitMem(void)$/;"	f
InitModel	HModel.c	/^void InitModel(void)$/;"	f
InitNet	HNet.c	/^void InitNet(void)$/;"	f
InitPLP	HSigP.c	/^void InitPLP (FBankInfo info, int lpcOrder, Vector eql, DMatrix cm)$/;"	f
InitPSetInfo	HRec.c	/^PSetInfo *InitPSetInfo(HMMSet *hset)$/;"	f
InitParm	HParm.c	/^ReturnStatus InitParm(void)$/;"	f
InitPronHolders	HNet.c	/^static int InitPronHolders(Network *net,Lattice *lat,HMMSetCxtInfo *hci,$/;"	f	file:
InitPruneStats	HFB.c	/^static void InitPruneStats(AlphaBeta *ab)$/;"	f	file:
InitRec	HRec.c	/^void InitRec(void)$/;"	f
InitScanner	HModel.c	/^ReturnStatus InitScanner(char *fname, Source *src, Token *tok, HMMSet *hset)$/;"	f
InitSemiTiedDet	HAdapt.c	/^static double InitSemiTiedDet(BaseClass *bclass, IntVec classes)$/;"	f	file:
InitSemiTiedFR	HAdapt.c	/^static void InitSemiTiedFR(AdaptXForm *xform, LinXForm *xf, IntVec classes, TriMat totCov)$/;"	f	file:
InitSemiTiedVars	HAdapt.c	/^static void InitSemiTiedVars(AdaptXForm *xform, IntVec classes, TriMat totCov)$/;"	f	file:
InitShell	HShell.c	/^ReturnStatus InitShell(int argc, char *argv[], char *ver, char *sccs)$/;"	f
InitSigP	HSigP.c	/^void InitSigP(void)$/;"	f
InitSource	HShell.c	/^ReturnStatus InitSource(char *fname, Source *src,  IOFilter filter)$/;"	f
InitSymNames	HModel.c	/^void InitSymNames(void)$/;"	f
InitTMixRecs	HModel.c	/^void InitTMixRecs(HMMSet *hset, int s, int M)$/;"	f
InitTrScan	HLabel.c	/^static void InitTrScan(void)$/;"	f	file:
InitTrain	HTrain.c	/^void InitTrain(void)$/;"	f
InitUtil	HUtil.c	/^void InitUtil(void)$/;"	f
InitUttInfo	HFB.c	/^void InitUttInfo( UttInfo *utt, Boolean twoFiles )$/;"	f
InitUttObservations	HFB.c	/^void InitUttObservations(UttInfo *utt, HMMSet *al_hset, $/;"	f
InitVQ	HVQ.c	/^void InitVQ(void)$/;"	f
InitVRecInfo	HRec.c	/^VRecInfo *InitVRecInfo(PSetInfo *psi,int nToks,Boolean models,Boolean states)$/;"	f
InitVocab	HDict.c	/^void InitVocab(Vocab *voc)$/;"	f
InitWave	HWave.c	/^void InitWave(void)$/;"	f
InitXFormScanner	HModel.c	/^static char *InitXFormScanner(HMMSet *hset, char *macroname, char *fname,$/;"	f	file:
InitialiseFBInfo	HFBLat.c	/^void InitialiseFBInfo(FBLatInfo *fbInfo,$/;"	f
InitialiseForBack	HFB.c	/^void InitialiseForBack(FBInfo *fbInfo, MemHeap *x, HMMSet *hset, UPDSet uset, $/;"	f
InputAction	HWave.c	/^}InputAction;$/;"	t	typeref:enum:__anon93	file:
InputXForm	HModel.h	/^} InputXForm;$/;"	t	typeref:struct:__anon55
InsCorrectness	HExactMPE.c	/^static float InsCorrectness = -1;   \/* repeat of config also used in HFBLat.c *\/$/;"	v	file:
InsCorrectness	HFBLat.c	/^static float InsCorrectness = -1;                            \/* Correctness of an inserted phone.  Can be tuned, it affects recognition insertion rate.$/;"	v	file:
InstallColours	HGraf.c	/^static void InstallColours(void)$/;"	f	file:
InstallColours	HGraf_WIN32.c	/^static void InstallColours(void)$/;"	f	file:
InstallFonts	HGraf.c	/^static void InstallFonts(void)$/;"	f	file:
IntCKind	HShell.h	/^   IntCKind,            \/* integer value - coercable to float *\/$/;"	e	enum:__anon76
IntSet	HUtil.h	/^}IntSet;$/;"	t	typeref:struct:__anon91
IntVec	HMem.h	/^typedef int   *IntVec;     \/* int vector[1..size] *\/$/;"	t
IntVecElemSize	HMem.c	/^size_t IntVecElemSize(int size) { return (size+1)*sizeof(int); }$/;"	f
IntVecSize	HMem.c	/^int IntVecSize(IntVec v)$/;"	f
InternTypeSize	esignal.c	/^InternTypeSize(int type         \/* numeric data_type code *\/ )$/;"	f
InternalDict	HNet.c	/^static Boolean InternalDict(Vocab *voc,HMMSetCxtInfo *hci)$/;"	f	file:
InvDiagGConst	HVQ.c	/^static float InvDiagGConst(Vector iv)$/;"	f	file:
InvSVD	HMath.c	/^void InvSVD(DMatrix A, DMatrix U, DVector W, DMatrix V, DMatrix Result)$/;"	f
IsDotLine	HLabel.c	/^static Boolean IsDotLine(char *s)$/;"	f	file:
IsFullSet	HUtil.c	/^Boolean IsFullSet(IntSet s)$/;"	f
IsHCIContextInd	HNet.c	/^Boolean IsHCIContextInd(HMMSetCxtInfo *hci,LabId labid)$/;"	f
IsInRect	HGraf.c	/^Boolean IsInRect(int x, int y, int x0, int y0, int x1, int y1)$/;"	f
IsInRect	HGraf.null.c	/^Boolean IsInRect(int x, int y, int x0, int y0, int x1, int y1)$/;"	f
IsInRect	HGraf_WIN32.c	/^Boolean IsInRect(int x, int y, int x0, int y0, int x1, int y1)$/;"	f
IsLMScale	HArc.c	/^static Boolean IsLMScale = FALSE;$/;"	v	file:
IsMLFFile	HLabel.c	/^Boolean IsMLFFile(char *fn)$/;"	f
IsMember	HUtil.c	/^Boolean IsMember(IntSet s, int x)$/;"	f
IsNonSilArc	HExactMPE.c	/^Boolean IsNonSilArc(LArc *larc){ \/*returns TRUE if this word is non SENT_START etc. *\/$/;"	f
IsNumeric	HLabel.c	/^Boolean IsNumeric(char *s)$/;"	f
IsRContextInd	HNet.c	/^static Boolean IsRContextInd(HMMSetCxtInfo *hci,PronHolder *p,int pos,int xlc)$/;"	f	file:
IsSeen	HModel.c	/^Boolean IsSeen(int flag)$/;"	f
IsSeenV	HMem.c	/^Boolean IsSeenV(Ptr m)$/;"	f
IsShared	HModel.c	/^static Boolean IsShared(HMMSet *hset)$/;"	f	file:
IsSilence	HArc.h	/^  Boolean IsSilence; \/* Probably just start & end. *\/$/;"	m	struct:_CorrN
IsSilence	HExactMPE.c	96;"	d	file:
IsSilence	HExactMPE.c	99;"	d	file:
IsSilence	HFBLat.c	136;"	d	file:
IsSilence	HFBLat.c	139;"	d	file:
IsStartOrEnd	HExactMPE.c	101;"	d	file:
IsStartOrEnd	HFBLat.c	141;"	d	file:
IsTriMat	HMem.c	/^Boolean IsTriMat(Matrix m)$/;"	f
IsVAXOrder	HAudio.c	/^static Boolean IsVAXOrder(void)$/;"	f	file:
IsVAXOrder	HShell.c	/^static Boolean IsVAXOrder(void)$/;"	f	file:
IsWd0Link	HNet.c	/^static Boolean IsWd0Link(NetLink *link)$/;"	f	file:
IsWdPen	HArc.c	/^static Boolean IsWdPen = FALSE;$/;"	v	file:
ItemBlock	HTrain.h	/^}ItemBlock;$/;"	t	typeref:struct:_ItemBlock
ItemRec	HModel.h	/^}ItemRec;$/;"	t	typeref:struct:_ItemRec
K	HAdapt.c	/^   DVector *K, D;$/;"	m	struct:__anon6	file:
KeyPressed	HShell.c	/^Boolean KeyPressed(int tWait)$/;"	f
KeyType	HGraf.h	/^typedef enum _KeyType KeyType;$/;"	t	typeref:enum:_KeyType
Keyword	HUtil.c	/^} Keyword;$/;"	t	typeref:enum:__anon89	file:
L2F	HMath.c	/^double   L2F(LogDouble x)$/;"	f
LATFB_MAX	HLat.h	/^typedef enum {LATFB_SUM, LATFB_MAX} LatFBType;$/;"	e	enum:__anon31
LATFB_SUM	HLat.h	/^typedef enum {LATFB_SUM, LATFB_MAX} LatFBType;$/;"	e	enum:__anon31
LAdd	HMath.c	/^LogDouble LAdd(LogDouble x, LogDouble y)$/;"	f
LAlign	HNet.h	/^LAlign;$/;"	t	typeref:struct:lalign
LArc	HNet.h	/^LArc;$/;"	t	typeref:struct:larc
LArcNumb	HNet.h	245;"	d
LArcTotLMLike	HNet.h	252;"	d
LArcTotLike	HNet.h	257;"	d
LArc_E	HNet.h	/^LArc_E;$/;"	t	typeref:struct:larc_e
LArc_S	HNet.h	/^LArc_S;$/;"	t	typeref:struct:larc_s
LCMapFilter	HShell.h	/^   LCMapFilter,     \/* LM Class Map Input *\/$/;"	e	enum:__anon74
LCMapOFilter	HShell.h	/^   LCMapOFilter,    \/* LM Class Map Output *\/$/;"	e	enum:__anon74
LEVELSEP	HLabel.c	580;"	d	file:
LFEED	HLabel.c	583;"	d	file:
LGramFilter	HShell.h	/^   LGramFilter,     \/* NGram Input via LGBase *\/$/;"	e	enum:__anon74
LGramOFilter	HShell.h	/^   LGramOFilter,    \/* NGram Output via LGBase *\/$/;"	e	enum:__anon74
LIGHT_BLUE	HGraf.h	/^                LIGHT_BLUE, DARK_GREEN, LIGHT_GREEN, DARK_BROWN, LIGHT_BROWN, $/;"	e	enum:_HColour
LIGHT_BROWN	HGraf.h	/^                LIGHT_BLUE, DARK_GREEN, LIGHT_GREEN, DARK_BROWN, LIGHT_BROWN, $/;"	e	enum:_HColour
LIGHT_GREEN	HGraf.h	/^                LIGHT_BLUE, DARK_GREEN, LIGHT_GREEN, DARK_BROWN, LIGHT_BROWN, $/;"	e	enum:_HColour
LIGHT_GREY	HGraf.h	/^                LIGHT_GREY, GREY, DARK_GREY, BLACK};$/;"	e	enum:_HColour
LINXFORM	HModel.c	/^   LINXFORM, OFFSET, BIAS, LOGDET, BLOCKINFO, BLOCK, BASECLASS, $/;"	e	enum:__anon38	file:
LLFInfo	HLat.c	/^typedef struct _LLFInfo LLFInfo;$/;"	t	typeref:struct:_LLFInfo	file:
LLTC	HMath.h	/^   LLTC,          \/* L' part of Choleski decomposition *\/$/;"	e	enum:__anon34
LLTCOV	HModel.c	/^   DURATION, INVDIAGCOV, TRANSP, DPROB, LLTCOV, LLTCOVAR,$/;"	e	enum:__anon38	file:
LLTCOVAR	HModel.c	/^   DURATION, INVDIAGCOV, TRANSP, DPROB, LLTCOV, LLTCOVAR,$/;"	e	enum:__anon38	file:
LLink	HLabel.h	/^typedef struct _Label *LLink;$/;"	t	typeref:struct:_Label
LMINMIX	HModel.h	53;"	d
LMSCALE	HArc.c	/^static float LMSCALE = 0;$/;"	v	file:
LMState	HLM.h	/^typedef Ptr LMState;$/;"	t
LMTextFilter	HShell.h	/^   LMTextFilter,    \/* LM source text input via LGPrep *\/$/;"	e	enum:__anon74
LMTrans	HLM.c	/^LogFloat LMTrans (LModel *lm, LMState src, LabId wdid, LMState *dest)$/;"	f
LMType	HLM.h	/^typedef enum { boNGram=1, matBigram, hlmModel } LMType;$/;"	t	typeref:enum:__anon32
LModel	HLM.h	/^} LModel;$/;"	t	typeref:struct:lmodel
LN10	HLM.c	53;"	d	file:
LNGCX_FMT	esig_asc.c	83;"	d	file:
LNGCX_W	esig_asc.c	82;"	d	file:
LNGCX_WFMT	esig_asc.c	84;"	d	file:
LNG_FMT	esig_asc.c	51;"	d	file:
LNG_W	esig_asc.c	50;"	d	file:
LNG_WFMT	esig_asc.c	52;"	d	file:
LNode	HNet.h	/^LNode;$/;"	t	typeref:struct:lnode
LNodeBw	HLat.h	57;"	d
LNodeFw	HLat.h	56;"	d
LNodeStats	HLat.c	864;"	d	file:
LOADFIDX	HModel.c	67;"	d	file:
LOFREQ	HParm.c	/^   LOFREQ,        \/* Lo Fbank frequency *\/$/;"	e	enum:__anon63	file:
LOGDET	HModel.c	/^   LINXFORM, OFFSET, BIAS, LOGDET, BLOCKINFO, BLOCK, BASECLASS, $/;"	e	enum:__anon38	file:
LONG	esignal.h	68;"	d
LONG_COMPLEX	esignal.h	77;"	d
LOpen	HLabel.c	/^Transcription *LOpen(MemHeap *x, char * fname, FileFormat fmt)$/;"	f
LPC	HParm.h	/^      LPC,LPREFC,LPCEPSTRA,LPDELCEP,   \/* LP-based Coefficients *\/$/;"	e	enum:_BaseParmKind
LPC2Cepstrum	HSigP.c	/^void LPC2Cepstrum (Vector a, Vector c)$/;"	f
LPC2RefC	HSigP.c	/^void LPC2RefC(Vector a, Vector k)$/;"	f
LPCEPSTRA	HParm.h	/^      LPC,LPREFC,LPCEPSTRA,LPDELCEP,   \/* LP-based Coefficients *\/$/;"	e	enum:_BaseParmKind
LPCORDER	HParm.c	/^   LPCORDER,      \/* LPC order *\/      $/;"	e	enum:__anon63	file:
LPCbased	HParm.c	/^typedef enum { FFTbased, LPCbased, VQbased} CodeStyle;$/;"	e	enum:__anon61	file:
LPDELCEP	HParm.h	/^      LPC,LPREFC,LPCEPSTRA,LPDELCEP,   \/* LP-based Coefficients *\/$/;"	e	enum:_BaseParmKind
LPREFC	HParm.h	/^      LPC,LPREFC,LPCEPSTRA,LPDELCEP,   \/* LP-based Coefficients *\/$/;"	e	enum:_BaseParmKind
LSMALL	HMath.h	43;"	d
LSave	HLabel.c	/^ReturnStatus LSave(char *fname, Transcription *t, FileFormat fmt)$/;"	f
LSub	HMath.c	/^LogDouble LSub(LogDouble x, LogDouble y)$/;"	f
LTriStrip	HLabel.c	/^void LTriStrip(Boolean enab)$/;"	f
LUDecompose	HMath.c	/^static Boolean LUDecompose(Matrix a, int *perm, int *sign)$/;"	f	file:
LWMapFilter	HShell.h	/^   LWMapFilter,     \/* LM Word Map Input via LWMap *\/$/;"	e	enum:__anon74
LWMapOFilter	HShell.h	/^   LWMapOFilter,    \/* LM Word Map Output via LWMap *\/$/;"	e	enum:__anon74
LZERO	HMath.h	42;"	d
L_VERSION	HNet.h	73;"	d
LabId	HLabel.h	/^typedef NameCell *LabId;   \/* Internal representation of names *\/$/;"	t
LabList	HLabel.h	/^}LabList;$/;"	t	typeref:struct:_LabList
Label	HLabel.h	/^}Label; \/* NB: head and tail of every list are dummy sentinels *\/$/;"	t	typeref:struct:_Label
LabelsFilter	HShell.h	/^   LabelsFilter,    \/* Label files input via HLabel *\/$/;"	e	enum:__anon74
LabelsOFilter	HShell.h	/^   LabelsOFilter,   \/* Label files output via HLabel *\/$/;"	e	enum:__anon74
LangModFilter	HShell.h	/^   LangModFilter,   \/* language model files input via HLM *\/$/;"	e	enum:__anon74
LangModOFilter	HShell.h	/^   LangModOFilter,  \/* language model files output via HLM *\/$/;"	e	enum:__anon74
LatAttachInfo	HLat.c	/^void LatAttachInfo (MemHeap *heap, size_t size, Lattice *lat)$/;"	f
LatCheck	HLat.c	/^void LatCheck (Lattice *lat)$/;"	f
LatDetachInfo	HLat.c	/^void LatDetachInfo (MemHeap *heap, Lattice *lat)$/;"	f
LatEndNode	HLat.c	/^LNode *LatEndNode (Lattice *lat)$/;"	f
LatExpand	HLat.c	/^Lattice *LatExpand (MemHeap *heap, Lattice *lat, LModel *lm)$/;"	f
LatFBType	HLat.h	/^typedef enum {LATFB_SUM, LATFB_MAX} LatFBType;$/;"	t	typeref:enum:__anon31
LatFieldType	HNet.c	/^typedef enum {UNK_FIELD, STR_FIELD, INT_FIELD, FLT_FIELD} LatFieldType;$/;"	t	typeref:enum:__anon57	file:
LatFindBest	HLat.c	/^Transcription *LatFindBest (MemHeap *heap, Lattice *lat, int N)$/;"	f
LatFormat	HNet.h	/^typedef int LatFormat;      \/* Format of lattice. Formed by oring flags *\/$/;"	t
LatForwBackw	HLat.c	/^LogDouble LatForwBackw (Lattice *lat, LatFBType type)$/;"	f
LatFromPaths	HRec.c	/^static void LatFromPaths(Path *path,int *ln,Lattice *lat)$/;"	f	file:
LatInLat	HArc.c	/^Boolean LatInLat(Lattice *numLat, Lattice *denLat){$/;"	f
LatInLatRec	HArc.c	/^Boolean LatInLatRec(LNode *n1, LNode *n2){$/;"	f
LatLMTrans	HLat.c	/^static LogFloat  LatLMTrans (LModel *lm, LMState src, LabId wordId, LMState *dest)$/;"	f	file:
LatPrune	HLat.c	/^Lattice *LatPrune (MemHeap *heap, Lattice *lat, LogDouble thresh, float arcsPerSec)$/;"	f
LatSetBoundaryWords	HLat.c	/^void LatSetBoundaryWords (char *start, char *end, char  *startLM, char *endLM)$/;"	f
LatSetScores	HLat.c	/^void LatSetScores (Lattice *lat)$/;"	f
LatStartNode	HLat.c	/^LNode *LatStartNode (Lattice *lat)$/;"	f
LatTopSort	HLat.c	/^Boolean LatTopSort (Lattice *lat, LNode **topOrder)$/;"	f
LatTopSortVisit	HLat.c	/^void LatTopSortVisit (LNode *ln, int *time)$/;"	f
Lattice	HNet.h	/^Lattice;$/;"	t	typeref:struct:lattice
LatticeFromLabels	HNet.c	/^Lattice *LatticeFromLabels(LabList *ll,LabId bnd,Vocab *voc,MemHeap *heap)$/;"	f
LikeToWord	HRec.c	/^static LogFloat LikeToWord(NetNode *node)$/;"	f	file:
LinSolve	HMath.c	/^static void LinSolve(Matrix a, int *perm, float *b)$/;"	f	file:
LinTranQuaProd	HMath.c	/^void LinTranQuaProd(Matrix Prod, Matrix A, Matrix C)$/;"	f
LinXForm	HModel.h	/^} LinXForm;$/;"	t	typeref:struct:__anon53
LineWidth	HGraf_WIN32.c	/^static int LineWidth = 1;$/;"	v	file:
LoadAccs	HTrain.c	/^Source LoadAccs(HMMSet *hset, char *fname, UPDSet uFlags){ return LoadAccsParallel(hset,fname,uFlags,0); }$/;"	f
LoadAccsParallel	HTrain.c	/^Source LoadAccsParallel(HMMSet *hset, char *fname, UPDSet uFlags, int index)$/;"	f
LoadAllMacros	HModel.c	/^static ReturnStatus LoadAllMacros(HMMSet *hset, char *fname, short fidx)$/;"	f	file:
LoadBaseClass	HModel.c	/^BaseClass *LoadBaseClass(HMMSet *hset, char* macroname, char *fname)$/;"	f
LoadCMeanVector	HParm.c	/^static void LoadCMeanVector( MemHeap* x , IOConfig cf , char* fname )$/;"	f	file:
LoadData	HFB.c	/^void LoadData(HMMSet *hset, UttInfo *utt, FileFormat dff, $/;"	f
LoadData	HWave.c	/^static ReturnStatus LoadData(FILE *f, Wave w, long fBytes)$/;"	f	file:
LoadESPSLabels	HLabel.c	/^static void LoadESPSLabels(MemHeap *x, Transcription *t, Source *src)$/;"	f	file:
LoadHMMSet	HModel.c	/^ReturnStatus LoadHMMSet(HMMSet *hset, char *hmmDir, char *hmmExt)$/;"	f
LoadHTKLabels	HLabel.c	/^static void LoadHTKLabels(MemHeap *x, Transcription *t, Source *src)$/;"	f	file:
LoadHTKList	HLabel.c	/^static LabList * LoadHTKList(MemHeap *x, Source *src, int alt)$/;"	f	file:
LoadInputXForm	HModel.c	/^InputXForm *LoadInputXForm(HMMSet *hset, char* macroname, char *fname)$/;"	f
LoadLabs	HFB.c	/^void LoadLabs(UttInfo *utt, FileFormat lff, char * datafn, $/;"	f
LoadMacroFiles	HModel.c	/^static ReturnStatus LoadMacroFiles(HMMSet *hset)$/;"	f	file:
LoadMasterFile	HLabel.c	/^void LoadMasterFile(char *fname)$/;"	f
LoadMat	HParm.c	/^static void LoadMat (MemHeap *x, IOConfig cf)  \/*static??*\/$/;"	f	file:
LoadMuAcc	HTrain.c	/^static void LoadMuAcc(Source *src, MuAcc *ma, int vSize)$/;"	f	file:
LoadOneXForm	HModel.c	/^AdaptXForm *LoadOneXForm(HMMSet *hset, char* macroname, char *fname)$/;"	f
LoadRegTree	HModel.c	/^RegTree *LoadRegTree(HMMSet *hset, char* macroname, char *fname)$/;"	f
LoadSCRIBELabels	HLabel.c	/^static void LoadSCRIBELabels(MemHeap *x, Transcription *t, Source *src)$/;"	f	file:
LoadSegment	HTrain.c	/^void LoadSegment(SegStore ss, HTime start, HTime end, ParmBuf pbuf)$/;"	f
LoadSideXForm	HParm.c	/^static AdaptXForm *LoadSideXForm(IOConfig cf, char *fname) $/;"	f	file:
LoadStatsFile	HUtil.c	/^void LoadStatsFile(char *statfile,HMMSet *hset,Boolean otrace)$/;"	f
LoadTIMITLabels	HLabel.c	/^static void LoadTIMITLabels(MemHeap *x, Transcription *t, Source *src)$/;"	f	file:
LoadTrAcc	HTrain.c	/^static void LoadTrAcc(Source *src, TrAcc *ta, int numStates)$/;"	f	file:
LoadVQTab	HVQ.c	/^VQTable LoadVQTab(char *tabFN, short magic)$/;"	f
LoadVaAcc	HTrain.c	/^static void LoadVaAcc(Source *src, VaAcc *va, int vSize, CovKind ck)$/;"	f	file:
LoadVarScale	HParm.c	/^static void LoadVarScale (MemHeap *x, IOConfig cf)$/;"	f	file:
LoadVarScaleVector	HParm.c	/^static void LoadVarScaleVector(MemHeap* x, IOConfig cf, char *fname)$/;"	f	file:
LoadWtAcc	HTrain.c	/^static void LoadWtAcc(Source *src, WtAcc *wa, int numMixtures)$/;"	f	file:
LogDouble	HMath.h	/^typedef double LogDouble;$/;"	t
LogFloat	HMath.h	/^typedef float  LogFloat;   \/* types just to signal log values *\/$/;"	t
LongComplex	esignal.h	/^typedef struct {long	real, imag;}	LongComplex;$/;"	t	typeref:struct:__anon3
LongProd	esignal.c	/^LongProd(int     n,$/;"	f
LongVal	esignal.c	/^LongVal(void *src, int type, long *dest)$/;"	f	file:
M	HUtil.h	/^   int M;            \/* num mixtures *\/$/;"	m	struct:__anon90
MACHASHSIZE	HModel.h	50;"	d
MACHEPS	HMath.c	682;"	d	file:
MACRO	HModel.c	/^   MACRO, EOFSYM, NULLSYM   \/* Special Syms - not literals *\/$/;"	e	enum:__anon38	file:
MAGIC	esignal.h	54;"	d
MAPUpdateModels	HMap.c	/^void MAPUpdateModels(HMMSet *hset, UPDSet uFlags)$/;"	f
MATTRAN	HParm.c	/^   MATTRAN,$/;"	e	enum:__anon63	file:
MATTRANFN	HParm.c	/^   MATTRANFN,     \/* File name for MatTran file *\/$/;"	e	enum:__anon63	file:
MAUVE	HGraf.h	/^enum _HColour { WHITE, YELLOW, ORANGE, RED, MAUVE, PURPLE, DARK_BLUE, $/;"	e	enum:_HColour
MAX	HArc.c	74;"	d	file:
MAX	HExactMPE.c	90;"	d	file:
MAX	HFBLat.c	72;"	d	file:
MAXEFS	HShell.c	70;"	d	file:
MAXFNAMELEN	HShell.h	76;"	d
MAXGLOBS	HShell.h	78;"	d
MAXLATDEPTH	HNet.c	407;"	d	file:
MAXLATS	HArc.h	163;"	d
MAXMLFS	HLabel.c	115;"	d	file:
MAXPHONES	HDict.h	35;"	d
MAXSTRLEN	HShell.h	75;"	d
MAXSYMLEN	HModel.c	391;"	d	file:
MAXVAR	HUtil.c	406;"	d	file:
MAXVQNODES	HVQ.c	36;"	d	file:
MAX_ATTR	esig_asc.c	1080;"	d	file:
MAX_ATTR	esig_asc.c	1175;"	d	file:
MAX_COLOURS	HGraf.h	51;"	d
MAX_DEPTH	HNet.c	2459;"	d	file:
MAX_FLD_DEPTH	esig_asc.c	36;"	d	file:
MAX_GC	HGraf.c	80;"	d	file:
MAX_GREYS	HGraf.h	50;"	d
MAX_INT	HParm.c	485;"	d	file:
MAX_INT	HWave.c	46;"	d	file:
MAX_LMID	HLM.h	46;"	d
MAX_PB_SIZE	HParm.c	484;"	d	file:
MAX_POINT	HGraf_WIN32.c	41;"	d	file:
MAX_STACK	HMath.c	686;"	d	file:
MAX_TOKS	HRec.h	32;"	d
MAX_TYPE_LEN	esignal.h	85;"	d
MEAN	HModel.c	/^   MEAN, VARIANCE, INVCOVAR, XFORM, GCONST,$/;"	e	enum:__anon38	file:
MEANBASE	HModel.h	/^enum _BaseClassKind {MIXBASE, MEANBASE, COVBASE};$/;"	e	enum:_BaseClassKind
MEAN_KEY	HUtil.c	/^   MIX_KEY, MEAN_KEY, STREAM_KEY, COV_KEY$/;"	e	enum:__anon89	file:
MEASURESIL	HParm.c	/^   MEASURESIL,    \/* Measure Background Silence *\/$/;"	e	enum:__anon63	file:
MELSPEC	HParm.h	/^      MELSPEC,                         \/* Mel-Freq Spectrum (Linear) *\/$/;"	e	enum:_BaseParmKind
MFCC	HParm.h	/^      MFCC,                            \/* Mel-Freq Cepstra *\/$/;"	e	enum:_BaseParmKind
MHEAP	HMem.h	/^typedef enum{MHEAP, MSTAK, CHEAP} HeapType;$/;"	e	enum:__anon36
MILink	HModel.h	/^typedef struct _MMFInfo *MILink;$/;"	t	typeref:struct:_MMFInfo
MIN	HArc.c	75;"	d	file:
MIN	HExactMPE.c	89;"	d	file:
MIN	HFBLat.c	73;"	d	file:
MINDLOGP	HModel.h	55;"	d
MINEARG	HMath.h	44;"	d
MINLARG	HMath.h	45;"	d
MINMIX	HModel.h	52;"	d
MINPRONPROB	HDict.h	38;"	d
MINVAR	HUtil.c	405;"	d	file:
MIN_PB_SIZE	HParm.c	483;"	d	file:
MIXBASE	HModel.h	/^enum _BaseClassKind {MIXBASE, MEANBASE, COVBASE};$/;"	e	enum:_BaseClassKind
MIXER_DEV	HAudio.c	127;"	d	file:
MIXTURE	HModel.c	/^   STATE, TMIX, MIXTURE, STREAM, SWEIGHTS,$/;"	e	enum:__anon38	file:
MIX_KEY	HUtil.c	/^   MIX_KEY, MEAN_KEY, STREAM_KEY, COV_KEY$/;"	e	enum:__anon89	file:
MIX_UPDATE_SHARING	HTrain.h	235;"	d
MInfo	HAdapt.c	/^} MInfo;$/;"	t	typeref:struct:__anon7	file:
MLFCHUNKSIZE	HLabel.c	114;"	d	file:
MLFDef	HLabel.h	/^}MLFDef;$/;"	t	typeref:union:__anon29
MLFDefType	HLabel.h	/^typedef enum _MLFDefType MLFDefType;$/;"	t	typeref:enum:_MLFDefType
MLFEntry	HLabel.h	/^}MLFEntry;$/;"	t	typeref:struct:_MLFEntry
MLFHash	HLabel.c	/^static unsigned MLFHash(char *s)$/;"	f	file:
MLFPatType	HLabel.h	/^typedef enum _MLFPatType MLFPatType;$/;"	t	typeref:enum:_MLFPatType
MLF_FULL	HLabel.h	/^   MLF_IMMEDIATE, MLF_SIMPLE, MLF_FULL$/;"	e	enum:_MLFDefType
MLF_IMMEDIATE	HLabel.h	/^   MLF_IMMEDIATE, MLF_SIMPLE, MLF_FULL$/;"	e	enum:_MLFDefType
MLF_SIMPLE	HLabel.h	/^   MLF_IMMEDIATE, MLF_SIMPLE, MLF_FULL$/;"	e	enum:_MLFDefType
MLLRCOV	HModel.h	/^enum _XFormKind {MLLRMEAN, MLLRCOV, MLLRVAR, CMLLR, SEMIT};$/;"	e	enum:_XFormKind
MLLRMEAN	HModel.h	/^enum _XFormKind {MLLRMEAN, MLLRCOV, MLLRVAR, CMLLR, SEMIT};$/;"	e	enum:_XFormKind
MLLRVAR	HModel.h	/^enum _XFormKind {MLLRMEAN, MLLRCOV, MLLRVAR, CMLLR, SEMIT};$/;"	e	enum:_XFormKind
ML_PARTS	HParm.c	/^   ML_PARTS=10$/;"	e	enum:__anon66	file:
ML_SIL_EN	HParm.c	/^   ML_SIL_EN=3,$/;"	e	enum:__anon66	file:
ML_SIL_ST	HParm.c	/^   ML_SIL_ST=2,$/;"	e	enum:__anon66	file:
ML_SP_EN	HParm.c	/^   ML_SP_EN=9,$/;"	e	enum:__anon66	file:
ML_SP_ST	HParm.c	/^   ML_SP_ST=8,$/;"	e	enum:__anon66	file:
MLink	HModel.h	/^typedef struct _MacroDef *MLink;$/;"	t	typeref:struct:_MacroDef
MMAPI_AUDIO	HAudio.c	62;"	d	file:
MMAPI_AUDIO	HAudio.c	69;"	d	file:
MMAPI_BUFFER_COUNT	HAudio.c	169;"	d	file:
MMAPI_BUFFER_DURATION	HAudio.c	168;"	d	file:
MMFIDMASK	HModel.c	/^   CLASS, XFORMWGTSET, CLASSXFORM, MMFIDMASK, PARAMETERS,$/;"	e	enum:__anon38	file:
MMFInfo	HModel.h	/^} MMFInfo;$/;"	t	typeref:struct:_MMFInfo
MOutP	HModel.c	/^LogFloat MOutP(Vector x, MixPDF *mp)$/;"	f
MPE	HFBLat.h	/^  Boolean MPE;  \/* currently doing MPE\/MWE, this may change from call to call$/;"	m	struct:__anon23
MPEFileLength	HFBLat.h	/^  int MPEFileLength;$/;"	m	struct:__anon23
MPEStruct	HArc.h	/^} MPEStruct;$/;"	t	typeref:struct:_MPEStruct
MPE_GetFileLen	HFBLat.c	/^int MPE_GetFileLen(Lattice *lat){$/;"	f
MRound	HMem.c	/^size_t MRound(size_t size)$/;"	f
MSTAK	HMem.h	/^typedef enum{MHEAP, MSTAK, CHEAP} HeapType;$/;"	e	enum:__anon36
MSolve	HMath.c	/^static void MSolve(DMatrix L, int i, DVector x, DVector y)$/;"	f	file:
MacroDef	HModel.h	/^} MacroDef;$/;"	t	typeref:struct:_MacroDef
MakeFN	HShell.c	/^char * MakeFN(char *fn, char *path, char *ext, char *s)$/;"	f
MakeHMMSet	HModel.c	/^ReturnStatus MakeHMMSet(HMMSet *hset, char *fname)$/;"	f
MakeHashTab	HModel.c	/^void ** MakeHashTab(HMMSet *hset, int size)$/;"	f
MakeHeaderInfo	HWave.c	/^static ReturnStatus MakeHeaderInfo(FILE *f, int hdrSize, Wave w)$/;"	f	file:
MakeIOConfig	HParm.c	/^static IOConfig MakeIOConfig(MemHeap *x,ChannelInfo *chan)$/;"	f	file:
MakeObservation	HParm.c	/^Observation MakeObservation(MemHeap *x, short *swidth, $/;"	f
MakeOneHMM	HModel.c	/^ReturnStatus MakeOneHMM(HMMSet *hset, char *hname)$/;"	f
MakeXGraf	HGraf.c	/^void MakeXGraf(char *wname, int x, int y, int w, int h, int bw)$/;"	f
MakeXGraf	HGraf.null.c	/^void MakeXGraf(char *wname, int x, int y, int w, int h, int bw)$/;"	f
MakeXGraf	HGraf_WIN32.c	/^void MakeXGraf(char *wname, int x, int y, int w, int h, int bw)$/;"	f
MarkBack	HRec.c	/^static void MarkBack(LNode *ln,int *nn)$/;"	f	file:
MarkPaths	HRec.c	/^static void MarkPaths(Path *path,int *nn,int *nl)$/;"	f	file:
MarkTree	HVQ.c	/^static void MarkTree(VQNode n, short *nid)$/;"	f	file:
MaskMatch	HShell.c	/^Boolean MaskMatch(char *mask, char *spkr, char *str)$/;"	f
Mat2DMat	HMath.c	/^void Mat2DMat(Matrix m1,  DMatrix m2)$/;"	f
Mat2Tri	HMath.c	/^void Mat2Tri (Matrix m1,  TriMat m2)$/;"	f
MatBiLM	HLM.h	/^} MatBiLM;$/;"	t	typeref:struct:matbilm
MatCofact	HMath.c	/^double MatCofact(Matrix c, int r, Vector cofact)$/;"	f
MatDet	HMath.c	/^float MatDet(Matrix c)$/;"	f
MatInvert	HMath.c	/^float MatInvert(Matrix c, Matrix invc)$/;"	f
MatTran	HParm.c	/^   Matrix MatTran;            \/* Stores transformation matrix *\/ $/;"	m	struct:__anon62	file:
MatTranFN	HParm.c	/^   char *MatTranFN;           \/* points to the file name string *\/$/;"	m	struct:__anon62	file:
Matrix	HMem.h	/^typedef float **Matrix;    \/* matrix[1..nrows][1..ncols] *\/$/;"	t
MatrixElemSize	HMem.c	/^size_t MatrixElemSize(int nrows,int ncols)$/;"	f
MatrixIDFT	HSigP.c	/^float MatrixIDFT(Vector as, Vector ac, DMatrix cm)$/;"	f
MatrixMult	HAdapt.c	/^static void MatrixMult(Matrix m1, Matrix m2, Matrix m)$/;"	f	file:
MaxMixInS	HModel.c	/^int MaxMixInS(HLink hmm, int s)$/;"	f
MaxMixInSet	HModel.c	/^int MaxMixInSet(HMMSet *hset)$/;"	f
MaxMixInSetS	HModel.c	/^int MaxMixInSetS(HMMSet *hset, int s)$/;"	f
MaxMixtures	HModel.c	/^int MaxMixtures(HLink hmm)$/;"	f
MaxModelProb	HFB.c	/^static LogDouble MaxModelProb(AlphaBeta *ab, int q, int t, int minq)$/;"	f	file:
MaxStatesInSet	HModel.c	/^int MaxStatesInSet(HMMSet *hset)$/;"	f
MeanRec	HParm.c	/^MeanRec;$/;"	t	typeref:struct:meanrec	file:
Mel	HSigP.c	/^float Mel(int k,float fres)$/;"	f
MelSpec2FBank	HSigP.c	/^void MelSpec2FBank(Vector melspec)$/;"	f
MemHeap	HMem.h	/^}MemHeap;$/;"	t	typeref:struct:__anon37
MemHeapRec	HMem.c	/^} MemHeapRec;$/;"	t	typeref:struct:_MemHeapRec	file:
MergeArcs	HLat.c	/^void MergeArcs(Lattice *lat, LArc *la1, LArc *la2)$/;"	f
MergeArcsForNode	HLat.c	/^void MergeArcsForNode(Lattice *lat, LNode *ln)$/;"	f
MergeLatNodesArcs	HLat.c	/^Lattice *MergeLatNodesArcs(Lattice *lat, MemHeap *heap, Boolean mergeFwd)$/;"	f
MergeLatNodesBackw	HLat.c	/^void MergeLatNodesBackw(Lattice *lat, LNode *ln)$/;"	f
MergeLatNodesForw	HLat.c	/^void MergeLatNodesForw(Lattice *lat, LNode *ln)$/;"	f
MergeNodes	HLat.c	/^static LNode *MergeNodes(Lattice *lat, LNode *ln1, LNode *ln2)$/;"	f	file:
MixFloor	HModel.h	59;"	d
MixLogWeight	HModel.c	/^LogFloat MixLogWeight(HMMSet *hset, float weight)$/;"	f
MixOcc	HFBLat.c	/^} MixOcc;$/;"	t	typeref:struct:__anon22	file:
MixPDF	HModel.h	/^} MixPDF;$/;"	t	typeref:struct:__anon41
MixWeight	HModel.c	/^float MixWeight(HMMSet *hset, float weight)$/;"	f
MixtureElem	HModel.h	/^} MixtureElem;$/;"	t	typeref:struct:__anon42
MixtureVector	HModel.h	/^} MixtureVector; $/;"	t	typeref:union:__anon43
MousePos	HGraf_WIN32.c	/^static POINT MousePos;   \/* updated when a WM_MOUSEMOVE occurs *\/$/;"	v	file:
MoveAlignYesRef	HRec.c	/^static void MoveAlignYesRef(Align *align)$/;"	f	file:
MovePathYesRef	HRec.c	/^static void MovePathYesRef(Path *path)$/;"	f	file:
MoveToRecent	HRec.c	/^static void MoveToRecent(NetInst *inst)$/;"	f	file:
MuAcc	HTrain.h	/^} MuAcc;$/;"	t	typeref:struct:__anon86
MultCovMeanLinXForms	HAdapt.c	/^static void MultCovMeanLinXForms(LinXForm *xf1, LinXForm *xf2, LinXForm *xf)$/;"	f	file:
MustSwap	HWave.c	/^static Boolean MustSwap(SrcOrder so)$/;"	f	file:
N	HUtil.h	/^   int N;            \/* num states in curret hmm *\/$/;"	m	struct:__anon90
NARC	HNet.h	100;"	d
NATIVE	esignal.h	105;"	d
NBIN	HLat.c	726;"	d	file:
NBestEntry	HRec.c	/^typedef struct nbestentry NBestEntry;$/;"	t	typeref:struct:nbestentry	file:
NDUR	HModel.c	/^   NDUR, PDUR, GDUR, RELDUR, GENDUR,$/;"	e	enum:__anon38	file:
NEntry	HLM.h	/^} NEntry;$/;"	t	typeref:struct:nentry
NGHSIZE1	HLM.c	319;"	d	file:
NGHSIZE2	HLM.c	320;"	d	file:
NGHSIZE3	HLM.c	321;"	d	file:
NGramLM	HLM.h	/^} NGramLM;$/;"	t	typeref:struct:ngramlm
NIST	HWave.h	/^        NIST,              \/* NIST databases eg RM1,TIMIT *\/$/;"	e	enum:__anon102
NISTSkipLine	HWave.c	/^static void NISTSkipLine(FILE *f)$/;"	f	file:
NISTmutab	HWave.c	/^static short int NISTmutab[256] = {$/;"	v	file:
NNODE	HNet.h	101;"	d
NOARG	HShell.h	/^typedef enum {SWITCHARG, STRINGARG, INTARG, FLOATARG, NOARG} ArgKind;$/;"	e	enum:__anon79
NODE	HModel.c	/^   RCLASS=110, REGTREE, NODE, TNODE,$/;"	e	enum:__anon38	file:
NOHEAD	HWave.h	/^        NOHEAD,            \/* Headerless File *\/$/;"	e	enum:__anon102
NOPRUNE	HFB.h	31;"	d
NORMALKEY	HGraf.h	/^enum _KeyType {NORMALKEY, SHIFTKEY, COMMANDKEY, CONTROLKEY, $/;"	e	enum:_KeyType
NO_AUDIO	HAudio.c	58;"	d	file:
NO_OF_FONTS	HGraf.c	134;"	d	file:
NO_TYPE	esignal.h	64;"	d
NSIZE	HLM.h	50;"	d
NULLC	HMath.h	/^   NULLC,         \/* none - implies Euclidean in distance metrics *\/$/;"	e	enum:__anon34
NULLD	HModel.h	/^enum _DurKind {NULLD, POISSOND, GAMMAD, RELD, GEND};$/;"	e	enum:_DurKind
NULLSIG	HAudio.h	31;"	d
NULLSYM	HModel.c	/^   MACRO, EOFSYM, NULLSYM   \/* Special Syms - not literals *\/$/;"	e	enum:__anon38	file:
NUMCEPS	HParm.c	/^   NUMCEPS,       \/* Num cepstral coefficients *\/$/;"	e	enum:__anon63	file:
NUMCHANS	HParm.c	/^   NUMCHANS,      \/* Num filterbank channels *\/$/;"	e	enum:__anon63	file:
NUMCKIND	HMath.h	/^   NUMCKIND       \/* DON'T TOUCH -- always leave as final element *\/$/;"	e	enum:__anon34
NUMCLASSES	HModel.c	/^   NUMCLASSES, ADAPTKIND, PREQUAL, INPUTXFORM,$/;"	e	enum:__anon38	file:
NUMMIXES	HModel.c	/^   BEGINHMM, USEMAC, ENDHMM, NUMMIXES, $/;"	e	enum:__anon38	file:
NUMSTATES	HModel.c	/^   NUMSTATES, STREAMINFO, VECSIZE, $/;"	e	enum:__anon38	file:
NUMSYM	HModel.c	455;"	d	file:
NUMXFORMS	HModel.c	/^   XFORMKIND=90, PARENTXFORM, NUMXFORMS, XFORMSET,$/;"	e	enum:__anon38	file:
NUM_SAMP_FREQS	HAudio.c	318;"	d	file:
NameCell	HLabel.h	/^}NameCell;$/;"	t	typeref:struct:_NameCell
NameOf	HShell.c	/^char * NameOf(char *fn, char *s)$/;"	f
NativeRead	esig_nat.c	/^NativeRead(void *data,$/;"	f	file:
NativeRecordSize	esig_nat.c	/^NativeRecordSize(FieldList list)$/;"	f
NativeTypeSize	esig_nat.c	/^NativeTypeSize(int type   \/* numeric data-type code *\/ )$/;"	f
NativeWrite	esig_nat.c	/^NativeWrite(void    *data,$/;"	f	file:
NetFilter	HShell.h	/^   NetFilter,       \/* Network file input via HNet *\/$/;"	e	enum:__anon74
NetInst	HNet.h	/^typedef struct _NetInst NetInst;$/;"	t	typeref:struct:_NetInst
NetLink	HNet.h	/^typedef struct _NetLink NetLink;$/;"	t	typeref:struct:_NetLink
NetNode	HNet.h	/^typedef struct _NetNode NetNode;$/;"	t	typeref:struct:_NetNode
NetNodeType	HNet.h	/^typedef int NetNodeType; $/;"	t
NetOFilter	HShell.h	/^   NetOFilter,      \/* Network file output via HNet *\/$/;"	e	enum:__anon74
Network	HNet.h	/^} Network;$/;"	t	typeref:struct:__anon60
New	HMem.c	/^void *New(MemHeap *x,size_t size)$/;"	f
NewBetaVec	HFB.c	/^static DVector NewBetaVec(MemHeap *x, int N)$/;"	f	file:
NewCell	HLabel.c	/^static NameCell *NewCell(char *name)$/;"	f	file:
NewFieldSpec	esignal.c	/^NewFieldSpec(int    type,       \/* numeric code for data type *\/$/;"	f
NewHMMScan	HUtil.c	/^void NewHMMScan(HMMSet *hset, HMMScanState *hss)$/;"	f
NewHMMSetCxtInfo	HNet.c	/^static HMMSetCxtInfo *NewHMMSetCxtInfo(HMMSet *hset, Boolean frcCxtInd)$/;"	f	file:
NewILattice	HNet.c	/^Lattice *NewILattice(MemHeap *heap,int nn,int na,Lattice *info)$/;"	f
NewItemBlock	HTrain.c	/^static IBLink NewItemBlock(MemHeap *x, int blkSize)$/;"	f	file:
NewLattice	HNet.c	/^Lattice *NewLattice(MemHeap *heap,int nn,int na)$/;"	f
NewMacro	HModel.c	/^MLink NewMacro(HMMSet *hset, short fidx, char type, LabId id, Ptr structure)$/;"	f
NewNRefAlign	HRec.c	/^static Align *NewNRefAlign(NetNode *node,int state,double like,$/;"	f	file:
NewNRefPath	HRec.c	/^static Path *NewNRefPath(void)$/;"	f	file:
NewNode	HNet.c	/^static NetNode *NewNode(MemHeap *heap,HLink hmm,int nlinks)$/;"	f	file:
NewOtprobVec	HFB.c	/^static float * NewOtprobVec(MemHeap *x, int M)$/;"	f	file:
NewOtprobVec	HFBLat.c	/^static float * NewOtprobVec(MemHeap *x, int M)$/;"	f	file:
NewPron	HDict.c	/^void NewPron(Vocab *voc, Word wid, int nphones, LabId *phones, $/;"	f
NewPronHolder	HNet.c	/^static PronHolder *NewPronHolder(MemHeap *heap,HMMSetCxtInfo *hci,$/;"	f	file:
NewString	HMem.c	/^char *NewString(MemHeap *x, int size)$/;"	f
NewWord	HDict.c	/^static Word NewWord(Vocab *voc, LabId wordName)$/;"	f	file:
NextArg	HShell.c	/^ArgKind NextArg(void)$/;"	f
NextLArc	HNet.h	249;"	d
NoFilter	HShell.h	/^   NoFilter,        \/* Direct input - no pipe *\/$/;"	e	enum:__anon74
NoMLFHeader	HLabel.c	/^static Boolean NoMLFHeader(char *s)$/;"	f	file:
NoOFilter	HShell.h	/^   NoOFilter        \/* Direct output - no pipe *\/$/;"	e	enum:__anon74
NoSilence	HFBLat.c	/^static Boolean NoSilence = FALSE;                      \/* If TRUE, then (in non-exact MPE) the silences are omitted from the reference transcription$/;"	v	file:
NodeId	HNet.h	/^typedef struct lnode *NodeId;$/;"	t	typeref:struct:lnode
NonSil_and_Quinphone_IsStartPhone	HExactMPE.c	/^Boolean NonSil_and_Quinphone_IsStartPhone(LArc *larc, int i){$/;"	f
NonSkipRegion	HFB.c	/^static Boolean NonSkipRegion(int skipstart, int skipend, int t)$/;"	f	file:
NormaliseLogEnergy	HSigP.c	/^void NormaliseLogEnergy(float *data,int n,int step,float silFloor,float escale)$/;"	f
Nq	HArc.h	/^  int Nq;$/;"	m	struct:_Acoustic
NumArgs	HShell.c	/^int  NumArgs(void)$/;"	f
NumAuxCases	HLabel.c	/^int NumAuxCases(LabList *ll, LabId id, int i)$/;"	f
NumCases	HLabel.c	/^int NumCases(LabList *ll, LabId id)$/;"	f
NumCols	HMem.c	/^int NumCols(Matrix m)$/;"	f
NumDCols	HMem.c	/^int NumDCols(DMatrix m)$/;"	f
NumDRows	HMem.c	/^int NumDRows(DMatrix m)$/;"	f
NumEnergy	HParm.c	/^static int NumEnergy(ParmKind pk)$/;"	f	file:
NumHead	HShell.c	/^static Boolean NumHead(char *s)$/;"	f	file:
NumItems	HUtil.c	/^int NumItems(ILink list)$/;"	f
NumMLFEntries	HLabel.c	/^int NumMLFEntries(void)$/;"	f
NumMLFFiles	HLabel.c	/^int NumMLFFiles(void)$/;"	f
NumNodeFoll	HNet.c	/^int NumNodeFoll(NodeId n)$/;"	f
NumNodePred	HNet.c	/^int NumNodePred(NodeId n)$/;"	f
NumRows	HMem.c	/^int NumRows(Matrix m)$/;"	f
NumSegs	HTrain.c	/^int NumSegs(SegStore ss)$/;"	f
NumStatic	HParm.c	/^static int NumStatic(int nTotal, ParmKind pk)$/;"	f	file:
NumTreeNodes	HTrain.c	/^static int NumTreeNodes(int nc)$/;"	f	file:
NumbLArc	HNet.h	242;"	d
NumberBytes	HWave.c	/^static long NumberBytes(FILE *f, int hSize, Boolean isPipe)$/;"	f	file:
NxtPath	HRec.h	/^typedef struct nxtpath NxtPath;    \/* NBest traceback route (HRec.c) *\/$/;"	t	typeref:struct:nxtpath
OBEXPFORM	HParm.c	2929;"	d	file:
OBFLTFORM	HParm.c	2928;"	d	file:
OBMARGIN	HParm.c	2927;"	d	file:
OFFSET	HModel.c	/^   LINXFORM, OFFSET, BIAS, LOGDET, BLOCKINFO, BLOCK, BASECLASS, $/;"	e	enum:__anon38	file:
OGI	HWave.h	/^        OGI,               \/* Oregon Institute format (similar to TIMIT) *\/$/;"	e	enum:__anon102
OGIhdr	HWave.c	/^} OGIhdr;$/;"	t	typeref:struct:__anon95	file:
OPTIONAL	esignal.h	91;"	d
ORANGE	HGraf.h	/^enum _HColour { WHITE, YELLOW, ORANGE, RED, MAUVE, PURPLE, DARK_BLUE, $/;"	e	enum:_HColour
OSS_AUDIO	HAudio.c	54;"	d	file:
OUTSILWARN	HParm.c	/^   OUTSILWARN,    \/* Output Warning before Measure Sil *\/$/;"	e	enum:__anon63	file:
OWarn	HModel.c	/^static void OWarn(HMMSet *hset,Boolean equal,char *opt)$/;"	f	file:
ObsCache	HAdapt.c	/^} ObsCache;                        \/* observation cache to save rotated observations *\/$/;"	t	typeref:struct:_ObsCache	file:
ObsInBuffer	HParm.c	/^int ObsInBuffer(ParmBuf pbuf)$/;"	f
Observation	HParm.h	/^} Observation;$/;"	t	typeref:struct:__anon68
OpenAsChannel	HParm.c	/^static ReturnStatus OpenAsChannel(ParmBuf pbuf, int maxObs, $/;"	f	file:
OpenAudioInput	HAudio.c	/^AudioIn OpenAudioInput(MemHeap *x, HTime *sampPeriod, HTime winDur, HTime frPeriod)$/;"	f
OpenAudioOutput	HAudio.c	/^AudioOut OpenAudioOutput(MemHeap *x, HTime *sampPeriod)$/;"	f
OpenBuffer	HParm.c	/^ParmBuf OpenBuffer(MemHeap *x, char *fn, int maxObs, FileFormat ff, $/;"	f
OpenExtBuffer	HParm.c	/^ParmBuf OpenExtBuffer(MemHeap *x, char *fn, int maxObs, $/;"	f
OpenIn	esignal.c	/^OpenIn(char     *filename,      \/* name of input file *\/$/;"	f
OpenLLF	HLat.c	/^LLFInfo *OpenLLF (char *fn)$/;"	f
OpenLabFile	HLabel.c	/^static FILE * OpenLabFile(char *fname, Boolean *isMLF)$/;"	f	file:
OpenOut	esignal.c	/^OpenOut(char        *filename,$/;"	f
OpenParmChannel	HParm.c	/^static ReturnStatus OpenParmChannel(ParmBuf pbuf,char *fname, int *ret_val)$/;"	f	file:
OpenWaveInput	HWave.c	/^Wave OpenWaveInput(MemHeap *x, char *fname, FileFormat fmt, HTime winDur, $/;"	f
OpenWaveOutput	HWave.c	/^Wave OpenWaveOutput(MemHeap *x, HTime *sampPeriod, long bufSize)$/;"	f
OutMLFEntry	HLabel.c	/^} OutMLFEntry;$/;"	t	typeref:struct:__anon26	file:
OutP	HModel.c	/^LogFloat OutP(Observation *x, HLink hmm, int state)$/;"	f
OutSamples	HAudio.c	/^static int OutSamples(AudioOut a)$/;"	f	file:
OutputAlign	HNet.c	/^static void OutputAlign(LArc *la,int format,FILE *file)$/;"	f	file:
OutputFloatField	HNet.c	/^static void OutputFloatField(char field,float val,Boolean bin,$/;"	f	file:
OutputIntField	HNet.c	/^static void OutputIntField(char field,int val,Boolean bin,$/;"	f	file:
PARAMETERS	HModel.c	/^   CLASS, XFORMWGTSET, CLASSXFORM, MMFIDMASK, PARAMETERS,$/;"	e	enum:__anon38	file:
PARENTXFORM	HModel.c	/^   XFORMKIND=90, PARENTXFORM, NUMXFORMS, XFORMSET,$/;"	e	enum:__anon38	file:
PARMKIND	HModel.c	/^   PARMKIND=120, $/;"	e	enum:__anon38	file:
PATHCHAR	HShell.h	482;"	d
PATHCHAR	HShell.h	485;"	d
PATHCHAR	HShell.h	488;"	d
PATHCHAR	HShell.h	492;"	d
PAT_ANYPATH	HLabel.h	/^   PAT_ANYPATH,   \/* pat is "* \/ name" and name is hashed *\/$/;"	e	enum:_MLFPatType
PAT_FIXED	HLabel.h	/^   PAT_FIXED,     \/* whole "pattern" is hashed *\/$/;"	e	enum:_MLFPatType
PAT_GENERAL	HLabel.h	/^   PAT_GENERAL    \/* general pattern - no hashing *\/$/;"	e	enum:_MLFPatType
PAT_LEN	HUtil.c	619;"	d	file:
PBStatus	HParm.h	/^} PBStatus;$/;"	t	typeref:enum:__anon69
PB_CLEARED	HParm.h	/^   PB_CLEARED   \/* Buffer has been emptied *\/$/;"	e	enum:__anon69
PB_FILLING	HParm.h	/^   PB_FILLING,  \/* Buffer is filling *\/$/;"	e	enum:__anon69
PB_INIT	HParm.h	/^   PB_INIT,     \/* Buffer is initialised and empty *\/$/;"	e	enum:__anon69
PB_STOPPED	HParm.h	/^   PB_STOPPED,  \/* Buffer has stopped but not yet empty *\/$/;"	e	enum:__anon69
PB_STOPPING	HParm.h	/^   PB_STOPPING, \/* Buffer is waiting for silence *\/$/;"	e	enum:__anon69
PB_WAITING	HParm.h	/^   PB_WAITING,  \/* Buffer is waiting for speech *\/$/;"	e	enum:__anon69
PBlock	HParm.c	/^PBlock;$/;"	t	typeref:struct:pblock	file:
PDEMOutP	HModel.c	/^Boolean PDEMOutP(Vector otvs, MixPDF *mp, LogFloat *mixp, LogFloat xwtdet)$/;"	f
PDUR	HModel.c	/^   NDUR, PDUR, GDUR, RELDUR, GENDUR,$/;"	e	enum:__anon38	file:
PHIdent	HUtil.c	/^static void PHIdent(ILink *models, HMMSet *hset)$/;"	f	file:
PHName	HUtil.c	/^static void PHName(ILink *models,HMMSet *hset)$/;"	f	file:
PHONE_BEAM	HExactMPE.c	/^static int PHONE_BEAM=4; \/* phones before & after...*\/$/;"	v	file:
PI	HMath.h	38;"	d
PI	HMath.h	40;"	d
PIndex	HUtil.c	/^static void PIndex(IntSet s)$/;"	f	file:
PInstInfo	HNet.c	/^PInstInfo;$/;"	t	typeref:struct:pinstinfo	file:
PIntRange	HUtil.c	/^static void PIntRange(IntSet s)$/;"	f	file:
PItemList	HUtil.c	/^char *PItemList(ILink *ilist, char *type, HMMSet *hset,$/;"	f
PItemSet	HUtil.c	/^static void PItemSet(ILink *ilist, char *type, HMMSet *hset)$/;"	f	file:
PLAINHS	HModel.h	/^enum _HSetKind {PLAINHS, SHAREDHS, TIEDHS, DISCRETEHS};$/;"	e	enum:_HSetKind
PLP	HParm.h	/^      PLP,                             \/* Standard PLP coefficients *\/$/;"	e	enum:_BaseParmKind
PMix	HUtil.c	/^static void PMix(ILink models, ILink *ilist, char *type,$/;"	f	file:
POISSOND	HModel.h	/^enum _DurKind {NULLD, POISSOND, GAMMAD, RELD, GEND};$/;"	e	enum:_DurKind
POutP	HModel.c	/^LogFloat POutP(HMMSet *hset,Observation *x, StateInfo *si)$/;"	f
PREAM_MAX	esignal.h	53;"	d
PREEMCOEF	HParm.c	/^   PREEMCOEF,     \/* Preemphasis Coefficient *\/$/;"	e	enum:__anon63	file:
PREQUAL	HModel.c	/^   NUMCLASSES, ADAPTKIND, PREQUAL, INPUTXFORM,$/;"	e	enum:__anon38	file:
PROGRESS	HLM.c	310;"	d	file:
PROJSIZE	HModel.c	/^   PROJSIZE,$/;"	e	enum:__anon38	file:
PRecInfo	HRec.h	/^typedef struct precinfo PRecInfo; \/* Private reconition information (HRec.c) *\/$/;"	t	typeref:struct:precinfo
PSetInfo	HRec.h	/^typedef struct psetinfo PSetInfo; \/* Private HMMSet information (HRec.c) *\/$/;"	t	typeref:struct:psetinfo
PState	HUtil.c	/^static void PState(ILink models, ILink *ilist, char *type, HMMSet *hset)$/;"	f	file:
PStatecomp	HUtil.c	/^static void PStatecomp(ILink models, ILink *ilist, char *type, $/;"	f	file:
PTRHASHSIZE	HModel.h	51;"	d
PURPLE	HGraf.h	/^enum _HColour { WHITE, YELLOW, ORANGE, RED, MAUVE, PURPLE, DARK_BLUE, $/;"	e	enum:_HColour
Pad	HDict.c	/^static void Pad(FILE *f, int nSp, int minSp)$/;"	f	file:
ParmBuf	HParm.h	/^typedef struct _ParmBuf  *ParmBuf;$/;"	t	typeref:struct:_ParmBuf
ParmBufRec	HParm.c	/^}ParmBufRec;$/;"	t	typeref:struct:_ParmBuf	file:
ParmFilter	HShell.h	/^   ParmFilter,      \/* parameter files input via HParm *\/$/;"	e	enum:__anon74
ParmKind	HParm.h	/^typedef short ParmKind;          \/* BaseParmKind + Qualifiers *\/$/;"	t
ParmKind2Str	HParm.c	/^char *ParmKind2Str(ParmKind kind, char *buf)$/;"	f
ParmOFilter	HShell.h	/^   ParmOFilter,     \/* parameter files output via HParm *\/$/;"	e	enum:__anon74
ParseComment	HShell.c	/^static char *ParseComment(Source *src,char *name)$/;"	f	file:
ParseConfIntVec	HAdapt.c	/^static IntVec ParseConfIntVec(MemHeap *x, char *inbuf)$/;"	f	file:
ParseNode	HAdapt.c	/^static Boolean ParseNode(RegNode *node, AdaptXForm *xform, $/;"	f	file:
ParseNumber	HNet.c	/^static LatFieldType ParseNumber(double *rval,char *buf)$/;"	f	file:
ParseString	HShell.c	/^char *ParseString(char *src, char *s)$/;"	f
ParseTree	HAdapt.c	/^static Boolean ParseTree(RegTree *rtree, AdaptXForm *xform)$/;"	f	file:
Path	HRec.h	/^typedef struct path Path;          \/* Traceback route *\/$/;"	t	typeref:struct:path
PathOf	HShell.c	/^char * PathOf(char *fn, char *s)$/;"	f
Perturb	HTrain.c	/^static void Perturb(int n, int n1, int n2)$/;"	f	file:
PhoneMEE	HExactMPE.c	/^static Boolean PhoneMEE = TRUE;  \/* repeat of config also used in HFBLat.c *\/$/;"	v	file:
PhoneMEE	HFBLat.c	/^static Boolean PhoneMEE = TRUE;      \/*IMPORTANT*\/           \/* If true and the MPE routines are called, do MPE, else MWE (word level) *\/$/;"	v	file:
PhoneMEEUseContext	HFBLat.c	/^static Boolean PhoneMEEUseContext = FALSE;                  \/*Compare phones-in-context.  I doubt you would want this true, anyway it makes little difference.*\/$/;"	v	file:
PlayAudio	HAudio.c	/^static void PlayAudio(AudioOut a, short *buf, int nSamples)$/;"	f	file:
PlayReplayBuffer	HAudio.c	/^void PlayReplayBuffer(AudioOut ao, AudioIn ai)$/;"	f
PrLog	HFB.c	/^void PrLog(LogDouble x)$/;"	f
PrVInfo	HShell.c	/^static void PrVInfo(char *s,char *sccs)$/;"	f	file:
PreComp	HRec.c	/^PreComp;$/;"	t	typeref:struct:precomp	file:
PreComp	HTrain.h	/^} PreComp;$/;"	t	typeref:struct:__anon88
PreEmphasise	HSigP.c	/^void PreEmphasise (Vector s, float k)$/;"	f
PrecomputeTMix	HModel.c	/^void PrecomputeTMix(HMMSet *hset, Observation *x, float tmThresh, int topM)$/;"	f
PrintAllHeapStats	HMem.c	/^void PrintAllHeapStats(void)$/;"	f
PrintArc	HArc.c	/^void PrintArc(FILE *f, HArc *a){$/;"	f
PrintArcInfo	HArc.c	/^void PrintArcInfo(FILE *f, ArcInfo *ai){$/;"	f
PrintArcs	HArc.c	/^void PrintArcs(FILE *f, HArc *a){$/;"	f
PrintChain	HNet.c	/^static void PrintChain(Network *wnet,HMMSet *hset)$/;"	f	file:
PrintConfig	HShell.c	/^void PrintConfig(void)$/;"	f
PrintHMMProfile	HModel.c	/^void PrintHMMProfile(FILE *f, HLink hmm)$/;"	f
PrintHSetProfile	HModel.c	/^void PrintHSetProfile(FILE *f, HMMSet *hset)$/;"	f
PrintHashUsage	HModel.c	/^static void PrintHashUsage(FILE *f, HMMSet *hset)$/;"	f	file:
PrintHeapStats	HMem.c	/^void PrintHeapStats(MemHeap *x)$/;"	f
PrintLabel	HLabel.c	/^static void PrintLabel(LLink p, int maxAux)$/;"	f	file:
PrintLinks	HNet.c	/^static void PrintLinks(NetLink *links,int nlinks)$/;"	f	file:
PrintList	HLabel.c	/^static void PrintList(LabList *ll)$/;"	f	file:
PrintNameTabStats	HLabel.c	/^void PrintNameTabStats(void)$/;"	f
PrintNode	HNet.c	/^static void PrintNode(NetNode *node,HMMSet *hset)$/;"	f	file:
PrintObservation	HParm.c	/^void PrintObservation(int i, Observation *o, int itemsPerLine)$/;"	f
PrintPDEstats	HModel.c	/^void PrintPDEstats()$/;"	f
PrintStdOpts	HShell.c	/^void PrintStdOpts(char *opt)$/;"	f
PrintTranscription	HLabel.c	/^void PrintTranscription(Transcription *t, char *title)$/;"	f
PrintTree	HVQ.c	/^static void PrintTree(VQNode n, CovKind ck)$/;"	f	file:
PrintVQTab	HVQ.c	/^void PrintVQTab(VQTable vqTab)$/;"	f
ProcessCrossWordLinks	HNet.c	/^void ProcessCrossWordLinks(MemHeap *heap,Lattice *lat,int xc)$/;"	f
ProcessObservation	HRec.c	/^void ProcessObservation(VRecInfo *vri,Observation *obs,int id, AdaptXForm *xform)$/;"	f
Pron	HDict.h	/^typedef struct _WordPron  *Pron;$/;"	t	typeref:struct:_WordPron
PronHolder	HNet.c	/^PronHolder;$/;"	t	typeref:struct:pronholder	file:
ProtectedFillBufferFromAudio	HAudio.c	/^static void ProtectedFillBufferFromAudio(AudioIn a,int min)$/;"	f	file:
PruneInfo	HFB.h	/^} PruneInfo;$/;"	t	typeref:struct:__anon18
Ptr	HMem.h	/^typedef void * Ptr;$/;"	t
PtrMap	HModel.h	/^} PtrMap;$/;"	t	typeref:struct:_PtrMap
PutAdaptXForm	HModel.c	/^static void PutAdaptXForm(HMMSet *hset, FILE *f, MLink q, AdaptXForm *xform, $/;"	f	file:
PutBaseClass	HModel.c	/^static void PutBaseClass(HMMSet *hset, FILE *f, MLink q, BaseClass *bclass, $/;"	f	file:
PutBias	HModel.c	/^static void PutBias(HMMSet *hset, FILE *f, MLink q, SVector m, $/;"	f	file:
PutCovar	HModel.c	/^static void PutCovar(HMMSet *hset, FILE *f, MLink q, STriMat m,$/;"	f	file:
PutDiscrete	HModel.c	/^void PutDiscrete(FILE *f, StreamElem *se, Boolean binary)$/;"	f
PutDiscreteWeights	HModel.c	/^void PutDiscreteWeights(FILE *f, StreamElem *se, Boolean binary)$/;"	f
PutDuration	HModel.c	/^static void PutDuration(HMMSet *hset, FILE *f, MLink q, SVector v,$/;"	f	file:
PutESIGHeaderInfo	HWave.c	/^void PutESIGHeaderInfo(FILE *f, Wave w)$/;"	f
PutHMMDef	HModel.c	/^static void PutHMMDef(HMMSet *hset, FILE *f, MLink m, Boolean withHdr,$/;"	f	file:
PutHTKHeaderInfo	HWave.c	/^static void PutHTKHeaderInfo(FILE *f, Wave w)$/;"	f	file:
PutInputXForm	HModel.c	/^static void PutInputXForm(HMMSet *hset, FILE *f, MLink q, InputXForm *xf, $/;"	f	file:
PutLinXForm	HModel.c	/^static void PutLinXForm(HMMSet *hset, FILE *f, MLink q, LinXForm *xf, $/;"	f	file:
PutMacroHdr	HModel.c	/^static void PutMacroHdr(HMMSet *hset, FILE *f, MLink m, char mType, $/;"	f	file:
PutMean	HModel.c	/^static void PutMean(HMMSet *hset, FILE *f, MLink q, SVector m, $/;"	f	file:
PutMixPDF	HModel.c	/^static void PutMixPDF(HMMSet *hset, FILE *f, MLink q, MixPDF *mp, $/;"	f	file:
PutMixWeight	HModel.c	/^void PutMixWeight(FILE *f, short repeatLast, short w, Boolean binary)$/;"	f
PutOptions	HModel.c	/^static void PutOptions(HMMSet *hset, FILE *f, Boolean binary)$/;"	f	file:
PutRegNode	HModel.c	/^static void PutRegNode(HMMSet *hset, FILE *f, RegNode *rnode, Boolean binary) $/;"	f	file:
PutRegTree	HModel.c	/^static void PutRegTree(HMMSet *hset, FILE *f, MLink q, RegTree *t, $/;"	f	file:
PutSWeights	HModel.c	/^static void PutSWeights(HMMSet *hset, FILE *f, MLink q, SVector v,$/;"	f	file:
PutStateInfo	HModel.c	/^static void PutStateInfo(HMMSet *hset, FILE *f, MLink q, StateInfo *si, $/;"	f	file:
PutSymbol	HModel.c	/^static void PutSymbol(FILE *f, Symbol sym, Boolean binary)$/;"	f	file:
PutTiedMixtures	HModel.c	/^void PutTiedMixtures(HMMSet *hset,FILE *f,int s,StreamElem *se,Boolean binary)$/;"	f
PutTiedWeight	HModel.c	/^void PutTiedWeight(FILE *f, short repeatLast, float w, Boolean binary)$/;"	f
PutTiedWeights	HModel.c	/^void PutTiedWeights(FILE *f, StreamElem *se, Boolean binary)$/;"	f
PutTransMat	HModel.c	/^static void PutTransMat(HMMSet *hset, FILE *f, MLink q, SMatrix m,$/;"	f	file:
PutTransform	HModel.c	/^static void PutTransform(HMMSet *hset, FILE *f, MLink q, SMatrix m,$/;"	f	file:
PutVariance	HModel.c	/^static void PutVariance(HMMSet *hset, FILE *f, MLink q, SVector v,$/;"	f	file:
PutWaveSample	HWave.c	/^void PutWaveSample(Wave w, long nSamples, short *buf)$/;"	f
PutXFormSet	HModel.c	/^static void PutXFormSet(HMMSet *hset, FILE *f, MLink q, XFormSet *xformSet, $/;"	f	file:
Q	HArc.h	/^  int Q;       \/*number of unique arcs.. *\/$/;"	m	struct:ArcInfoStruct
Q	HFB.h	/^  int Q;              \/* number of models in transcription *\/$/;"	m	struct:__anon17
Q	HFBLat.h	/^  int Q;$/;"	m	struct:__anon23
Q	esig_asc.c	39;"	d	file:
QSCmpArcs	HNet.c	/^static int QSCmpArcs(const void *v1,const void *v2)$/;"	f	file:
QSCmpNodes	HNet.c	/^static int QSCmpNodes(const void *v1,const void *v2)$/;"	f	file:
QUOTE	esig_asc.c	40;"	d	file:
Quinphone	HExactMPE.c	/^static Boolean Quinphone = FALSE; \/* repeat of config also used in HFBLat.c *\/$/;"	v	file:
Quinphone	HFBLat.c	/^static Boolean Quinphone = FALSE;            \/* Set this TRUE if this is a quinphone model set.  The code for quinphones depends on the naming conventions $/;"	v	file:
RANDF	HMath.c	1623;"	d	file:
RANDF	HMath.c	1627;"	d	file:
RANLIB	Makefile	/^RANLIB = ranlib$/;"	m
RAWENERGY	HParm.c	/^   RAWENERGY,     \/* Use raw energy *\/$/;"	e	enum:__anon63	file:
RCLASS	HModel.c	/^   RCLASS=110, REGTREE, NODE, TNODE,$/;"	e	enum:__anon38	file:
RED	HGraf.h	/^enum _HColour { WHITE, YELLOW, ORANGE, RED, MAUVE, PURPLE, DARK_BLUE, $/;"	e	enum:_HColour
REGTREE	HModel.c	/^   RCLASS=110, REGTREE, NODE, TNODE,$/;"	e	enum:__anon38	file:
RELD	HModel.h	/^enum _DurKind {NULLD, POISSOND, GAMMAD, RELD, GEND};$/;"	e	enum:_DurKind
RELDUR	HModel.c	/^   NDUR, PDUR, GDUR, RELDUR, GENDUR,$/;"	e	enum:__anon38	file:
REQUIRED	esignal.h	90;"	d
RMatch	HShell.c	/^Boolean RMatch(char *s,char *p,int slen,int minplen,int numstars)$/;"	f
RandInit	HMath.c	/^void RandInit(int seed)$/;"	f
RandomValue	HMath.c	/^float RandomValue(void)$/;"	f
RawReadFloat	HShell.c	/^Boolean RawReadFloat(Source *src, float *x, int n, Boolean bin, Boolean swap)$/;"	f
RawReadInt	HShell.c	/^Boolean RawReadInt(Source *src, int *i, int n, Boolean bin, Boolean swap)$/;"	f
RawReadShort	HShell.c	/^Boolean RawReadShort(Source *src, short *s, int n, Boolean bin, Boolean swap)$/;"	f
ReOrderComponents	HModel.c	/^static void ReOrderComponents(HMMSet *hset)$/;"	f	file:
ReOrderList	HRec.c	/^static void ReOrderList(NetNode *node)$/;"	f	file:
ReWriteString	HShell.c	/^char *ReWriteString(char *s,char *dst, char q)$/;"	f
ReadAlign	HNet.c	/^static int ReadAlign(Lattice *lat,LArc *la,char *buf)$/;"	f	file:
ReadAsBuffer	HParm.c	/^Boolean ReadAsBuffer(ParmBuf pbuf, Observation *o)$/;"	f
ReadAsTable	HParm.c	/^void ReadAsTable(ParmBuf pbuf, int index, Observation *o)$/;"	f
ReadAsciiArray	esig_asc.c	/^ReadAsciiArray(Array    *array,$/;"	f	file:
ReadAsciiAxisNames	esig_asc.c	/^ReadAsciiAxisNames(char ***axis_names, int rank, FILE *file)$/;"	f	file:
ReadAsciiData	esig_asc.c	/^ReadAsciiData(FieldSpec *field, FILE *file)$/;"	f	file:
ReadAsciiDims	esig_asc.c	/^ReadAsciiDims(short *rank, long **dim, FILE *file)$/;"	f	file:
ReadAsciiDouble	esig_asc.c	/^ReadAsciiDouble(double *x, FILE *file)$/;"	f	file:
ReadAsciiEscape	esig_asc.c	/^ReadAsciiEscape(unsigned long   *val,$/;"	f	file:
ReadAsciiFieldList	esig_asc.c	/^ReadAsciiFieldList(FieldList    *listp,$/;"	f
ReadAsciiFieldSpec	esig_asc.c	/^ReadAsciiFieldSpec(FieldSpec    **field,$/;"	f	file:
ReadAsciiFieldStruct	esig_asc.c	/^ReadAsciiFieldStruct(FieldSpec  **field,$/;"	f	file:
ReadAsciiMisc	esig_asc.c	/^ReadAsciiMisc(int rank, char **units, double *scale,$/;"	f	file:
ReadAsciiName	esig_asc.c	/^ReadAsciiName(int depth, char **names, FILE *file)$/;"	f	file:
ReadAsciiNewline	esig_asc.c	/^ReadAsciiNewline(FILE *file)$/;"	f	file:
ReadAsciiOccurrence	esig_asc.c	/^ReadAsciiOccurrence(short *occurrence, FILE *file)$/;"	f	file:
ReadAsciiRecord	esig_asc.c	/^ReadAsciiRecord(FieldSpec **fields,$/;"	f
ReadAsciiSamples	esig_asc.c	/^ReadAsciiSamples(void       *data,$/;"	f
ReadAsciiString	esig_asc.c	/^ReadAsciiString(char **string, FILE *file)$/;"	f	file:
ReadAsciiType	esig_asc.c	/^ReadAsciiType(short *type, FILE *file)$/;"	f	file:
ReadAudio	HAudio.c	/^static void ReadAudio(AudioIn a, short *buf, int nSamples)$/;"	f	file:
ReadBoNGram	HLM.c	/^static void ReadBoNGram(LModel *lm,char *fn)$/;"	f	file:
ReadCh	HUtil.c	/^static void ReadCh(void)$/;"	f	file:
ReadChanFiles	HParm.c	/^static ReturnStatus ReadChanFiles(ChannelInfo *chan)$/;"	f	file:
ReadConfName	HShell.c	/^static Boolean ReadConfName(Source *src, char *s)$/;"	f	file:
ReadConfigFile	HShell.c	/^static ReturnStatus ReadConfigFile(char *fname)$/;"	f	file:
ReadDict	HDict.c	/^ReturnStatus ReadDict(char *dictFn, Vocab *voc)$/;"	f
ReadDictWord	HDict.c	/^ReturnStatus ReadDictWord(Source *src,LabId *labels,float *prob, int *num)$/;"	f
ReadESIGPHeader	HParm.c	/^Boolean ReadESIGPHeader(FILE *f, long *nSamp, long *sampP, short *sampS,$/;"	f
ReadEdrArray	esig_edr.c	/^ReadEdrArray(Array  *array,$/;"	f	file:
ReadEdrData	esig_edr.c	/^ReadEdrData(FieldSpec *field,$/;"	f	file:
ReadEdrFieldList	esig_edr.c	/^ReadEdrFieldList(FieldList  *listp,  \/* output variable *\/$/;"	f
ReadEdrFieldSpec	esig_edr.c	/^ReadEdrFieldSpec(FILE   *file,$/;"	f	file:
ReadEdrRecord	esig_edr.c	/^ReadEdrRecord(FieldSpec **fields,$/;"	f
ReadEdrSamples	esig_edr.c	/^ReadEdrSamples(void         *data,$/;"	f
ReadEdrString	esig_edr.c	/^ReadEdrString(char  **string,$/;"	f	file:
ReadEsignalHeader	HWave.c	/^Boolean ReadEsignalHeader(FILE *f, long *nSamp, long *sampP, short *sampS,$/;"	f
ReadFieldList	esignal.c	/^ReadFieldList(FieldList *list,$/;"	f
ReadFloat	HShell.c	/^Boolean ReadFloat(Source *src, float *x, int n, Boolean binary)$/;"	f
ReadHTKHeader	HWave.c	/^Boolean ReadHTKHeader(FILE *f, long *nSamp, long *sampP, short *sampS, $/;"	f
ReadHeader	esignal.c	/^ReadHeader(char     **version,  \/* version (output) *\/$/;"	f
ReadIOConfig	HParm.c	/^static IOConfig ReadIOConfig(IOConfig p)$/;"	f	file:
ReadInt	HShell.c	/^Boolean ReadInt(Source *src, int *i, int n, Boolean binary)$/;"	f
ReadIntVec	HMath.c	/^Boolean ReadIntVec(Source *src, IntVec v, Boolean binary)$/;"	f
ReadLMWord	HLM.c	/^static char *ReadLMWord(char *buf)$/;"	f	file:
ReadLModel	HLM.c	/^LModel *ReadLModel(MemHeap *heap,char *fn)$/;"	f
ReadLabel	HLabel.c	/^Boolean ReadLabel(FILE *f, char *buf)$/;"	f
ReadLattice	HNet.c	/^Lattice *ReadLattice(FILE *file, MemHeap *heap, Vocab *voc, $/;"	f
ReadLine	HShell.c	/^Boolean ReadLine(Source *src,char *s)$/;"	f
ReadMatBigram	HLM.c	/^static void ReadMatBigram(LModel *lm,char *fn)$/;"	f	file:
ReadMatrix	HMath.c	/^Boolean ReadMatrix(Source *src, Matrix m, Boolean binary)$/;"	f
ReadNGrams	HLM.c	/^static int ReadNGrams(NGramLM *nglm,int n,int count, Boolean bin)$/;"	f	file:
ReadNativeArray	esig_nat.c	/^ReadNativeArray(Array *array,$/;"	f	file:
ReadNativeData	esig_nat.c	/^ReadNativeData(FieldSpec *field,$/;"	f	file:
ReadNativeFieldList	esig_nat.c	/^ReadNativeFieldList(FieldList *listp, \/* output variable *\/$/;"	f
ReadNativeFieldSpec	esig_nat.c	/^ReadNativeFieldSpec(FILE *file)$/;"	f	file:
ReadNativeRecord	esig_nat.c	/^ReadNativeRecord(FieldSpec  **fields,$/;"	f
ReadNativeSamples	esig_nat.c	/^ReadNativeSamples(void      *data,$/;"	f
ReadNativeString	esig_nat.c	/^ReadNativeString(char **string, FILE *file)$/;"	f	file:
ReadObs	HParm.c	/^static void ReadObs(ParmBuf pbuf, int outRow,Observation *o)$/;"	f	file:
ReadOneLattice	HNet.c	/^Lattice *ReadOneLattice(Source *src, MemHeap *heap, Vocab *voc, $/;"	f
ReadOptSpace	esig_asc.c	/^ReadOptSpace(FILE *file)$/;"	f	file:
ReadPreamble	esignal.c	/^ReadPreamble(char **version,    \/* version (output) *\/$/;"	f
ReadRawString	HShell.c	/^Boolean ReadRawString(Source *src, char *s)$/;"	f
ReadRecord	esignal.c	/^ReadRecord(FieldSpec    **fields,$/;"	f
ReadRow	HLM.c	/^int ReadRow(Vector v)$/;"	f
ReadSamples	esignal.c	/^ReadSamples(void        *data,$/;"	f
ReadShort	HShell.c	/^Boolean ReadShort(Source *src, short *s, int n, Boolean binary)$/;"	f
ReadShortVec	HMath.c	/^Boolean ReadShortVec(Source *src, ShortVec v, Boolean binary)$/;"	f
ReadSpace	esig_asc.c	/^ReadSpace(FILE *file)$/;"	f	file:
ReadString	HShell.c	/^Boolean ReadString(Source *src, char *s){  $/;"	f
ReadStringWithLen	HShell.c	/^Boolean ReadStringWithLen(Source *src, char *s, int buflen)$/;"	f
ReadTriMat	HMath.c	/^Boolean ReadTriMat(Source *src, TriMat m, Boolean binary)$/;"	f
ReadUntilLine	HShell.c	/^void ReadUntilLine (Source *src, char *s)$/;"	f
ReadVector	HMath.c	/^Boolean ReadVector(Source *src, Vector v, Boolean binary)$/;"	f
Realft	HSigP.c	/^void Realft (Vector s)$/;"	f
RecordHeap	HMem.c	/^static void RecordHeap(MemHeap *x)$/;"	f	file:
RecordSize	esignal.c	/^RecordSize(FieldList list,$/;"	f
RecoverArcsForNode	HLat.c	/^void RecoverArcsForNode(Lattice *lat, LNode *ln)$/;"	f
RedrawHButton	HGraf.c	/^void RedrawHButton(HButton *btn)$/;"	f
RedrawHButton	HGraf.null.c	/^void RedrawHButton(HButton *btn)$/;"	f
RedrawHButton	HGraf_WIN32.c	/^void RedrawHButton(HButton *btn)$/;"	f
RedrawHButtonList	HGraf.c	/^void RedrawHButtonList(HButton *btnlst)$/;"	f
RedrawHButtonList	HGraf.null.c	/^void RedrawHButtonList(HButton *btnlst)$/;"	f
RedrawHButtonList	HGraf_WIN32.c	/^void RedrawHButtonList(HButton *btnlst)$/;"	f
RefAlign	HRec.c	/^static void RefAlign(Align *align)$/;"	f	file:
RefC2LPC	HSigP.c	/^void RefC2LPC (Vector k, Vector a)$/;"	f
RefPath	HRec.c	/^static void RefPath(Path *path)$/;"	f	file:
RegAcc	HAdapt.c	/^} RegAcc;$/;"	t	typeref:struct:__anon8	file:
RegNode	HModel.h	/^} RegNode ;$/;"	t	typeref:struct:_RegNode
RegTree	HModel.h	/^typedef struct RegTree {$/;"	s
RegTree	HModel.h	/^} RegTree;             $/;"	t	typeref:struct:RegTree
Register	HShell.c	/^void Register(char *ver, char *sccs)$/;"	f
RegisterExtFileName	HShell.c	/^char * RegisterExtFileName(char *s)$/;"	f
Regress	HSigP.c	/^static void Regress(float *data, int vSize, int n, int step, int offset,$/;"	f	file:
RelToken	HRec.c	/^RelToken;$/;"	t	typeref:struct:reltoken	file:
ReplayBuf	HAudio.c	/^}ReplayBuf;$/;"	t	typeref:struct:__anon13	file:
ResetAccCache	HAdapt.c	/^void ResetAccCache(void)$/;"	f
ResetChannelSession	HParm.c	/^void ResetChannelSession(char *confName)$/;"	f
ResetComp	HAdapt.c	/^static void ResetComp(MixPDF *mp)$/;"	f	file:
ResetHMMPreComps	HTrain.c	/^void ResetHMMPreComps(HLink hmm, int nStreams)$/;"	f
ResetHMMSet	HModel.c	/^void ResetHMMSet(HMMSet *hset)$/;"	f
ResetHMMWtAccs	HTrain.c	/^void ResetHMMWtAccs(HLink hmm, int nStreams)$/;"	f
ResetHeap	HMem.c	/^void ResetHeap(MemHeap *x)$/;"	f
ResetHooks	HUtil.c	/^void ResetHooks(HMMSet *hset,char *what)$/;"	f
ResetObsCache	HAdapt.c	/^void ResetObsCache(void)$/;"	f
ResetPreComps	HTrain.c	/^void ResetPreComps(HMMSet *hset)$/;"	f
ResetReplayBuf	HAudio.c	/^static void ResetReplayBuf(AudioIn a)$/;"	f	file:
ResetStacks	HFB.c	/^static void ResetStacks(AlphaBeta *ab)$/;"	f	file:
ResetUtilItemList	HUtil.c	/^void ResetUtilItemList()$/;"	f
ResetXFormHMMSet	HAdapt.c	/^void ResetXFormHMMSet(HMMSet *hset)$/;"	f
RestoreAccs	HTrain.c	/^void RestoreAccs(HMMSet *hset){ RestoreAccsParallel(hset,0); }$/;"	f
RestoreAccsParallel	HTrain.c	/^void RestoreAccsParallel(HMMSet *hset, int index)$/;"	f
RestorePDF	HTrain.c	/^void RestorePDF(MixPDF *mp, int index){$/;"	f
RetrieveCommandLine	HShell.c	/^char *RetrieveCommandLine(void)$/;"	f
RetrieveESIGFieldList	HWave.c	/^void RetrieveESIGFieldList(HFieldList *fList)$/;"	f
ReturnStatus	HShell.h	/^typedef enum {FAIL=-1, SUCCESS=0} ReturnStatus;$/;"	t	typeref:enum:__anon72
RotRows	HMath.c	/^static void RotRows(DMatrix M, int i, int k, $/;"	f	file:
RunSilDet	HParm.c	/^void RunSilDet(ParmBuf pbuf,Boolean cleared)$/;"	f
S	HFB.h	/^  int S;              \/* number of data streams *\/$/;"	m	struct:__anon17
S	HFBLat.h	/^  int S;$/;"	m	struct:__anon23
S	HMap.c	/^static int S;$/;"	v	file:
S	HUtil.h	/^   int S;            \/* num Streams = hset->swidth[0] *\/$/;"	m	struct:__anon90
SANITY	HRec.c	45;"	d	file:
SAVECOMPRESSED	HParm.c	/^   SAVECOMPRESSED,\/* Save output files in compressed form *\/$/;"	e	enum:__anon63	file:
SAVEWITHCRC	HParm.c	/^   SAVEWITHCRC,   \/* Add crc check to output files *\/$/;"	e	enum:__anon63	file:
SCHAR	esignal.h	72;"	d
SCHAR_COMPLEX	esignal.h	79;"	d
SCHCX_FMT	esig_asc.c	91;"	d	file:
SCHCX_W	esig_asc.c	90;"	d	file:
SCHCX_WFMT	esig_asc.c	92;"	d	file:
SCH_FMT	esig_asc.c	67;"	d	file:
SCH_W	esig_asc.c	66;"	d	file:
SCH_WFMT	esig_asc.c	68;"	d	file:
SCRIBE	HWave.h	/^        SCRIBE,            \/* UK Scribe databases *\/$/;"	e	enum:__anon102
SDES1	HWave.h	/^        SDES1,             \/* Sound Designer I format *\/$/;"	e	enum:__anon102
SDes1Header	HWave.c	/^} SDes1Header;$/;"	t	typeref:struct:__anon96	file:
SELFCALSILDET	HParm.c	/^   SELFCALSILDET, \/* Self calibrating silence detection on each utterance *\/$/;"	e	enum:__anon63	file:
SEMIT	HModel.h	/^enum _XFormKind {MLLRMEAN, MLLRCOV, MLLRVAR, CMLLR, SEMIT};$/;"	e	enum:_XFormKind
SET_totalProbScale	HFBLat.c	144;"	d	file:
SEntry	HLM.h	/^} SEntry;$/;"	t	typeref:struct:sentry
SHAREDHS	HModel.h	/^enum _HSetKind {PLAINHS, SHAREDHS, TIEDHS, DISCRETEHS};$/;"	e	enum:_HSetKind
SHELL	Makefile	/^SHELL = \/bin\/sh$/;"	m
SHIFTKEY	HGraf.h	/^enum _KeyType {NORMALKEY, SHIFTKEY, COMMANDKEY, CONTROLKEY, $/;"	e	enum:_KeyType
SHORT	esignal.h	70;"	d
SHORTEN	HWave.c	/^   SHORTEN,     \/* CUED Shorten *\/$/;"	e	enum:_CompressType	file:
SHORTPACK	HWave.c	/^   SHORTPACK,   \/* MIT shortpack-v0 *\/$/;"	e	enum:_CompressType	file:
SHORT_COMPLEX	esignal.h	78;"	d
SHRCX_FMT	esig_asc.c	87;"	d	file:
SHRCX_W	esig_asc.c	86;"	d	file:
SHRCX_WFMT	esig_asc.c	88;"	d	file:
SHR_FMT	esig_asc.c	59;"	d	file:
SHR_W	esig_asc.c	58;"	d	file:
SHR_WFMT	esig_asc.c	60;"	d	file:
SIDEXFORMEXT	HParm.c	/^   SIDEXFORMEXT, \/* extension for use with side-based xforms *\/$/;"	e	enum:__anon63	file:
SIDEXFORMMASK	HParm.c	/^   SIDEXFORMMASK,\/* mask for use with side-based xforms *\/$/;"	e	enum:__anon63	file:
SILDISCARD	HParm.c	/^   SILDISCARD,    \/* Energy below which frames discarded when calibrating *\/$/;"	e	enum:__anon63	file:
SILENERGY	HParm.c	/^   SILENERGY,     \/* Silence detector threshold *\/$/;"	e	enum:__anon63	file:
SILFLOOR	HParm.c	/^   SILFLOOR,      \/* Silence floor in dBs *\/$/;"	e	enum:__anon63	file:
SILGLCHCOUNT	HParm.c	/^   SILGLCHCOUNT,  \/* Silence glitch count *\/$/;"	e	enum:__anon63	file:
SILMARGIN	HParm.c	/^   SILMARGIN,     \/* Margin of silence around speech *\/$/;"	e	enum:__anon63	file:
SILSEQCOUNT	HParm.c	/^   SILSEQCOUNT,   \/* Silence sequence count *\/$/;"	e	enum:__anon63	file:
SIMPLEDIFFS	HParm.c	/^   SIMPLEDIFFS,   \/* Use simple differences *\/$/;"	e	enum:__anon63	file:
SING_QUOTE	HShell.h	80;"	d
SMAX	HShell.h	77;"	d
SMatrix	HMem.h	/^typedef Matrix SMatrix;    \/* shared matrix[1..nrows][1..ncols] *\/$/;"	t
SMatrixElemSize	HMem.c	/^size_t SMatrixElemSize(int nrows,int ncols)$/;"	f
SOURCEFORMAT	HParm.c	/^   SOURCEFORMAT,  \/* FileFormat *\/$/;"	e	enum:__anon63	file:
SOURCEKIND	HParm.c	/^   SOURCEKIND,    \/* ParmKind *\/ $/;"	e	enum:__anon63	file:
SOURCERATE	HParm.c	/^   SOURCERATE,    \/* Source sample rate in 100ns *\/$/;"	e	enum:__anon63	file:
SOutP	HModel.c	/^LogFloat SOutP(HMMSet *hset, int s, Observation *x, StreamElem *se)$/;"	f
SP	HArc.h	/^  Boolean SP; \/*short pause.  If (SP) rest of variables are NULL.*\/$/;"	m	struct:_Acoustic
SP	HRec.c	58;"	d	file:
SPCGLCHCOUNT	HParm.c	/^   SPCGLCHCOUNT,  \/* Speech glitch count *\/$/;"	e	enum:__anon63	file:
SPCSEQCOUNT	HParm.c	/^   SPCSEQCOUNT,   \/* Speech sequence count *\/$/;"	e	enum:__anon63	file:
SPEECHTHRESH	HParm.c	/^   SPEECHTHRESH,  \/* Speech detector threshold *\/$/;"	e	enum:__anon63	file:
SRAND	HMath.c	1624;"	d	file:
SRAND	HMath.c	1628;"	d	file:
STATE	HModel.c	/^   STATE, TMIX, MIXTURE, STREAM, SWEIGHTS,$/;"	e	enum:__anon38	file:
STATE_KEY	HUtil.c	/^   TRANSP_KEY, STATE_KEY, DUR_KEY, WEIGHTS_KEY,$/;"	e	enum:__anon89	file:
STREAM	HModel.c	/^   STATE, TMIX, MIXTURE, STREAM, SWEIGHTS,$/;"	e	enum:__anon38	file:
STREAMINFO	HModel.c	/^   NUMSTATES, STREAMINFO, VECSIZE, $/;"	e	enum:__anon38	file:
STREAM_KEY	HUtil.c	/^   MIX_KEY, MEAN_KEY, STREAM_KEY, COV_KEY$/;"	e	enum:__anon89	file:
STRINGARG	HShell.h	/^typedef enum {SWITCHARG, STRINGARG, INTARG, FLOATARG, NOARG} ArgKind;$/;"	e	enum:__anon79
STR_ALLOC_SIZE	esig_asc.c	37;"	d	file:
STR_FIELD	HNet.c	/^typedef enum {UNK_FIELD, STR_FIELD, INT_FIELD, FLT_FIELD} LatFieldType;$/;"	e	enum:__anon57	file:
STriMat	HMem.h	/^typedef Matrix STriMat;    \/* shared matrix[1..nrows][1..i] (lower tri) *\/$/;"	t
STriMatElemSize	HMem.c	/^size_t STriMatElemSize(int size)$/;"	f
SUBLATHASHSIZE	HNet.c	308;"	d	file:
SUCCESS	HShell.h	/^typedef enum {FAIL=-1, SUCCESS=0} ReturnStatus;$/;"	e	enum:__anon72
SUN16_AUDIO	HAudio.c	107;"	d	file:
SUNAU8	HWave.h	/^        SUNAU8,            \/* Sun 8 bit MuLaw .au format *\/$/;"	e	enum:__anon102
SUNSO	HWave.c	/^   SUNSO,      \/* big-endian ie hi byte first *\/$/;"	e	enum:_SrcOrder	file:
SUPPORT_EXACT_CORRECTNESS	HExactMPE.h	38;"	d
SUPPORT_QUINPHONE	HFBLat.h	119;"	d
SVD	HMath.c	/^void SVD(DMatrix A, DMatrix U, DMatrix V, DVector d)$/;"	f
SVector	HMem.h	/^typedef Vector SVector;    \/* shared vector[1..size]   *\/$/;"	t
SVectorElemSize	HMem.c	/^size_t SVectorElemSize(int size){ return (size+1)*sizeof(float)+2*sizeof(Ptr); }$/;"	f
SWEIGHTS	HModel.c	/^   STATE, TMIX, MIXTURE, STREAM, SWEIGHTS,$/;"	e	enum:__anon38	file:
SWITCHARG	HShell.h	/^typedef enum {SWITCHARG, STRINGARG, INTARG, FLOATARG, NOARG} ArgKind;$/;"	e	enum:__anon79
S_EOF	HLabel.c	/^   S_LBB, S_LBA, S_UTS, S_EOF$/;"	e	enum:_ScribeLab	file:
S_LBA	HLabel.c	/^   S_LBB, S_LBA, S_UTS, S_EOF$/;"	e	enum:_ScribeLab	file:
S_LBB	HLabel.c	/^   S_LBB, S_LBA, S_UTS, S_EOF$/;"	e	enum:_ScribeLab	file:
S_UTS	HLabel.c	/^   S_LBB, S_LBA, S_UTS, S_EOF$/;"	e	enum:_ScribeLab	file:
SafeCopyString	HNet.c	142;"	d	file:
SameArcs	HArc.c	/^Boolean SameArcs(LArc *a1, LArc *a2){ \/*word arcs have same times & phones *\/$/;"	f
SamplesInAudio	HAudio.c	/^int SamplesInAudio(AudioIn a)$/;"	f
SamplesToPlay	HAudio.c	/^int SamplesToPlay(AudioOut a)$/;"	f
SampsInAudioFrame	HAudio.c	/^int SampsInAudioFrame(AudioIn a)$/;"	f
SampsInWaveFrame	HWave.c	/^int SampsInWaveFrame(Wave w)$/;"	f
SaveAllXForms	HModel.c	/^void SaveAllXForms(HMMSet *hset, char *fname, Boolean binary)$/;"	f
SaveBuffer	HParm.c	/^ReturnStatus SaveBuffer(ParmBuf pbuf, char *fname, FileFormat ff)$/;"	f
SaveCommandLine	HShell.c	/^static void SaveCommandLine(int argc, char **argv)$/;"	f	file:
SaveESPSLabels	HLabel.c	/^static void SaveESPSLabels( FILE *f, Transcription *t)$/;"	f	file:
SaveHMMList	HModel.c	/^ReturnStatus SaveHMMList(HMMSet *hset, char *fname)$/;"	f
SaveHMMSet	HModel.c	/^ReturnStatus SaveHMMSet(HMMSet *hset, char *hmmDir, char *hmmExt, char *macroExt, Boolean binary)$/;"	f
SaveHTKLabels	HLabel.c	/^static void SaveHTKLabels( FILE *f, Transcription *t) $/;"	f	file:
SaveInOneFile	HModel.c	/^void SaveInOneFile(HMMSet *hset, char *fname)$/;"	f
SaveInReplay	HAudio.c	/^static void SaveInReplay(AudioIn a, short x)$/;"	f	file:
SaveInputXForm	HModel.c	/^void SaveInputXForm(HMMSet *hset, InputXForm *xf, char *fname, Boolean binary)$/;"	f
SaveMacros	HModel.c	/^static void SaveMacros(FILE *f, HMMSet *hset, short fidx, Boolean binary)$/;"	f	file:
SaveOneXForm	HModel.c	/^void SaveOneXForm(HMMSet *hset, AdaptXForm *xform, char *fname, Boolean binary)$/;"	f
SaveToMasterfile	HLabel.c	/^ReturnStatus SaveToMasterfile(char *fname)$/;"	f
SavedMixes	HFBLat.c	/^static MixOcc *SavedMixes[SMAX]; \/* [1..S][1..nPDFs[s]] *\/$/;"	v	file:
SavedMixesSize	HFBLat.c	/^static int SavedMixesSize[SMAX]; $/;"	v	file:
ScaleAccs	HTrain.c	/^double ScaleAccs(HMMSet *hset, float wt)$/;"	f
ScaleAccsParallel	HTrain.c	/^double ScaleAccsParallel(HMMSet *hset, float wt, int index)$/;"	f
ScalePDF	HTrain.c	/^double ScalePDF(MixPDF *mpdf, int vSize, int index, float wt)$/;"	f
ScanLLF	HLat.c	/^Boolean ScanLLF (LLFInfo *llf, char *fn, char *ext)$/;"	f
Schar	esignal.h	/^typedef signed char			Schar;$/;"	t
ScharComplex	esignal.h	/^typedef struct {Schar	real, imag;}	ScharComplex;$/;"	t	typeref:struct:__anon5
ScribeLab	HLabel.c	/^typedef enum _ScribeLab ScribeLab;$/;"	t	typeref:enum:_ScribeLab	file:
ScriptWord	HShell.c	/^static char * ScriptWord(void)$/;"	f	file:
SegLength	HTrain.c	/^int SegLength(SegStore ss, int i)$/;"	f
SegStore	HTrain.h	/^typedef struct _SegStoreRec * SegStore;$/;"	t	typeref:struct:_SegStoreRec
SegStoreRec	HTrain.h	/^}SegStoreRec;$/;"	t	typeref:struct:_SegStoreRec
Sequence	HTrain.h	/^typedef SequenceInfo *Sequence;$/;"	t
SequenceCov	HTrain.c	/^void SequenceCov(Sequence ss, CovKind ck, Covariance cov, Vector mean)$/;"	f
SequenceInfo	HTrain.h	/^}SequenceInfo;$/;"	t	typeref:struct:__anon81
SequenceMean	HTrain.c	/^void SequenceMean(Sequence ss, Vector mean)$/;"	f
SetAInfo	HAdapt.c	/^static void SetAInfo(HMMSet *hset, AdaptXForm *xform, Boolean parent)$/;"	f	file:
SetAccCache	HAdapt.c	/^static void SetAccCache(AdaptXForm *xform)$/;"	f	file:
SetActive	HGraf.c	/^void SetActive(HButton *btnlst, Boolean active)$/;"	f
SetActive	HGraf.null.c	/^void SetActive(HButton *btnlst, Boolean active)$/;"	f
SetActive	HGraf_WIN32.c	/^void SetActive(HButton *btnlst, Boolean active)$/;"	f
SetAudioSpDetParms	HParm.c	/^static void SetAudioSpDetParms(ParmBuf pbuf, float dur, Boolean warn)$/;"	f	file:
SetBaseAccsTime	HAdapt.c	/^void SetBaseAccsTime(int t)$/;"	f
SetBeamTaper	HFB.c	/^static void SetBeamTaper(PruneInfo *p, short *qDms, int Q, int T)$/;"	f	file:
SetBeta	HFB.c	/^static LogDouble SetBeta(AlphaBeta *ab, FBInfo *fbInfo, UttInfo *utt)$/;"	f	file:
SetBetaPlus	HFBLat.c	/^static void SetBetaPlus()$/;"	f	file:
SetButtonLit	HGraf.c	/^void SetButtonLit(HButton *btn, Boolean lit)$/;"	f
SetButtonLit	HGraf.null.c	/^void SetButtonLit(HButton *btn, Boolean lit)$/;"	f
SetButtonLit	HGraf_WIN32.c	/^void SetButtonLit(HButton *btn, Boolean lit)$/;"	f
SetChannel	HParm.c	/^ReturnStatus SetChannel(char *confName)$/;"	f
SetCodeStyle	HParm.c	/^static void SetCodeStyle(IOConfig cf)$/;"	f	file:
SetCorrectness	HFBLat.c	/^static void SetCorrectness(FBLatInfo *fbInfo, Lattice *numLat){  $/;"	f	file:
SetCorrectnessAsError	HFBLat.c	/^static void SetCorrectnessAsError(FBLatInfo *fbInfo, Lattice *numLat){    \/* re the "CALCASERROR" option, other version of approx MPE. *\/$/;"	f	file:
SetCovKindUsage	HModel.c	/^void SetCovKindUsage (HMMSet *hset)$/;"	f
SetDoingFourthAcc	HFBLat.c	/^void SetDoingFourthAcc(Boolean DO, int indx){$/;"	f
SetEntryState	HRec.c	/^static void SetEntryState(NetNode *node,TokenSet *src)$/;"	f	file:
SetExtSpDetParms	HParm.c	/^static void SetExtSpDetParms(ParmBuf pbuf, float dur, Boolean warn)$/;"	f	file:
SetFieldOrdering	esignal.c	/^SetFieldOrdering(FieldList  *list,$/;"	f
SetHook	HMem.c	/^void SetHook(Ptr m, Ptr ptr)$/;"	f
SetIndexes	HModel.c	/^void SetIndexes(HMMSet *hset)$/;"	f
SetInputXFormConfig	HParm.c	/^static void SetInputXFormConfig(IOConfig cf, InputXForm *xf)$/;"	f	file:
SetMInfo	HAdapt.c	/^static void SetMInfo(HMMSet *hset, AdaptXForm *xform)$/;"	f	file:
SetMacroHook	HUtil.c	/^void SetMacroHook(MLink ml,Ptr hook)$/;"	f
SetMacroUse	HUtil.c	/^void SetMacroUse(MLink ml,int use)$/;"	f
SetMinDurs	HFB.c	/^void SetMinDurs(HMMSet *hset)$/;"	f
SetModelBetaPlus	HFBLat.c	/^void SetModelBetaPlus(int t, int q){$/;"	f
SetNewConfig	HParm.c	/^void SetNewConfig(char *confName)$/;"	f
SetNodeOcc	HAdapt.c	/^static float SetNodeOcc(RegNode *node, BaseClass *bclass)$/;"	f	file:
SetNullContexts	HNet.c	/^void SetNullContexts(Lattice *lat,int xc)$/;"	f
SetNullLRecurse	HNet.c	/^void SetNullLRecurse(PronHolder *pInst,Lattice *lat,int xc)$/;"	f
SetNullRRecurse	HNet.c	/^void SetNullRRecurse(PronHolder *pInst,Lattice *lat,int xc)$/;"	f
SetObsCache	HAdapt.c	/^static void SetObsCache(AdaptXForm *xform, Boolean parent)$/;"	f	file:
SetOcct	HFB.c	/^static void SetOcct(HLink hmm, int q, Vector occt, Vector *occa,$/;"	f	file:
SetParentXForm	HAdapt.c	/^void SetParentXForm(HMMSet *hset, AdaptXForm *xform)$/;"	f
SetParmHMMSet	HParm.c	/^void SetParmHMMSet(Ptr aset)$/;"	f
SetParsePhysicalHMM	HUtil.c	/^void SetParsePhysicalHMM(Boolean parse)$/;"	f
SetPruningLevels	HRec.c	/^void SetPruningLevels(VRecInfo *vri,int maxBeam,LogFloat genBeam,$/;"	f
SetScriptFile	HShell.c	/^ReturnStatus SetScriptFile(char *fn)$/;"	f
SetSelfCalSpDetParms	HParm.c	/^static void SetSelfCalSpDetParms(ParmBuf pbuf)$/;"	f	file:
SetSemiTiedAvCov	HAdapt.c	/^static void SetSemiTiedAvCov(HMMSet *hset)$/;"	f	file:
SetSemiTiedVFloor	HModel.c	/^void SetSemiTiedVFloor(HMMSet *hset)$/;"	f
SetSet	HUtil.c	/^void SetSet(IntSet s)$/;"	f
SetSilDetParms	HParm.c	/^static void SetSilDetParms(ParmBuf pbuf, TriState silMeasure)$/;"	f	file:
SetStreamWidths	HParm.c	/^void  SetStreamWidths(ParmKind pk, int size, short *swidth, Boolean *eSep)$/;"	f
SetTraceFB	HFB.c	/^void SetTraceFB(void)$/;"	f
SetUpForCoding	HParm.c	/^static void SetUpForCoding(MemHeap *x, IOConfig cf, int frSize)$/;"	f	file:
SetUse	HMem.c	/^void SetUse(Ptr m,int n)$/;"	f
SetVFloor	HModel.c	/^void SetVFloor(HMMSet *hset, Vector *vFloor, float minVar)$/;"	f
SetVol	HAudio.c	/^static void SetVol(AudioOut a, float volume)$/;"	f	file:
SetVolume	HAudio.c	/^void SetVolume(AudioOut a, int volume)$/;"	f
SetWaveSpDetParms	HParm.c	/^static void SetWaveSpDetParms(ParmBuf pbuf)$/;"	f	file:
SetXForm	HAdapt.c	/^void SetXForm(HMMSet *hset, AdaptXForm *xform)$/;"	f
Setotprob	HFB.c	/^static void Setotprob(AlphaBeta *ab, FBInfo *fbInfo, ParmBuf pbuf, $/;"	f	file:
Setotprob	HFBLat.c	/^static void Setotprob(int t)$/;"	f	file:
ShStrP	HFB.c	/^static float * ShStrP(HMMSet *hset, StreamElem *ste, Vector v, int t,$/;"	f	file:
ShStrP	HFBLat.c	/^static float * ShStrP(Vector v, int t, StreamElem *ste, AdaptXForm *xform, MemHeap *amem)$/;"	f	file:
Short2DProb	HModel.c	/^LogFloat Short2DProb(short s)$/;"	f
ShortComplex	esignal.h	/^typedef struct {short	real, imag;}	ShortComplex;$/;"	t	typeref:struct:__anon4
ShortVec	HMem.h	/^typedef short *ShortVec;   \/* short vector[1..size] *\/$/;"	t
ShortVecElemSize	HMem.c	/^size_t ShortVecElemSize(int size) { return (size+1)*sizeof(short); }$/;"	f
ShortVecSize	HMem.c	/^int ShortVecSize(ShortVec v)$/;"	f
ShowAccs	HTrain.c	/^void ShowAccs(HMMSet *hset, UPDSet uFlags){ ShowAccsParallel(hset, uFlags, 0); }$/;"	f
ShowAccsParallel	HTrain.c	/^void ShowAccsParallel(HMMSet *hset, UPDSet uFlags, int index)$/;"	f
ShowClusterSet	HTrain.c	/^void ShowClusterSet(ClusterSet *cs)$/;"	f
ShowDMatrix	HMath.c	/^void ShowDMatrix(char * title,DMatrix m,int maxCols,int maxRows)$/;"	f
ShowDVector	HMath.c	/^void ShowDVector(char * title, DVector v,int maxTerms)$/;"	f
ShowDict	HDict.c	/^void ShowDict(Vocab *voc)$/;"	f
ShowIntVec	HMath.c	/^void ShowIntVec(char * title, IntVec v,int maxTerms)$/;"	f
ShowLattice	HLat.c	/^void ShowLattice(Lattice *lat)$/;"	f
ShowMatrix	HMath.c	/^void ShowMatrix(char * title,Matrix m,int maxCols,int maxRows)$/;"	f
ShowShortVec	HMath.c	/^void ShowShortVec(char * title, ShortVec v,int maxTerms)$/;"	f
ShowTriMat	HMath.c	/^void ShowTriMat(char * title,TriMat m,int maxCols,int maxRows)$/;"	f
ShowVector	HMath.c	/^void ShowVector(char * title,Vector v,int maxTerms)$/;"	f
ShowWaveInfo	HWave.c	/^static void ShowWaveInfo(Wave w)$/;"	f	file:
ShowWords	HNet.c	/^void ShowWords(Lattice *lat,Vocab *voc,HMMSetCxtInfo *hci)$/;"	f
SignalFillBufferAndStopAudio	HAudio.c	/^static void SignalFillBufferAndStopAudio(AudioIn a)$/;"	f	file:
SkipComment	HShell.c	/^void SkipComment(Source *src)$/;"	f
SkipComment	esig_asc.c	/^SkipComment(FILE *file)$/;"	f	file:
SkipLine	HShell.c	/^Boolean SkipLine(Source *src)$/;"	f
SkipSpace	esig_asc.c	/^SkipSpace(int ch, FILE *file)$/;"	f	file:
SkipSpaces	HUtil.c	/^static void SkipSpaces(void)$/;"	f	file:
SkipWhiteSpace	HShell.c	/^void SkipWhiteSpace(Source *src)$/;"	f
SortArcs	HArc.c	/^void SortArcs( ArcInfo *aInfo )$/;"	f
SortEntries	HVQ.c	/^static VQNode SortEntries(VQNode *list, short rootId)$/;"	f	file:
Source	HShell.h	/^} Source;$/;"	t	typeref:struct:__anon75
SpRMatch	HShell.c	/^static Boolean SpRMatch(char *s,char *p,char *spkr,$/;"	f	file:
SpecLogModulus	HSigP.c	/^void SpecLogModulus(Vector s, Vector m, Boolean invert)$/;"	f
SpecModulus	HSigP.c	/^void SpecModulus(Vector s, Vector m)$/;"	f
SpecPhase	HSigP.c	/^void SpecPhase(Vector s, Vector m)$/;"	f
SplitPath	HLabel.c	/^static void SplitPath(char *path, char *name, char *subdir, char *tryspec)$/;"	f	file:
SplitVectors	HTrain.c	/^static void SplitVectors(int n, int n1, int n2)$/;"	f	file:
SrcOrder	HWave.c	/^}SrcOrder;$/;"	t	typeref:enum:_SrcOrder	file:
SrcPosition	HShell.c	/^char *SrcPosition(Source src, char *s)$/;"	f
StackInitialised	HArc.c	/^Boolean StackInitialised=FALSE;$/;"	v
StartAudi	HAudio.c	/^static void StartAudi(AudioIn a)$/;"	f	file:
StartAudioInput	HAudio.c	/^void StartAudioInput(AudioIn a, int sig)$/;"	f
StartAudioOutput	HAudio.c	/^void StartAudioOutput(AudioOut a, long nSamples, short *buf)$/;"	f
StartAudioSignal	HAudio.c	/^static void StartAudioSignal(void)$/;"	f	file:
StartBuffer	HParm.c	/^void StartBuffer(ParmBuf pbuf)$/;"	f
StartOfWord	HArc.h	215;"	d
StartOfWord	HExactMPE.c	93;"	d	file:
StartOfWord	HFBLat.c	133;"	d	file:
StartRecognition	HRec.c	/^void StartRecognition(VRecInfo *vri,Network *net,$/;"	f
StartTime	HFBLat.c	/^static int StartTime=0;     \/* This is a value that we use to help calculating the PreComp's of$/;"	v	file:
StateElem	HModel.h	/^} StateElem;$/;"	t	typeref:struct:__anon48
StateInfo	HModel.h	/^} StateInfo;$/;"	t	typeref:struct:__anon47
StatsInfo	HLat.c	/^} StatsInfo;$/;"	t	typeref:struct:_StatsInfo	file:
StepAlpha	HFB.c	/^static void StepAlpha(AlphaBeta *ab, int t, int *start, int *end, $/;"	f	file:
StepAlpha	HFBLat.c	/^static void StepAlpha(int t)$/;"	f	file:
StepBack	HFB.c	/^static Boolean StepBack(FBInfo *fbInfo, UttInfo *utt, char * datafn)$/;"	f	file:
StepForward	HFB.c	/^static void StepForward(FBInfo *fbInfo, UttInfo *utt)$/;"	f	file:
StepForward	HFBLat.c	/^static void StepForward()$/;"	f	file:
StepHMM1	HRec.c	/^static void StepHMM1(NetNode *node) \/* Model internal propagation NBEST *\/$/;"	f	file:
StepHMM2	HRec.c	/^static void StepHMM2(NetNode *node) $/;"	f	file:
StepInst1	HRec.c	/^static void StepInst1(NetNode *node) \/* First pass of token propagation (Internal) *\/$/;"	f	file:
StepInst2	HRec.c	/^static void StepInst2(NetNode *node) \/* Second pass of token propagation (External) *\/$/;"	f	file:
StepWord1	HRec.c	/^static void StepWord1(NetNode *node) \/* Just invalidate the tokens *\/$/;"	f	file:
StepWord2	HRec.c	/^static void StepWord2(NetNode *node) \/* Update the path - may be repeated *\/$/;"	f	file:
StopAndFlushAudio	HAudio.c	/^static void StopAndFlushAudio(AudioIn a, Boolean deferred)$/;"	f	file:
StopAudi	HAudio.c	/^static void StopAudi(AudioIn a)$/;"	f	file:
StopAudioInput	HAudio.c	/^void StopAudioInput(AudioIn a)$/;"	f
StopAudioSignal	HAudio.c	/^static void StopAudioSignal(void)$/;"	f	file:
StopBuffer	HParm.c	/^void StopBuffer(ParmBuf pbuf)$/;"	f
StoreAdaptCov	HAdapt.c	/^static Boolean StoreAdaptCov(AdaptXForm *xform)$/;"	f	file:
StoreAdaptMean	HAdapt.c	/^static Boolean StoreAdaptMean(AdaptXForm *xform)$/;"	f	file:
StoreESIGFieldList	HWave.c	/^void StoreESIGFieldList(HFieldList fList)$/;"	f
StoreItem	HTrain.c	/^void StoreItem(Sequence seq, Ptr item)$/;"	f
StoreMLFEntry	HLabel.c	/^static void StoreMLFEntry(MLFEntry *e)$/;"	f	file:
StoreObsCache	HAdapt.c	/^static Boolean StoreObsCache(AdaptXForm *xform)$/;"	f	file:
StoreTree	HVQ.c	/^static void StoreTree(FILE *f, VQNode n, CovKind ck, short s)$/;"	f	file:
StoreVQTab	HVQ.c	/^void StoreVQTab(VQTable vqTab, char *tabFN)$/;"	f
Str2AdaptKind	HModel.c	/^AdaptKind Str2AdaptKind(char *str)$/;"	f
Str2BaseClassKind	HModel.c	/^BaseClassKind Str2BaseClassKind(char *str)$/;"	f
Str2Format	HWave.c	/^FileFormat Str2Format(char *fmt)$/;"	f
Str2ParmKind	HParm.c	/^ParmKind Str2ParmKind(char *str)$/;"	f
Str2XFormKind	HModel.c	/^XFormKind Str2XFormKind(char *str)$/;"	f
StrArrFromRect	strarr.c	/^StrArrFromRect(long *dim, void *data)$/;"	f
StrArrLen	strarr.c	/^StrArrLen(char **str_arr)$/;"	f
StrArrMaxLen	strarr.c	/^StrArrMaxLen(char **str_arr)$/;"	f
StrArrToRect	strarr.c	/^StrArrToRect(char **strarr, long **dimenp, void **datap)$/;"	f
StrCKind	HShell.h	/^   StrCKind,            \/* string, optionally in dble quotes *\/$/;"	e	enum:__anon76
StrDup	esignal.c	/^StrDup(char *str)$/;"	f
StreamElem	HModel.h	/^}StreamElem;$/;"	t	typeref:struct:__anon46
SubCorrectness	HExactMPE.c	/^static float SubCorrectness = -1;   \/* repeat of config also used in HFBLat.c *\/$/;"	v	file:
SubFieldOrder	esignal.c	/^SubFieldOrder(FieldList list, char *prefix)$/;"	f	file:
SubLArc	HLat.c	/^typedef struct _SubLArc SubLArc;$/;"	t	typeref:struct:_SubLArc	file:
SubLNode	HLat.c	/^typedef struct _SubLNode SubLNode;$/;"	t	typeref:struct:_SubLNode	file:
SubLatDef	HNet.h	/^} SubLatDef;$/;"	t	typeref:struct:sublatdef
SubLatList	HNet.c	/^Lattice *SubLatList(Lattice *lat, Lattice *tail, int depth)$/;"	f
SubLattice	HNet.c	/^void SubLattice(Lattice *newlat,NodeId thisNode, NodeId latStart,NodeId latEnd)$/;"	f
SubstFName	HShell.c	/^void SubstFName(char *fname, char *s)$/;"	f
SummarisePruning	HFB.c	/^static void SummarisePruning(PruneInfo *p, int Q, int T)$/;"	f	file:
SunAU8Header	HWave.c	/^} SunAU8Header;$/;"	t	typeref:struct:__anon97	file:
SwapAdaptXForms	HAdapt.c	/^static void SwapAdaptXForms(AdaptXForm *xform, AdaptXForm *paxform)$/;"	f	file:
SwapInt32	HShell.c	/^void SwapInt32(int32 *p)$/;"	f
SwapMLLRCovMLLRMean	HAdapt.c	/^static void SwapMLLRCovMLLRMean(AdaptXForm *xform, AdaptXForm *paxform)$/;"	f	file:
SwapShort	HShell.c	/^void SwapShort(short *p)$/;"	f
SwapXForm	HAdapt.c	/^static void SwapXForm(HMMSet *hset, AdaptXForm *xform)$/;"	f	file:
Symbol	HModel.c	/^} Symbol;$/;"	t	typeref:enum:__anon38	file:
SyncBuffers	HParm.c	/^Boolean SyncBuffers(ParmBuf pbuf,ParmBuf pbuf2)$/;"	f
SyncStr	HLM.c	/^static void SyncStr(char *buf,char *str)$/;"	f	file:
T	HArc.h	/^  int T;       \/* time is 1..T. *\/$/;"	m	struct:ArcInfoStruct
T	HFB.h	/^  int T;              \/* number of frames in utterance *\/$/;"	m	struct:__anon17
T	HFBLat.h	/^  int T;$/;"	m	struct:__anon23
TARGETFORMAT	HParm.c	/^   TARGETFORMAT,  \/* FileFormat *\/$/;"	e	enum:__anon63	file:
TARGETKIND	HParm.c	/^   TARGETKIND,    \/* ParmKind *\/$/;"	e	enum:__anon63	file:
TARGETRATE	HParm.c	/^   TARGETRATE,    \/* Target sample rate in 100ns *\/$/;"	e	enum:__anon63	file:
TFuncX11	HGraf.c	/^static int   TFuncX11[4] = {$/;"	v	file:
THIRDWINDOW	HParm.c	/^   THIRDWINDOW,$/;"	e	enum:__anon63	file:
TIEDHS	HModel.h	/^enum _HSetKind {PLAINHS, SHAREDHS, TIEDHS, DISCRETEHS};$/;"	e	enum:_HSetKind
TIMIT	HWave.h	/^        TIMIT,             \/* Prototype TIMIT database *\/$/;"	e	enum:__anon102
TIMIThdr	HWave.c	/^} TIMIThdr;$/;"	t	typeref:struct:__anon94	file:
TMAttachAccs	HTrain.c	/^void TMAttachAccs(HMMSet *hset, MemHeap *x, int nPara)$/;"	f
TMIX	HModel.c	/^   STATE, TMIX, MIXTURE, STREAM, SWEIGHTS,$/;"	e	enum:__anon38	file:
TMProb	HModel.h	/^}TMProb;$/;"	t	typeref:struct:__anon44
TMShowAccs	HTrain.c	/^void TMShowAccs(HMMSet *hset, int index)$/;"	f
TMZeroAccs	HTrain.c	/^void TMZeroAccs(HMMSet *hset, int start, int end)$/;"	f
TMixRec	HModel.h	/^} TMixRec;$/;"	t	typeref:struct:__anon45
TNODE	HModel.c	/^   RCLASS=110, REGTREE, NODE, TNODE,$/;"	e	enum:__anon38	file:
TPI	HMath.h	41;"	d
TRANSP	HModel.c	/^   DURATION, INVDIAGCOV, TRANSP, DPROB, LLTCOV, LLTCOVAR,$/;"	e	enum:__anon38	file:
TRANSP_KEY	HUtil.c	/^   TRANSP_KEY, STATE_KEY, DUR_KEY, WEIGHTS_KEY,$/;"	e	enum:__anon89	file:
TRCOMMA	HLabel.c	/^enum _TrSymbol{TRNULL,TRNUM,TRSTR,TREOL,TRLEV,TRCOMMA,TREOF};$/;"	e	enum:_TrSymbol	file:
TREE	HModel.h	/^enum _AdaptKind {TREE, BASE};$/;"	e	enum:_AdaptKind
TREOF	HLabel.c	/^enum _TrSymbol{TRNULL,TRNUM,TRSTR,TREOL,TRLEV,TRCOMMA,TREOF};$/;"	e	enum:_TrSymbol	file:
TREOL	HLabel.c	/^enum _TrSymbol{TRNULL,TRNUM,TRSTR,TREOL,TRLEV,TRCOMMA,TREOF};$/;"	e	enum:_TrSymbol	file:
TRI_UNDEF	HParm.h	/^   TRI_UNDEF=-1     \/* -1 *\/$/;"	e	enum:__anon67
TRLEV	HLabel.c	/^enum _TrSymbol{TRNULL,TRNUM,TRSTR,TREOL,TRLEV,TRCOMMA,TREOF};$/;"	e	enum:_TrSymbol	file:
TRNULL	HLabel.c	/^enum _TrSymbol{TRNULL,TRNUM,TRSTR,TREOL,TRLEV,TRCOMMA,TREOF};$/;"	e	enum:_TrSymbol	file:
TRNUM	HLabel.c	/^enum _TrSymbol{TRNULL,TRNUM,TRSTR,TREOL,TRLEV,TRCOMMA,TREOF};$/;"	e	enum:_TrSymbol	file:
TRSTR	HLabel.c	/^enum _TrSymbol{TRNULL,TRNUM,TRSTR,TREOL,TRLEV,TRCOMMA,TREOF};$/;"	e	enum:_TrSymbol	file:
TRUE	HShell.h	/^typedef enum {FALSE=0, TRUE=1} Boolean;$/;"	e	enum:__anon73
TRUE	HShell.h	90;"	d
TRUE	esignal.h	48;"	d
TRUE_dup	HParm.h	/^   TRUE_dup=TRUE,   \/*  1 *\/$/;"	e	enum:__anon67
TYPE_ORDER	esignal.h	97;"	d
T_ACC	HAdapt.c	58;"	d	file:
T_ADT	HAdapt.c	57;"	d	file:
T_ALD	HTrain.c	61;"	d	file:
T_ALF	HFB.c	59;"	d	file:
T_ALL	HNet.c	55;"	d	file:
T_ARC	HArc.c	56;"	d	file:
T_ARC2	HArc.c	57;"	d	file:
T_AUD	HAudio.c	37;"	d	file:
T_BTR	HModel.c	61;"	d	file:
T_BUF	HParm.c	57;"	d	file:
T_CAL	HTrain.c	58;"	d	file:
T_CDI	HTrain.c	59;"	d	file:
T_CGE	HTrain.c	55;"	d	file:
T_CHK	HModel.c	55;"	d	file:
T_CHP	HMem.c	36;"	d	file:
T_CLC	HTrain.c	56;"	d	file:
T_CPX	HParm.c	58;"	d	file:
T_CST	HNet.c	53;"	d	file:
T_CXT	HNet.c	52;"	d	file:
T_DCM	HTrain.c	57;"	d	file:
T_DET	HAudio.c	36;"	d	file:
T_DET	HParm.c	62;"	d	file:
T_DIC	HDict.c	37;"	d	file:
T_EXF	HShell.c	54;"	d	file:
T_EXP	HLat.c	60;"	d	file:
T_FB	HLat.c	59;"	d	file:
T_FRS	HAdapt.c	64;"	d	file:
T_GMX	HModel.c	62;"	d	file:
T_HASH	HLabel.c	39;"	d	file:
T_HTKL	HLabel.c	38;"	d	file:
T_IOP	HShell.c	53;"	d	file:
T_ITM	HUtil.c	53;"	d	file:
T_LLF	HLat.c	63;"	d	file:
T_MAC	HModel.c	59;"	d	file:
T_MAT	HLabel.c	36;"	d	file:
T_MAT	HParm.c	63;"	d	file:
T_MEL	HSigP.c	51;"	d	file:
T_MEM	HLat.c	61;"	d	file:
T_MHASH	HLabel.c	35;"	d	file:
T_MHP	HMem.c	35;"	d	file:
T_MIX	HFB.c	62;"	d	file:
T_MLF	HLabel.c	34;"	d	file:
T_MOD	HNet.c	54;"	d	file:
T_MRG	HLat.c	64;"	d	file:
T_NAC	HTrain.c	60;"	d	file:
T_NGEN	HRec.c	41;"	d	file:
T_OBC	HAdapt.c	62;"	d	file:
T_OBS	HParm.c	61;"	d	file:
T_OCC	HFB.c	60;"	d	file:
T_OCC	HUtil.c	54;"	d	file:
T_OPEN	HWave.c	103;"	d	file:
T_OPT	HFB.c	57;"	d	file:
T_ORP	HModel.c	60;"	d	file:
T_OUT	HFB.c	63;"	d	file:
T_PAR	HModel.c	57;"	d	file:
T_PBS	HParm.c	59;"	d	file:
T_PMP	HModel.c	58;"	d	file:
T_PRU	HFB.c	58;"	d	file:
T_PRUN	HLat.c	58;"	d	file:
T_QUA	HParm.c	60;"	d	file:
T_RUN	HAudio.c	38;"	d	file:
T_SAV	HLabel.c	40;"	d	file:
T_SEQ	HTrain.c	54;"	d	file:
T_STC	HAudio.c	35;"	d	file:
T_STK	HMem.c	37;"	d	file:
T_SUBD	HLabel.c	37;"	d	file:
T_SWP	HAdapt.c	63;"	d	file:
T_SXF	HAdapt.c	61;"	d	file:
T_TIM	HFB.c	66;"	d	file:
T_TIM	HFBLat.c	77;"	d	file:
T_TIO	HLM.c	47;"	d	file:
T_TMX	HFB.c	65;"	d	file:
T_TOK	HModel.c	56;"	d	file:
T_TOP	HAdapt.c	56;"	d	file:
T_TOP	HAudio.c	34;"	d	file:
T_TOP	HDict.c	36;"	d	file:
T_TOP	HFB.c	56;"	d	file:
T_TOP	HFBLat.c	76;"	d	file:
T_TOP	HLat.c	57;"	d	file:
T_TOP	HMap.c	66;"	d	file:
T_TOP	HMem.c	34;"	d	file:
T_TOP	HModel.c	54;"	d	file:
T_TOP	HParm.c	56;"	d	file:
T_TOP	HTrain.c	53;"	d	file:
T_TOP	HUtil.c	52;"	d	file:
T_TRA	HFB.c	61;"	d	file:
T_TRAN	HLat.c	62;"	d	file:
T_TRE	HAdapt.c	59;"	d	file:
T_UPD	HFB.c	64;"	d	file:
T_UPD	HMap.c	67;"	d	file:
T_XFD	HModel.c	64;"	d	file:
T_XFM	HAdapt.c	60;"	d	file:
T_XFM	HModel.c	63;"	d	file:
TermHGraf	HGraf.c	/^void TermHGraf()$/;"	f
TermHGraf	HGraf.null.c	/^void TermHGraf()$/;"	f
TermHGraf	HGraf_WIN32.c	/^void TermHGraf()$/;"	f
TermScanner	HModel.c	/^static void TermScanner(Source *src)$/;"	f	file:
TidyBaseAccs	HAdapt.c	/^void TidyBaseAccs()$/;"	f
TimeToNFrames	HArc.c	/^int TimeToNFrames(float time, ArcInfo *aInfo){$/;"	f
Timer	HGraf.c	/^static void Timer(int n)$/;"	f	file:
ToMergeLatNodesBackw	HLat.c	/^Boolean ToMergeLatNodesBackw(Lattice *lat, LNode *ln)$/;"	f
ToMergeLatNodesForw	HLat.c	/^Boolean ToMergeLatNodesForw(Lattice *lat, LNode *ln)$/;"	f
TokSetMerge	HRec.c	/^static void TokSetMerge(TokenSet *res,Token *cmp,TokenSet *src)$/;"	f	file:
Token	HModel.c	/^} Token;$/;"	t	typeref:struct:__anon40	file:
Token	HRec.h	/^Token;$/;"	t	typeref:struct:token
TokenSet	HRec.c	/^TokenSet;$/;"	t	typeref:struct:tokenset	file:
TotMixInSet	HMap.c	/^static int TotMixInSet(HMMSet *hset)$/;"	f	file:
TotalComps	HParm.c	/^static int TotalComps(int nStatic, ParmKind pk)$/;"	f	file:
Touch	HModel.c	/^void Touch(int *flag)$/;"	f
TouchV	HMem.c	/^void TouchV(Ptr m)$/;"	f
TrAcc	HTrain.h	/^} TrAcc;$/;"	t	typeref:struct:__anon84
TrSymbol	HLabel.c	/^typedef enum _TrSymbol TrSymbol;$/;"	t	typeref:enum:_TrSymbol	file:
TraceAlphaBeta	HFB.c	/^static void TraceAlphaBeta(AlphaBeta *ab, int t, int startq, int endq, LogDouble pr)$/;"	f	file:
TraceOcc	HFB.c	/^static void TraceOcc(AlphaBeta *ab, UttInfo *utt, int t)$/;"	f	file:
TracePath	HRec.c	/^void TracePath(FILE *file,Path *path)$/;"	f
TrackButtons	HGraf.c	/^ButtonId TrackButtons(HButton *btnlist, HEventRec hev)$/;"	f
TrackButtons	HGraf.null.c	/^ButtonId TrackButtons(HButton *btnlist, HEventRec hev)$/;"	f
TrackButtons	HGraf_WIN32.c	/^ButtonId TrackButtons(HButton *btnlist, HEventRec hev)$/;"	f
Transcription	HLabel.h	/^}Transcription;$/;"	t	typeref:struct:__anon27
TranscriptionFromLattice	HRec.c	/^Transcription *TranscriptionFromLattice(MemHeap *heap,Lattice *lat,int N)$/;"	f
TreeCluster	HTrain.c	/^ClusterSet *TreeCluster(MemHeap *x, Sequence vpool, int nc, $/;"	f
TreeType	HVQ.h	/^} TreeType;$/;"	t	typeref:enum:__anon92
Tri2DMat	HAdapt.c	/^static void Tri2DMat (DMatrix m1, DMatrix m2)$/;"	f	file:
Tri2Mat	HMath.c	/^void Tri2Mat (TriMat m1, Matrix m2)$/;"	f
TriMat	HMem.h	/^typedef Matrix TriMat;     \/* matrix[1..nrows][1..i] (lower triangular) *\/$/;"	t
TriMatElemSize	HMem.c	/^size_t TriMatElemSize(int size)$/;"	f
TriMatSize	HMem.c	/^int TriMatSize(TriMat m)$/;"	f
TriState	HParm.h	/^TriState;$/;"	t	typeref:enum:__anon67
TriStrip	HLabel.c	/^void TriStrip(char *s)$/;"	f
TrimSampFreq	HAudio.c	/^static int TrimSampFreq(int f)$/;"	f	file:
TypeCode	esignal.c	/^TypeCode(char *name)$/;"	f
TypeName	esignal.c	/^TypeName(int type    \/* numeric data-type code *\/ )$/;"	f
TypeOrder	esignal.c	/^TypeOrder(FieldList list)$/;"	f
Types	esignal.c	/^static short    Types[] =$/;"	v	file:
UCHAR	esignal.h	73;"	d
UCH_FMT	esig_asc.c	71;"	d	file:
UCH_W	esig_asc.c	70;"	d	file:
UCH_WFMT	esig_asc.c	72;"	d	file:
ULN_FMT	esig_asc.c	55;"	d	file:
ULN_W	esig_asc.c	54;"	d	file:
ULN_WFMT	esig_asc.c	56;"	d	file:
ULONG	esignal.h	69;"	d
UNDEFF	HWave.h	/^        UNDEFF$/;"	e	enum:__anon102
UNIX	HShell.h	66;"	d
UNKNOWN	esignal.h	102;"	d
UNKNOWNSO	HWave.c	/^   UNKNOWNSO   \/* unknown source byte order *\/$/;"	e	enum:_SrcOrder	file:
UNK_FIELD	HNet.c	/^typedef enum {UNK_FIELD, STR_FIELD, INT_FIELD, FLT_FIELD} LatFieldType;$/;"	e	enum:__anon57	file:
UNUSED	HWave.h	/^        UNUSED,$/;"	e	enum:__anon102
UPDSet	HTrain.h	/^typedef enum _UPDSet UPDSet;$/;"	t	typeref:enum:_UPDSet
UPMAP	HTrain.h	/^enum _UPDSet{UPMEANS=1,UPVARS=2,UPTRANS=4,UPMIXES=8,UPXFORM=16,UPMAP=32,UPSEMIT=64};$/;"	e	enum:_UPDSet
UPMEANS	HTrain.h	/^enum _UPDSet{UPMEANS=1,UPVARS=2,UPTRANS=4,UPMIXES=8,UPXFORM=16,UPMAP=32,UPSEMIT=64};$/;"	e	enum:_UPDSet
UPMIXES	HTrain.h	/^enum _UPDSet{UPMEANS=1,UPVARS=2,UPTRANS=4,UPMIXES=8,UPXFORM=16,UPMAP=32,UPSEMIT=64};$/;"	e	enum:_UPDSet
UPSEMIT	HTrain.h	/^enum _UPDSet{UPMEANS=1,UPVARS=2,UPTRANS=4,UPMIXES=8,UPXFORM=16,UPMAP=32,UPSEMIT=64};$/;"	e	enum:_UPDSet
UPTRANS	HTrain.h	/^enum _UPDSet{UPMEANS=1,UPVARS=2,UPTRANS=4,UPMIXES=8,UPXFORM=16,UPMAP=32,UPSEMIT=64};$/;"	e	enum:_UPDSet
UPVARS	HTrain.h	/^enum _UPDSet{UPMEANS=1,UPVARS=2,UPTRANS=4,UPMIXES=8,UPXFORM=16,UPMAP=32,UPSEMIT=64};$/;"	e	enum:_UPDSet
UPXFORM	HTrain.h	/^enum _UPDSet{UPMEANS=1,UPVARS=2,UPTRANS=4,UPMIXES=8,UPXFORM=16,UPMAP=32,UPSEMIT=64};$/;"	e	enum:_UPDSet
USEHAMMING	HParm.c	/^   USEHAMMING,    \/* Apply Hamming Window *\/$/;"	e	enum:__anon63	file:
USEMAC	HModel.c	/^   BEGINHMM, USEMAC, ENDHMM, NUMMIXES, $/;"	e	enum:__anon38	file:
USEPOWER	HParm.c	/^   USEPOWER,      \/* Use power instead of magnitude *\/$/;"	e	enum:__anon63	file:
USER	HParm.h	/^      USER,                            \/* Arbitrary user specified data *\/$/;"	e	enum:_BaseParmKind
USESILDET	HParm.c	/^   USESILDET,     \/* Enable speech\/silence detection *\/$/;"	e	enum:__anon63	file:
USHORT	esignal.h	71;"	d
USH_FMT	esig_asc.c	63;"	d	file:
USH_W	esig_asc.c	62;"	d	file:
USH_WFMT	esig_asc.c	64;"	d	file:
Uchar	esignal.h	/^typedef unsigned char			Uchar;$/;"	t
Ulong	esignal.h	/^typedef unsigned long			Ulong;$/;"	t
UnGetCh	HShell.c	/^void UnGetCh(int c, Source *src)$/;"	f
UnRecordHeap	HMem.c	/^static void UnRecordHeap(MemHeap *x)$/;"	f	file:
UnWeightCepstrum	HSigP.c	/^void UnWeightCepstrum(Vector c, int start, int count, int cepLiftering)$/;"	f
UnlinkAlign	HRec.c	/^static void UnlinkAlign(Align *align)$/;"	f	file:
UnlinkPath	HRec.c	/^static void UnlinkPath(Path *path)$/;"	f	file:
Untouch	HModel.c	/^void Untouch(int *flag)$/;"	f
UntouchV	HMem.c	/^void UntouchV(Ptr m)$/;"	f
UpMixParms	HFB.c	/^static void UpMixParms(FBInfo *fbInfo, int q, HLink hmm, HLink al_hmm,$/;"	f	file:
UpMixParms	HFBLat.c	/^static double UpMixParms(int q, HLink hmm, int t, DVector aqt, $/;"	f	file:
UpSkipTranParms	HFBLat.c	/^void UpSkipTranParms(int q, int t){$/;"	f
UpTranParms	HFB.c	/^static void UpTranParms(FBInfo *fbInfo, HLink hmm, int t, int q,$/;"	f	file:
UpTranParms	HFBLat.c	/^static void UpTranParms(int t, int q){ $/;"	f	file:
UpdateAccCache	HAdapt.c	/^void UpdateAccCache(double Lr, Vector svec, MixPDF *mp)$/;"	f
UpdateBaseAccs	HAdapt.c	/^void UpdateBaseAccs(Vector svec)$/;"	f
UpdateBaseAccsWithPaac	HAdapt.c	/^void UpdateBaseAccsWithPaac(void)$/;"	f
UpdateCRCC	HParm.c	/^unsigned int UpdateCRCC(void *data,int n,int s,Boolean bSwap,unsigned int crcc)$/;"	f
UpdateHLDAModel	HAdapt.c	/^void UpdateHLDAModel(HMMSet *hset)$/;"	f
UpdateMInfo	HAdapt.c	/^static void UpdateMInfo(HMMSet *hset, AdaptXForm *xform)$/;"	f	file:
UpdateMeans	HMap.c	/^static int UpdateMeans(HMMSet *hset, int px, HLink hmm)$/;"	f	file:
UpdateObsCache	HAdapt.c	/^static void UpdateObsCache( ObsCache *oc, Vector svec, LogFloat det, int t)  $/;"	f	file:
UpdateProjectModels	HAdapt.c	/^void UpdateProjectModels(HMMSet *hset, char *dir)$/;"	f
UpdateSemiTiedAccs	HAdapt.c	/^static void UpdateSemiTiedAccs(AdaptXForm *xform, AccStruct *accs, IntVec classes, TriMat totCov)$/;"	f	file:
UpdateSemiTiedMeans	HAdapt.c	/^static void UpdateSemiTiedMeans(HMMSet *hset, LinXForm *xf, BaseClass *bclass, IntVec classes, Vector totMean)$/;"	f	file:
UpdateSemiTiedModels	HAdapt.c	/^void UpdateSemiTiedModels(HMMSet *hset, XFInfo *xfinfo)$/;"	f
UpdateSemiTiedVFloor	HAdapt.c	/^static void UpdateSemiTiedVFloor(HMMSet *hset, LinXForm *xf, TriMat avCov, SVector vFloor)$/;"	f	file:
UpdateSemiTiedVars	HAdapt.c	/^static double UpdateSemiTiedVars(HMMSet *hset, LinXForm *xf, BaseClass *bclass, IntVec classes, Vector vFloor, TriMat totCov)$/;"	f	file:
UpdateSemiTiedXForm	HAdapt.c	/^static void UpdateSemiTiedXForm(AccStruct *accs, LinXForm *xf, LinXForm *ixf)$/;"	f	file:
UpdateSpkrStats	HAdapt.c	/^Boolean UpdateSpkrStats(HMMSet *hset, XFInfo *xfinfo, char *datafn)$/;"	f
UpdateVars	HMap.c	/^static void UpdateVars(HMMSet *hset, int px, HLink hmm)$/;"	f	file:
UpdateWeights	HMap.c	/^static void UpdateWeights(HMMSet *hset, int px, HLink hmm)$/;"	f	file:
UseAlignHMMSet	HFB.c	/^void UseAlignHMMSet(FBInfo* fbInfo, MemHeap* x, HMMSet *al_hset)$/;"	f
UseOldXFormCVN	HParm.c	/^static Boolean UseOldXFormCVN = FALSE;  \/* this allows us to go back to the old version with broken CVN *\/$/;"	v	file:
Ushort	esignal.h	/^typedef unsigned short			Ushort;$/;"	t
UttInfo	HFB.h	/^} UttInfo;$/;"	t	typeref:struct:__anon17
V1COMPAT	HParm.c	/^   V1COMPAT,      \/* Set Version 1 compatibility mode *\/$/;"	e	enum:__anon63	file:
VARIANCE	HModel.c	/^   MEAN, VARIANCE, INVCOVAR, XFORM, GCONST,$/;"	e	enum:__anon38	file:
VARSCALEDIR	HParm.c	/^   VARSCALEDIR,  \/* dir to find the variance estimate files *\/$/;"	e	enum:__anon63	file:
VARSCALEFN	HParm.c	/^   VARSCALEFN,$/;"	e	enum:__anon63	file:
VARSCALEMASK	HParm.c	/^   VARSCALEMASK, \/* label mask to idenitfy the variance estimate files *\/$/;"	e	enum:__anon63	file:
VARSCALEPATHMASK	HParm.c	/^   VARSCALEPATHMASK, \/* label mask to idenitfy the path of the variance estimate files *\/$/;"	e	enum:__anon63	file:
VAXSO	HWave.c	/^   VAXSO,      \/* little-endian ie low byte first *\/$/;"	e	enum:_SrcOrder	file:
VECSIZE	HModel.c	/^   NUMSTATES, STREAMINFO, VECSIZE, $/;"	e	enum:__anon38	file:
VERSION	esignal.h	55;"	d
VHASHSIZE	HDict.h	32;"	d
VIRTUAL	esignal.h	92;"	d
VQNode	HVQ.h	/^typedef struct _VQNodeRec *VQNode;$/;"	t	typeref:struct:_VQNodeRec
VQNodeRec	HVQ.h	/^}VQNodeRec;$/;"	t	typeref:struct:_VQNodeRec
VQNodeScore	HVQ.c	/^float VQNodeScore(VQNode n, Vector v, int size, CovKind ck)$/;"	f
VQTABLE	HParm.c	/^   VQTABLE,       \/* Name of file holding VQ table *\/$/;"	e	enum:__anon63	file:
VQTabRec	HVQ.h	/^}VQTabRec;$/;"	t	typeref:struct:_VQTabRec
VQTable	HVQ.h	/^typedef struct _VQTabRec *VQTable;$/;"	t	typeref:struct:_VQTabRec
VQbased	HParm.c	/^typedef enum { FFTbased, LPCbased, VQbased} CodeStyle;$/;"	e	enum:__anon61	file:
VRecInfo	HRec.h	/^typedef struct vrecinfo VRecInfo; \/* Visible recognition information *\/$/;"	t	typeref:struct:vrecinfo
VaAcc	HTrain.h	/^} VaAcc;$/;"	t	typeref:struct:__anon87
ValidCodeParms	HParm.c	/^static void ValidCodeParms(IOConfig cf)$/;"	f	file:
ValidConversion	HParm.c	/^Boolean ValidConversion (ParmKind src, ParmKind tgt)$/;"	f
ValidType	esignal.c	/^ValidType(int type    \/* numeric data-type code *\/ )$/;"	f
Vector	HMem.h	/^typedef float *Vector;     \/* vector[1..size]   *\/$/;"	t
VectorElemSize	HMem.c	/^size_t VectorElemSize(int size) { return (size+1)*sizeof(float); }$/;"	f
VectorSize	HMem.c	/^int VectorSize(Vector v)$/;"	f
VersionEntry	HShell.c	/^}VersionEntry;$/;"	t	typeref:struct:_VersionEntry	file:
Vocab	HDict.h	/^} Vocab;$/;"	t	typeref:struct:__anon15
VocabHash	HDict.c	/^static int VocabHash(LabId name)$/;"	f	file:
VolType	HAudio.c	/^} VolType;$/;"	t	typeref:enum:__anon11	file:
WARPFREQ	HParm.c	/^   WARPFREQ,      \/* Vocal tract length compensation by frequency warping *\/$/;"	e	enum:__anon63	file:
WARPLCUTOFF	HParm.c	/^   WARPLCUTOFF,   \/* VTL warping cutoff frequencies for smoothing *\/$/;"	e	enum:__anon63	file:
WARPUCUTOFF	HParm.c	/^   WARPUCUTOFF,$/;"	e	enum:__anon63	file:
WAV	HWave.h	/^	WAV,               \/* Microsoft WAVE format *\/$/;"	e	enum:__anon102
WAVEFORM	HParm.h	/^      WAVEFORM,            \/* Raw speech waveform (handled by HWave) *\/$/;"	e	enum:_BaseParmKind
WAVEFORM	HWave.c	1398;"	d	file:
WAVEFORM	HWave.c	47;"	d	file:
WAVE_FORMAT_ALAW	HWave.c	52;"	d	file:
WAVE_FORMAT_MULAW	HWave.c	53;"	d	file:
WAVE_FORMAT_PCM	HWave.c	50;"	d	file:
WCHAR	esignal.h	81;"	d
WCH_W	esig_asc.c	96;"	d	file:
WDPEN	HArc.c	/^static float WDPEN = 0;$/;"	v	file:
WEIGHTS_KEY	HUtil.c	/^   TRANSP_KEY, STATE_KEY, DUR_KEY, WEIGHTS_KEY,$/;"	e	enum:__anon89	file:
WHITE	HGraf.h	/^enum _HColour { WHITE, YELLOW, ORANGE, RED, MAUVE, PURPLE, DARK_BLUE, $/;"	e	enum:_HColour
WINDOWSIZE	HParm.c	/^   WINDOWSIZE,    \/* Window size in 100ns *\/ $/;"	e	enum:__anon63	file:
WNHASHSIZE	HNet.c	1739;"	d	file:
WORDFIELDWIDTH	HDict.c	348;"	d	file:
WarpFreq	HSigP.c	/^float WarpFreq (float fcl, float fcu, float freq, float minFreq, float maxFreq , float alpha)$/;"	f
Wave	HWave.h	/^typedef struct _Wave *Wave;  \/* Abstract type representing waveform file *\/$/;"	t	typeref:struct:_Wave
Wave2FBank	HSigP.c	/^void Wave2FBank(Vector s, Vector fbank, float *te, FBankInfo info)$/;"	f
Wave2LPC	HSigP.c	/^void Wave2LPC (Vector s, Vector a, Vector k, float *re, float *te)$/;"	f
WaveFilter	HShell.h	/^   WaveFilter,      \/* waveforms input via HWave *\/$/;"	e	enum:__anon74
WaveFormat	HWave.c	/^FileFormat WaveFormat(Wave w)$/;"	f
WaveOFilter	HShell.h	/^   WaveOFilter,     \/* waveforms output via HWave *\/$/;"	e	enum:__anon74
WaveRec	HWave.c	/^}WaveRec;$/;"	t	typeref:struct:_Wave	file:
Wchar	esignal.h	/^typedef unsigned short			Wchar;$/;"	t
Wd_Cmp	HDict.c	/^static int Wd_Cmp(const void *v1,const void *v2)$/;"	f	file:
WeightCepstrum	HSigP.c	/^void WeightCepstrum (Vector c, int start, int count, int cepLiftering)$/;"	f
Word	HDict.h	/^typedef struct _DictEntry *Word;$/;"	t	typeref:struct:_DictEntry
WordMatch	HRec.c	/^static Boolean WordMatch(NBestEntry *cmp,NBestEntry *ans)$/;"	f	file:
WordPron	HDict.h	/^} WordPron;$/;"	t	typeref:struct:_WordPron
WriteAsciiArray	esig_asc.c	/^WriteAsciiArray(Array *array, FILE *file, Annot *annotate)$/;"	f	file:
WriteAsciiData	esig_asc.c	/^WriteAsciiData(FieldSpec *field,$/;"	f	file:
WriteAsciiFieldList	esig_asc.c	/^WriteAsciiFieldList(FieldList list,$/;"	f
WriteAsciiFieldSpec	esig_asc.c	/^WriteAsciiFieldSpec(FieldSpec *field,$/;"	f	file:
WriteAsciiRecord	esig_asc.c	/^WriteAsciiRecord(FieldSpec **fields,    \/* linear array of fields *\/$/;"	f
WriteAsciiSamples	esig_asc.c	/^WriteAsciiSamples(void      *data,$/;"	f
WriteAsciiString	esig_asc.c	/^WriteAsciiString(char *data,$/;"	f	file:
WriteBoNGram	HLM.c	/^static void WriteBoNGram(LModel *lm,char *fn,int flags)$/;"	f	file:
WriteDict	HDict.c	/^ReturnStatus WriteDict(char *dictFn, Vocab *voc)$/;"	f
WriteESIGPHeader	HParm.c	/^void WriteESIGPHeader(FILE *f, IOConfig cf, HTime sampPeriod, short sampSize, short pKind)$/;"	f
WriteEdrArray	esig_edr.c	/^WriteEdrArray(Array *array,$/;"	f	file:
WriteEdrData	esig_edr.c	/^WriteEdrData(FieldSpec  *field,$/;"	f	file:
WriteEdrFieldList	esig_edr.c	/^WriteEdrFieldList(FieldList list,   \/* field list *\/$/;"	f
WriteEdrFieldSpec	esig_edr.c	/^WriteEdrFieldSpec(FieldSpec *field,$/;"	f	file:
WriteEdrRecord	esig_edr.c	/^WriteEdrRecord(FieldSpec    **fields,$/;"	f
WriteEdrSamples	esig_edr.c	/^WriteEdrSamples(void        *data,$/;"	f
WriteEdrString	esig_edr.c	/^WriteEdrString(char     *string,$/;"	f	file:
WriteFieldList	esignal.c	/^WriteFieldList(FieldList list,$/;"	f
WriteFloat	HShell.c	/^void WriteFloat (FILE *f, float *x, int n, Boolean binary)$/;"	f
WriteHTKHeader	HWave.c	/^void WriteHTKHeader(FILE *f, long nSamp, long sampP, short sampS, $/;"	f
WriteHeader	esignal.c	/^WriteHeader(FieldList  list,$/;"	f
WriteInt	HShell.c	/^void WriteInt(FILE *f, int *i, int n, Boolean binary)$/;"	f
WriteIntVec	HMath.c	/^void WriteIntVec(FILE *f, IntVec v, Boolean binary)$/;"	f
WriteLModel	HLM.c	/^void WriteLModel(LModel *lm,char *fn,int flags)$/;"	f
WriteLattice	HNet.c	/^ReturnStatus WriteLattice(Lattice *lat,FILE *file,LatFormat format)$/;"	f
WriteMatBigram	HLM.c	/^static void WriteMatBigram(LModel *lm,char *fn,int flags)$/;"	f	file:
WriteMatrix	HMath.c	/^void WriteMatrix(FILE *f, Matrix m, Boolean binary)$/;"	f
WriteNGrams	HLM.c	/^static int WriteNGrams(FILE *file,NGramLM *nglm,int n,float scale)$/;"	f	file:
WriteNativeArray	esig_nat.c	/^WriteNativeArray(Array *array,$/;"	f	file:
WriteNativeData	esig_nat.c	/^WriteNativeData(FieldSpec *field,$/;"	f	file:
WriteNativeFieldList	esig_nat.c	/^WriteNativeFieldList(FieldList list,$/;"	f
WriteNativeFieldSpec	esig_nat.c	/^WriteNativeFieldSpec(FieldSpec  *field,$/;"	f	file:
WriteNativeRecord	esig_nat.c	/^WriteNativeRecord(FieldSpec **fields,$/;"	f
WriteNativeSamples	esig_nat.c	/^WriteNativeSamples(void     *data,$/;"	f
WriteNativeString	esig_nat.c	/^WriteNativeString(char *string,$/;"	f	file:
WriteOneLattice	HNet.c	/^ReturnStatus WriteOneLattice(Lattice *lat,FILE *file,LatFormat format)$/;"	f
WritePreamble	esignal.c	/^WritePreamble(char  *arch,$/;"	f
WriteRecord	esignal.c	/^WriteRecord(FieldSpec   **fields,$/;"	f
WriteSamples	esignal.c	/^WriteSamples(void       *data,$/;"	f
WriteShort	HShell.c	/^void WriteShort (FILE *f, short *s, int n, Boolean binary)$/;"	f
WriteShortVec	HMath.c	/^void WriteShortVec(FILE *f, ShortVec v, Boolean binary)$/;"	f
WriteString	HShell.c	/^void WriteString(FILE *f,char *s,char q)$/;"	f
WriteTriMat	HMath.c	/^void WriteTriMat(FILE *f, TriMat m, Boolean binary)$/;"	f
WriteVector	HMath.c	/^void WriteVector(FILE *f, Vector v, Boolean binary)$/;"	f
WritingToMeta	HGraf_WIN32.c	/^static Boolean WritingToMeta = FALSE;               \/* TRUE if spooling to a metafile *\/$/;"	v	file:
WtAcc	HTrain.h	/^} WtAcc;$/;"	t	typeref:struct:__anon85
XColArray	HGraf.c	/^static char  *XColArray[] = {$/;"	v	file:
XFDirInfo	HModel.c	/^} XFDirInfo;$/;"	t	typeref:struct:_XFDirInfo	file:
XFDirLink	HModel.c	/^typedef struct _XFDirInfo *XFDirLink;$/;"	t	typeref:struct:_XFDirInfo	file:
XFInfo	HAdapt.h	/^} XFInfo;$/;"	t	typeref:struct:__anon10
XFORM	HModel.c	/^   MEAN, VARIANCE, INVCOVAR, XFORM, GCONST,$/;"	e	enum:__anon38	file:
XFORM	HModel.h	62;"	d
XFORMC	HMath.h	/^   XFORMC,        \/* arbitrary rectangular transform *\/$/;"	e	enum:__anon34
XFORMCOV	HModel.c	/^   DIAGCOV,  FULLCOV, XFORMCOV,$/;"	e	enum:__anon38	file:
XFORMKIND	HModel.c	/^   XFORMKIND=90, PARENTXFORM, NUMXFORMS, XFORMSET,$/;"	e	enum:__anon38	file:
XFORMSET	HModel.c	/^   XFORMKIND=90, PARENTXFORM, NUMXFORMS, XFORMSET,$/;"	e	enum:__anon38	file:
XFORMWGTSET	HModel.c	/^   CLASS, XFORMWGTSET, CLASSXFORM, MMFIDMASK, PARAMETERS,$/;"	e	enum:__anon38	file:
XFormAccInfo	HModel.h	/^} XFormAccInfo;$/;"	t	typeref:struct:__anon51
XFormInfo	HAdapt.c	/^} XFormInfo;$/;"	t	typeref:struct:__anon9	file:
XFormKind	HModel.h	/^typedef enum _XFormKind XFormKind;$/;"	t	typeref:enum:_XFormKind
XFormKind2Str	HModel.c	/^char *XFormKind2Str(XFormKind xkind, char *buf)$/;"	f
XFormModCovar	HAdapt.c	/^static Boolean XFormModCovar(AdaptXForm *xform)$/;"	f	file:
XFormSet	HModel.h	/^} XFormSet;$/;"	t	typeref:struct:__anon54
XK_MISCELLANY	HGraf.c	76;"	d	file:
XOutP	HModel.c	/^static LogFloat XOutP(Vector x, int vecSize, MixPDF *mp)$/;"	f	file:
XferMode	HGraf.h	/^typedef enum _XferMode XferMode;$/;"	t	typeref:enum:_XferMode
XformBase	HParm.c	/^static void XformBase(float *data, IOConfig cf)$/;"	f	file:
XformFBANK2MELSPEC	HParm.c	/^static void XformFBANK2MELSPEC(float *data,int d)$/;"	f	file:
XformFBANK2MFCC	HParm.c	/^static void XformFBANK2MFCC(float *data,int d,int dnew,int lifter)$/;"	f	file:
XformLPC2LPCEPSTRA	HParm.c	/^static void XformLPC2LPCEPSTRA(float *data,int d,int dnew,int lifter)$/;"	f	file:
XformLPC2LPREFC	HParm.c	/^static void XformLPC2LPREFC(float *data,int d)$/;"	f	file:
XformLPCEPSTRA2LPC	HParm.c	/^static void XformLPCEPSTRA2LPC(float *data,int d,int lifter)$/;"	f	file:
XformLPREFC2LPC	HParm.c	/^static void XformLPREFC2LPC(float *data,int d)$/;"	f	file:
XformMELSPEC2FBANK	HParm.c	/^static void XformMELSPEC2FBANK(float *data,int d)$/;"	f	file:
YELLOW	HGraf.h	/^enum _HColour { WHITE, YELLOW, ORANGE, RED, MAUVE, PURPLE, DARK_BLUE, $/;"	e	enum:_HColour
ZMEANSOURCE	HParm.c	/^   ZMEANSOURCE,   \/* Zero Mean (Wave only) *\/$/;"	e	enum:__anon63	file:
ZeroAccs	HTrain.c	/^void ZeroAccs(HMMSet *hset, UPDSet uFlags){ ZeroAccsParallel(hset,uFlags,1); }$/;"	f
ZeroAccsParallel	HTrain.c	/^void ZeroAccsParallel(HMMSet *hset, UPDSet uFlags, int nPara)$/;"	f
ZeroAdaptAccs	HAdapt.c	/^void ZeroAdaptAccs(HMMSet *hset, AdaptXForm *xform)$/;"	f
ZeroAlpha	HFB.c	/^static void ZeroAlpha(AlphaBeta *ab, int qlo, int qhi)$/;"	f	file:
ZeroAlpha	HFBLat.c	/^static void ZeroAlpha(int sq, int eq)$/;"	f	file:
ZeroBaseTriMat	HAdapt.c	/^static void ZeroBaseTriMat(TriMat *bTriMat)$/;"	f	file:
ZeroBlockTriMat	HAdapt.c	/^static void ZeroBlockTriMat(TriMat *bTriMat)$/;"	f	file:
ZeroDMatrix	HMath.c	/^void ZeroDMatrix(DMatrix m)$/;"	f
ZeroDVector	HMath.c	/^void ZeroDVector(DVector v)$/;"	f
ZeroHooks	HArc.c	/^void ZeroHooks(Lattice *lat){ \/*Checks that the hooks are zero.*\/$/;"	f
ZeroIntVec	HMath.c	/^void ZeroIntVec(IntVec v)$/;"	f
ZeroMatrix	HMath.c	/^void ZeroMatrix(Matrix m)$/;"	f
ZeroMean	HSigP.c	/^void ZeroMean(short *data, long nSamples)$/;"	f
ZeroMeanFrame	HParm.c	/^void ZeroMeanFrame(Vector v)$/;"	f
ZeroMeanWave	HWave.c	/^void ZeroMeanWave(Wave w)$/;"	f
ZeroShortVec	HMath.c	/^void ZeroShortVec(ShortVec v)$/;"	f
ZeroStreamWidths	HParm.c	/^void ZeroStreamWidths(int numS, short *swidth)$/;"	f
ZeroTriMat	HMath.c	/^void ZeroTriMat(TriMat m)$/;"	f
ZeroVector	HMath.c	/^void ZeroVector(Vector v)$/;"	f
_AInfo	HAdapt.c	/^typedef struct _AInfo {$/;"	s	file:
_AccCache	HAdapt.c	/^typedef struct _AccCache{$/;"	s	file:
_Acoustic	HArc.h	/^typedef struct _Acoustic{$/;"	s
_AdaptKind	HModel.h	/^enum _AdaptKind {TREE, BASE};$/;"	g
_AdaptXForm	HModel.h	/^typedef struct _AdaptXForm {$/;"	s
_AltState	HGraf_WIN32.c	/^enum _AltState {ALT_UP,ALT_DOWN}; \/* keep track of Alt key *\/$/;"	g	file:
_Arc	HArc.h	/^struct _Arc{$/;"	s
_ArcList	HArc.c	/^typedef struct _ArcList{$/;"	s	file:
_ArcTrans	HArc.h	/^struct _ArcTrans{$/;"	s
_AudioIn	HAudio.c	/^typedef struct _AudioIn {$/;"	s	file:
_AudioOut	HAudio.c	/^typedef struct _AudioOut {$/;"	s	file:
_BSD_SIGNALS	HGraf.c	69;"	d	file:
_BaseClassKind	HModel.h	/^enum _BaseClassKind {MIXBASE, MEANBASE, COVBASE};$/;"	g
_BaseParmKind	HParm.h	/^enum _BaseParmKind{$/;"	g
_Block	HMem.h	/^typedef struct _Block{  \/*      MHEAP                     MSTAK           *\/$/;"	s
_CompressType	HWave.c	/^enum _CompressType{$/;"	g	file:
_ConfigEntry	HShell.c	/^typedef struct _ConfigEntry{$/;"	s	file:
_CorrA	HArc.h	/^struct _CorrA{$/;"	s
_CorrN	HArc.h	/^struct _CorrN{$/;"	s
_CorrectArcList	HFBLat.c	/^typedef struct _CorrectArcList{$/;"	s	file:
_DictEntry	HDict.h	/^typedef struct _DictEntry{$/;"	s
_DurKind	HModel.h	/^enum _DurKind {NULLD, POISSOND, GAMMAD, RELD, GEND};$/;"	g
_ESIGNAL_H_	esignal.h	31;"	d
_HADAPT_H_	HAdapt.h	32;"	d
_HAUDIO_H_	HAudio.h	25;"	d
_HButton	HGraf.h	/^typedef struct _HButton { $/;"	s
_HColour	HGraf.h	/^enum _HColour { WHITE, YELLOW, ORANGE, RED, MAUVE, PURPLE, DARK_BLUE, $/;"	g
_HDICT_H_	HDict.h	25;"	d
_HEvent	HGraf.h	/^enum _HEvent {HMOUSEDOWN,  \/* (left) mouse button pressed *\/$/;"	g
_HFB_H_	HFB.h	25;"	d
_HGRAF_H_	HGraf.h	44;"	d
_HLABEL_H_	HLabel.h	54;"	d
_HLAT_H_	HLat.h	33;"	d
_HLM_H_	HLM.h	38;"	d
_HMATH_H_	HMath.h	25;"	d
_HMEM_H_	HMem.h	51;"	d
_HMMSet	HModel.h	/^typedef struct _HMMSet{$/;"	s
_HMODEL_H_	HModel.h	38;"	d
_HNET_H_	HNet.h	52;"	d
_HPARM_H_	HParm.h	38;"	d
_HREC_H_	HRec.h	25;"	d
_HSHELL_H_	HShell.h	38;"	d
_HSIGP_H_	HSigP.h	38;"	d
_HSetKind	HModel.h	/^enum _HSetKind {PLAINHS, SHAREDHS, TIEDHS, DISCRETEHS};$/;"	g
_HTRAIN_H_	HTrain.h	38;"	d
_HUTIL_H_	HUtil.h	25;"	d
_HVQ_H_	HVQ.h	50;"	d
_HWAVE_H_	HWave.h	36;"	d
_ItemBlock	HTrain.h	/^typedef struct _ItemBlock{$/;"	s
_ItemRec	HModel.h	/^typedef struct _ItemRec {$/;"	s
_KeyType	HGraf.h	/^enum _KeyType {NORMALKEY, SHIFTKEY, COMMANDKEY, CONTROLKEY, $/;"	g
_LLFInfo	HLat.c	/^struct _LLFInfo {$/;"	s	file:
_LabList	HLabel.h	/^typedef struct _LabList{$/;"	s
_Label	HLabel.h	/^typedef struct _Label{     \/* Information for each label *\/$/;"	s
_MLFDefType	HLabel.h	/^enum _MLFDefType {$/;"	g
_MLFEntry	HLabel.h	/^typedef struct _MLFEntry{$/;"	s
_MLFPatType	HLabel.h	/^enum _MLFPatType {$/;"	g
_MMFInfo	HModel.h	/^typedef struct _MMFInfo{$/;"	s
_MPEStruct	HArc.h	/^typedef struct _MPEStruct{$/;"	s
_MacroDef	HModel.h	/^typedef struct _MacroDef{$/;"	s
_MemHeapRec	HMem.c	/^typedef struct _MemHeapRec {$/;"	s	file:
_NameCell	HLabel.h	/^typedef struct _NameCell{  \/* Hash Table Linked List Item *\/$/;"	s
_NetInst	HRec.c	/^struct _NetInst$/;"	s	file:
_NetLink	HNet.h	/^struct _NetLink{$/;"	s
_NetNode	HNet.h	/^struct _NetNode {$/;"	s
_ObsCache	HAdapt.c	/^typedef struct _ObsCache{$/;"	s	file:
_ParmBuf	HParm.c	/^typedef struct _ParmBuf {$/;"	s	file:
_PtrMap	HModel.h	/^typedef struct _PtrMap {   \/* used for finding macros via ptr's *\/$/;"	s
_RegNode	HModel.h	/^typedef struct _RegNode {$/;"	s
_STRARR_H_	strarr.h	21;"	d
_ScribeLab	HLabel.c	/^enum _ScribeLab {$/;"	g	file:
_SegStoreRec	HTrain.h	/^typedef struct _SegStoreRec{$/;"	s
_SrcOrder	HWave.c	/^typedef enum _SrcOrder{$/;"	g	file:
_StatsInfo	HLat.c	/^typedef struct _StatsInfo {$/;"	s	file:
_SubLArc	HLat.c	/^struct _SubLArc {$/;"	s	file:
_SubLNode	HLat.c	/^struct _SubLNode {$/;"	s	file:
_TrSymbol	HLabel.c	/^enum _TrSymbol{TRNULL,TRNUM,TRSTR,TREOL,TRLEV,TRCOMMA,TREOF};$/;"	g	file:
_UPDSet	HTrain.h	/^enum _UPDSet{UPMEANS=1,UPVARS=2,UPTRANS=4,UPMIXES=8,UPXFORM=16,UPMAP=32,UPSEMIT=64};$/;"	g
_VQNodeRec	HVQ.h	/^typedef struct _VQNodeRec{$/;"	s
_VQTabRec	HVQ.h	/^typedef struct _VQTabRec {$/;"	s
_VersionEntry	HShell.c	/^typedef struct _VersionEntry{$/;"	s	file:
_Wave	HWave.c	/^typedef struct _Wave{   \/* Internal wave file representation *\/$/;"	s	file:
_WordPron	HDict.h	/^typedef struct _WordPron{   \/* storage for each pronunciation *\/$/;"	s
_XFDirInfo	HModel.c	/^typedef struct _XFDirInfo {$/;"	s	file:
_XFormKind	HModel.h	/^enum _XFormKind {MLLRMEAN, MLLRCOV, MLLRVAR, CMLLR, SEMIT};$/;"	g
_XferMode	HGraf.h	/^enum _XferMode {GCOPY, GOR, GXOR, GINVERT};$/;"	g
a	HParm.c	/^      AudioIn a;        \/* the audio source *\/$/;"	m	union:_ParmBuf::__anon64	file:
a	HParm.c	/^   Vector a,k;        \/* lpc and refc vectors *\/$/;"	m	struct:__anon62	file:
a	HParm.h	/^   AudioIn a;                 \/* the audio source - if any *\/$/;"	m	struct:__anon70
a2l	HWave.c	/^static short a2l[]={$/;"	v	file:
aCollThresh	HRec.h	/^   int aCollThresh;         \/* Max align records created before collection *\/$/;"	m	struct:vrecinfo
aInfo	HAdapt.c	/^   AInfo *aInfo;         \/* current transform information *\/$/;"	m	struct:__anon9	file:
aInfo	HFBLat.h	/^  ArcInfo  *aInfo;$/;"	m	struct:__anon23
aNoRef	HRec.c	/^   Align aNoRef;            \/* Head of AlignNoRef linked list *\/$/;"	m	struct:precinfo	file:
aNoTail	HRec.c	/^   Align aNoTail;           \/* Tail of AlignNoRef linked list *\/$/;"	m	struct:precinfo	file:
aYesRef	HRec.c	/^   Align aYesRef;           \/* Head of AlignYesRef linked list *\/$/;"	m	struct:precinfo	file:
aYesTail	HRec.c	/^   Align aYesTail;          \/* Tail of AlignYesRef linked list *\/$/;"	m	struct:precinfo	file:
ab	HFB.h	/^  AlphaBeta *ab;      \/* Alpha-beta structure for this model *\/$/;"	m	struct:__anon20
abMem	HFB.h	/^  MemHeap abMem;      \/* alpha beta memory heap *\/$/;"	m	struct:__anon19
abortOnError	HShell.c	/^static Boolean abortOnError = FALSE;     \/* causes HError to abort *\/$/;"	v	file:
ac	HArc.h	/^  Acoustic *ac; $/;"	m	struct:_Arc
ac	HArc.h	/^  Acoustic *ac; \/* 1..Q *\/$/;"	m	struct:ArcInfoStruct
ac	HParm.c	/^   Vector as, ac, lp; \/* Auditory, autocorrelation an lp vectors for PLP *\/ $/;"	m	struct:__anon62	file:
accBTriMat	HModel.h	/^  Boolean accBTriMat;  \/* accumulate weighted outer-product of observations *\/$/;"	m	struct:__anon51
accSum	HModel.h	/^  Boolean accSum;      \/* accumulate the sum of the observations *\/$/;"	m	struct:__anon51
accSumSq	HModel.h	/^  Boolean accSumSq;    \/* accumulate sum-squared (diag) of the observations *\/$/;"	m	struct:__anon51
accWin	HParm.c	/^   int accWin;                \/* Accel window halfsize *\/$/;"	m	struct:__anon62	file:
acccaStack	HAdapt.c	/^static MemHeap acccaStack;$/;"	v	file:
aclike	HArc.h	/^  LogDouble aclike; \/* [unscaled] acoustic likelihood from beginning to end of model. *\/$/;"	m	struct:_Acoustic
aclike	HNet.h	/^   LogFloat aclike;    \/* Acoustic likelihood of word *\/$/;"	m	struct:larc
acscale	HNet.h	/^   float acscale;               \/* Acoustic scale factor *\/$/;"	m	struct:lattice
actfile	HShell.c	/^   char actfile[1024];                  \/* actual file name *\/$/;"	m	struct:__anon71	file:
action	HGraf.h	/^   void (*action)(void);      \/* ptr to function to call whilst button is down *\/$/;"	m	struct:_HButton
active	HGraf.h	/^   Boolean active;            \/* if false, stipple gray *\/$/;"	m	struct:_HButton
adapt_ot	HFBLat.h	/^  Observation adapt_ot;   \/* for parent XForm *\/$/;"	m	struct:__anon23
addDither	HParm.c	/^   float addDither;           \/* Additional dither added to file *\/$/;"	m	struct:__anon62	file:
add_index	HFBLat.c	/^static int add_index = 999;   \/* additional index for discriminative training: 3 for MPE with MMI prior *\/$/;"	v	file:
adevin	HAudio.c	/^   UMSBAUDDevice adevin;$/;"	m	struct:_AudioIn	file:
adevout	HAudio.c	/^   UMSBAUDDevice adevout;$/;"	m	struct:_AudioOut	file:
aiStatMap	HAudio.c	/^static char * aiStatMap[] = { "AI_CLEARED","AI_WAITSIG",$/;"	v	file:
akind	HModel.h	/^  AdaptKind akind;                  \/* adaptation kind *\/$/;"	m	struct:_AdaptXForm
alCompLevel	HFB.c	/^static Boolean alCompLevel = FALSE;   \/* align model at component level *\/$/;"	v	file:
alXFormDir	HAdapt.h	/^  char *alXFormDir;$/;"	m	struct:__anon10
alXFormExt	HAdapt.h	/^  char *alXFormExt;$/;"	m	struct:__anon10
al_dataStack	HFBLat.h	/^  MemHeap al_dataStack;$/;"	m	struct:__anon23
al_hset	HAdapt.h	/^  HMMSet *al_hset;$/;"	m	struct:__anon10
al_hset	HFB.h	/^  HMMSet *al_hset;    \/* HMMs to use for alignment *\/$/;"	m	struct:__anon20
al_inXForm	HAdapt.h	/^  AdaptXForm *al_inXForm;$/;"	m	struct:__anon10
al_inXForm	HFB.h	/^  AdaptXForm *al_inXForm;\/* current input transform for al_hset (if any) *\/$/;"	m	struct:__anon20
al_info	HFBLat.h	/^  BufferInfo al_info;             \/* info from buffer on second data file *\/$/;"	m	struct:__anon23
al_ot	HFBLat.h	/^  Observation al_ot;$/;"	m	struct:__anon23
al_pbuf	HFBLat.h	/^  ParmBuf al_pbuf;$/;"	m	struct:__anon23
al_qList	HFB.h	/^  HLink *al_qList;    \/* array[1..Q] of active align HMM defs *\/$/;"	m	struct:__anon19
align	HArc.h	/^  short int align; $/;"	m	struct:_CorrN
align	HRec.c	/^  Align *align;$/;"	m	struct:nxtpath	file:
align	HRec.c	/^  Align *align;$/;"	m	struct:reltoken	file:
align	HRec.c	/^struct align$/;"	s	file:
align	HRec.h	/^   Align *align;        \/* Route (state\/model level) through network *\/$/;"	m	struct:token
align	HRec.h	/^   Align *align;        \/* State\/model traceback for this word *\/$/;"	m	struct:path
alignHeap	HRec.c	/^   MemHeap alignHeap;       \/* Align heap *\/$/;"	m	struct:precinfo	file:
allowCxtExp	HNet.c	/^Boolean allowCxtExp=TRUE;$/;"	v
allowOthers	HModel.c	/^static Boolean allowOthers=TRUE;        \/* allow unseen models in files *\/$/;"	v	file:
allowTMods	HModel.h	/^   Boolean allowTMods;     \/* true if HMMs can have Tee Models *\/$/;"	m	struct:_HMMSet
allowXWrdExp	HNet.c	/^Boolean allowXWrdExp=FALSE;$/;"	v
alpha	HArc.h	/^  double alpha; \/*alpha and betaPlus are for user's use.  *\/$/;"	m	struct:_Arc
alpha	HArc.h	/^  double alpha;$/;"	m	struct:_CorrN
alphaCorr	HArc.h	/^  float *alphaCorr; \/* [starti..endi]. *\/$/;"	m	struct:_CorrN
alphaError	HArc.h	/^  float alphaError, betaPlusError; \/*for MPE training.*\/$/;"	m	struct:_MPEStruct
alphat	HArc.h	/^  DVector alphat; \/* 1..Nq *\/$/;"	m	struct:_Acoustic
alphat	HFB.h	/^  DVector *alphat;    \/* array[1..Q][1..Nq] of prob *\/$/;"	m	struct:__anon19
alphat1	HArc.h	/^  DVector alphat1; \/* 1..Nq  [for time t-1] *\/$/;"	m	struct:_Acoustic
alphat1	HFB.h	/^  DVector *alphat1;   \/* alpha[t-1] *\/$/;"	m	struct:__anon19
alreadyFilling	HAudio.c	/^static volatile Boolean alreadyFilling;$/;"	v	file:
anlen	HRec.c	/^   int anlen;               \/* Number of AlignNoRef list *\/$/;"	m	struct:precinfo	file:
arcStack	HFBLat.h	/^  MemHeap arcStack;$/;"	m	struct:__anon23
arc_compare	HArc.c	/^int arc_compare( const void* a , const void* b )$/;"	f
arc_vc_id	HArc.c	/^char *arc_vc_id = "$Id: HArc.c,v 1.1.1.1 2006\/10\/11 09:54:57 jal58 Exp $";$/;"	v
arc_version	HArc.c	/^char *arc_version = "!HVER!HArc:   3.4.1 [CUED 12\/03\/09]";$/;"	v
argcount	HShell.c	/^static int argcount;          \/* total args = argc *\/$/;"	v	file:
arglist	HShell.c	/^static char **arglist=defargs;\/* actual arg list *\/$/;"	v	file:
as	HParm.c	/^   Vector as, ac, lp; \/* Auditory, autocorrelation an lp vectors for PLP *\/ $/;"	m	struct:__anon62	file:
assign	HModel.h	/^   IntVec assign;        \/* for hard assignments  *\/$/;"	m	union:__anon52
attMInfo	HModel.h	/^   Boolean attMInfo;     \/* have the set of adapt info been attached *\/$/;"	m	struct:_HMMSet
attRegAccs	HModel.h	/^   Boolean attRegAccs;   \/* have the set of accumulates been attached *\/$/;"	m	struct:_HMMSet
attXFormInfo	HModel.h	/^   Boolean attXFormInfo; \/* have the set of adapt info been attached *\/$/;"	m	struct:_HMMSet
attr	HAudio.c	/^   AudioAttributes attr;$/;"	m	struct:_AudioIn	file:
attr	HAudio.c	/^   AudioAttributes attr;$/;"	m	struct:_AudioOut	file:
audSignal	HParm.c	/^   int audSignal;             \/* Signal Number for Audio Control *\/$/;"	m	struct:__anon62	file:
audSignal	HParm.h	/^   int audSignal;             \/* Signal Number for Audio Control *\/$/;"	m	struct:__anon70
audio	HAudio.c	/^   Audio *audio;$/;"	m	struct:_AudioIn	file:
audio	HAudio.c	/^   Audio *audio;$/;"	m	struct:_AudioOut	file:
audio_cnt	HAudio.c	/^static int audio_cnt=0;$/;"	v	file:
audio_ctld	HAudio.c	/^   int audio_ctld;$/;"	m	struct:_AudioIn	file:
audio_ctld	HAudio.c	/^   int audio_ctld;$/;"	m	struct:_AudioOut	file:
audio_dev	HAudio.c	/^static Audio *audio_dev=NULL;$/;"	v	file:
audio_fd	HAudio.c	/^static int audio_fd;$/;"	v	file:
audio_info	HAudio.c	/^   audio_info_t audio_info;$/;"	m	struct:_AudioIn	file:
audio_info	HAudio.c	/^   audio_info_t audio_info;$/;"	m	struct:_AudioOut	file:
audio_info	HAudio.c	/^static audio_buf_info audio_info;$/;"	v	file:
audio_io	HAudio.c	/^static unsigned short audio_io = 0x00;$/;"	v	file:
aux	HDict.h	/^   void *aux;       \/* hook used by HTK library modules for temp info *\/$/;"	m	struct:_DictEntry
aux	HDict.h	/^   void *aux;      \/* hook for temp info *\/$/;"	m	struct:_WordPron
aux	HLabel.h	/^   Ptr aux;                 \/* User pointer *\/$/;"	m	struct:_NameCell
aux	HNet.h	/^   int aux;$/;"	m	struct:_NetNode
aux	HVQ.h	/^   void * aux;          \/* available to 'user' *\/$/;"	m	struct:_VQNodeRec
auxLab	HLabel.h	/^   LabId *auxLab;           \/* array [1..maxAuxLab] OF LabId *\/$/;"	m	struct:_Label
auxScore	HLabel.h	/^   float *auxScore;         \/* array [1..maxAuxLab] OF float *\/$/;"	m	struct:_Label
avCov	HAdapt.c	/^static TriMat *avCov = NULL;$/;"	v	file:
aveCost	HTrain.h	/^   float aveCost;  \/* average cost of cluster *\/$/;"	m	struct:__anon82
axis_names	esignal.h	/^    char        **axis_names;   \/* optional strings identifying axes *\/$/;"	m	struct:FieldSpec
aylen	HRec.c	/^   int aylen;               \/* Number of AlignYesRef list *\/$/;"	m	struct:precinfo	file:
b	HShell.h	/^   Boolean b;$/;"	m	union:__anon77
bDiagMat	HAdapt.c	/^   TriMat *bDiagMat;$/;"	m	struct:__anon8	file:
bSwap	HParm.c	/^   Boolean bSwap;     \/* TRUE if source needs byte swapping *\/$/;"	m	struct:__anon62	file:
bTriMat	HAdapt.c	/^   TriMat  *bTriMat;$/;"	m	struct:_AccCache	file:
bTriMat	HAdapt.c	/^   TriMat *bTriMat;$/;"	m	struct:__anon8	file:
bVector	HAdapt.c	/^   DVector bVector;$/;"	m	struct:_AccCache	file:
bVector	HAdapt.c	/^   DVector bVector;$/;"	m	struct:__anon8	file:
baseClass	HAdapt.c	/^   int baseClass;$/;"	m	struct:_AInfo	file:
baseClasses	HModel.h	/^  IntVec baseClasses;       \/* if a terminal node the set of baseclasses else NULL *\/$/;"	m	struct:_RegNode
baseTriMatTime	HAdapt.c	/^static int baseTriMatTime=-1;  $/;"	v	file:
baseclass	HAdapt.c	/^   int     baseclass;$/;"	m	struct:_AccCache	file:
bclass	HModel.h	/^  BaseClass *bclass;                \/* base class for which transform applicable *\/$/;"	m	struct:_AdaptXForm
bclass	HModel.h	/^  BaseClass *bclass;   \/* baseclass associated with this regression tree *\/$/;"	m	struct:RegTree
beamPruneArcs	HLat.c	/^static Boolean beamPruneArcs = TRUE; \/* apply beam pruning to arcs (rather than just nodes) *\/$/;"	v	file:
beta	HArc.h	/^  double *beta; \/* [starti..endi]. *\/$/;"	m	struct:_CorrN
beta	HFB.h	/^  DVector **beta;     \/* array[1..T][1..Q][1..Nq] of prob *\/$/;"	m	struct:__anon19
betaCorr	HArc.h	/^  float *betaCorr; \/* [starti..endi]. *\/$/;"	m	struct:_CorrN
betaPlus	HArc.h	/^  DVector *betaPlus;  \/* [myArc->t_start..myArc->t_end][1..Nq] *\/$/;"	m	struct:_Acoustic
betaPlus	HArc.h	/^  double betaPlus;$/;"	m	struct:_Arc
betaPlusError	HArc.h	/^  float alphaError, betaPlusError; \/*for MPE training.*\/$/;"	m	struct:_MPEStruct
bg	HGraf.h	/^   HColour fg, bg;            \/* colors *\/$/;"	m	struct:_HButton
bias	HModel.h	/^  SVector bias;        \/* bias vector, if no bias equals NULL *\/$/;"	m	struct:__anon53
bigMat	HLM.h	/^   Matrix bigMat;               \/* Actual probs *\/$/;"	m	struct:matbilm
binForm	HModel.c	/^   Boolean binForm;     \/* binary form of keyword symbol *\/$/;"	m	struct:__anon40	file:
binTree	HVQ.h	/^   binTree     \/* binary tree - every node has 0 or 2 offspring *\/$/;"	e	enum:__anon92
bindir	Makefile	/^bindir = ${exec_prefix}\/bin$/;"	m
bitValue	HWave.c	/^static const unsigned char bitValue[8] = {1,2,4,8,16,32,64,128};$/;"	v	file:
bits	HAudio.c	/^   long bits ;$/;"	m	struct:_AudioIn	file:
bits	HAudio.c	/^   long bits ;$/;"	m	struct:_AudioOut	file:
bk	HParm.h	/^   ParmKind bk;          \/* parm kind of the parm buffer *\/$/;"	m	struct:__anon68
bkind	HModel.h	/^  BaseClassKind bkind; \/* type of parameters applicable to *\/$/;"	m	struct:__anon50
black	HGraf.c	/^static unsigned long black, white;$/;"	v	file:
blkSize	HTrain.h	/^   int blkSize;      \/* size of an item block *\/$/;"	m	struct:__anon81
blockSize	HAdapt.c	/^   IntVec blockSize;$/;"	m	struct:__anon6	file:
blockSize	HModel.h	/^  IntVec blockSize;    \/* block sizes in the linear transform *\/$/;"	m	struct:__anon53
boNGram	HLM.h	/^typedef enum { boNGram=1, matBigram, hlmModel } LMType;$/;"	e	enum:__anon32
bobcaStack	HAdapt.c	/^static MemHeap bobcaStack; \/* base obscache *\/$/;"	v	file:
bowt	HLM.h	/^   float bowt;                  \/* Back-off weight *\/$/;"	m	struct:nentry
btnHeap	HGraf.c	/^static MemHeap btnHeap;      \/* heap for HButton structures *\/$/;"	v	file:
btnHeap	HGraf_WIN32.c	/^static MemHeap btnHeap;           \/* heap for HButton structures *\/$/;"	v	file:
buf1	HFBLat.c	/^static  char buf1[255];$/;"	v	file:
bufSize	HAudio.c	/^   int bufSize;             \/* Block size for each buffer *\/$/;"	m	struct:_AudioIn	file:
buffer	HAudio.c	/^   short buffer[AUDBUFSIZE];$/;"	m	struct:_AudioIn	file:
bufferSize	HAudio.c	/^   int bufferSize;           \/* Size of audio buffer *\/$/;"	m	struct:_AudioIn	file:
bwlike	HLat.h	/^   LogDouble bwlike;     \/* backward likelihood *\/$/;"	m	struct:FBlnodeInfo
c	HAudio.c	/^   CRITICAL_SECTION c;$/;"	m	struct:_AudioIn	file:
c	HAudio.c	/^   CRITICAL_SECTION c;$/;"	m	struct:_AudioOut	file:
c	HGraf.h	/^   unsigned char c;  \/* keypress char *\/$/;"	m	struct:__anon24
c	HParm.c	/^   Vector c;          \/* cepstral vector *\/$/;"	m	struct:__anon62	file:
c	HTrain.h	/^   Vector c;         \/* array[1..M] of mixture weight *\/$/;"	m	struct:__anon85
cCount	HWave.c	/^static int cCount;   \/* num bytes read *\/$/;"	v	file:
cMeanDN	HParm.c	/^   char* cMeanDN;             \/* dir to find cepstral mean files *\/$/;"	m	struct:__anon62	file:
cMeanMask	HParm.c	/^   char* cMeanMask;           \/* cepstral mean selection mask *\/$/;"	m	struct:__anon62	file:
cMeanPathMask	HParm.c	/^   char* cMeanPathMask;       \/* cepstral mean path selection mask *\/$/;"	m	struct:__anon62	file:
cMeanVector	HParm.c	/^   Vector cMeanVector;   \/* vector loaded from cmean dir *\/$/;"	m	struct:__anon62	file:
cNIST	HWave.c	/^static int cNIST;    \/* current input char *\/$/;"	v	file:
cPOutP	HRec.c	/^static LogFloat cPOutP(PSetInfo *psi,Observation *obs,StateInfo *si,int id)$/;"	f	file:
cParm	HAdapt.c	/^static ConfParam *cParm[MAXGLOBS];      \/* config parameters *\/$/;"	v	file:
cParm	HArc.c	/^static ConfParam *cParm[MAXGLOBS];  \/* config parameters *\/$/;"	v	file:
cParm	HAudio.c	/^static ConfParam *cParm[MAXGLOBS];       \/* config parameters *\/$/;"	v	file:
cParm	HDict.c	/^static ConfParam *cParm[MAXGLOBS];      \/* config parameters *\/$/;"	v	file:
cParm	HExactMPE.c	/^static ConfParam *cParm[MAXGLOBS];  \/* config parameters *\/$/;"	v	file:
cParm	HFB.c	/^static ConfParam *cParm[MAXGLOBS];      \/* config parameters *\/$/;"	v	file:
cParm	HFBLat.c	/^static ConfParam *cParm[MAXGLOBS];  \/* config parameters *\/$/;"	v	file:
cParm	HGraf.c	/^static ConfParam *cParm[MAXGLOBS];      \/* config parameters *\/$/;"	v	file:
cParm	HGraf.null.c	/^static ConfParam *cParm[MAXGLOBS];      \/* config parameters *\/$/;"	v	file:
cParm	HGraf_WIN32.c	/^static ConfParam *cParm[MAXGLOBS];      \/* config parameters *\/$/;"	v	file:
cParm	HLM.c	/^static ConfParam *cParm[MAXGLOBS];      \/* config parameters *\/$/;"	v	file:
cParm	HLabel.c	/^static ConfParam *cParm[MAXGLOBS];        \/* config parameters *\/$/;"	v	file:
cParm	HLat.c	/^static ConfParam *cParm[MAXGLOBS];      \/* config parameters *\/$/;"	v	file:
cParm	HMap.c	/^static ConfParam *cParm[MAXGLOBS];      \/* config parameters *\/$/;"	v	file:
cParm	HMath.c	/^static ConfParam *cParm[MAXGLOBS];       \/* config parameters *\/$/;"	v	file:
cParm	HMem.c	/^static ConfParam *cParm[MAXGLOBS];       \/* config parameters *\/$/;"	v	file:
cParm	HModel.c	/^static ConfParam *cParm[MAXGLOBS];      \/* config parameters *\/$/;"	v	file:
cParm	HNet.c	/^static ConfParam *cParm[MAXGLOBS];      \/* config parameters *\/$/;"	v	file:
cParm	HParm.c	/^static ConfParam *cParm[MAXGLOBS];      \/* config parameters *\/$/;"	v	file:
cParm	HRec.c	/^static ConfParam *cParm[MAXGLOBS];      \/* config parameters *\/$/;"	v	file:
cParm	HShell.c	/^static ConfParam *cParm[MAXGLOBS];      \/* config parameters *\/$/;"	v	file:
cParm	HSigP.c	/^static ConfParam *cParm[MAXGLOBS];       \/* config parameters *\/$/;"	v	file:
cParm	HTrain.c	/^static ConfParam *cParm[MAXGLOBS];      \/* config parameters *\/$/;"	v	file:
cParm	HUtil.c	/^static ConfParam *cParm[MAXGLOBS];      \/* config parameters *\/$/;"	v	file:
cParm	HVQ.c	/^static ConfParam *cParm[MAXGLOBS];       \/* config parameters *\/$/;"	v	file:
cParm	HWave.c	/^static ConfParam *cParm[MAXGLOBS];       \/* config parameters *\/$/;"	v	file:
cSOutP	HRec.c	/^static LogFloat cSOutP(HMMSet *hset, int s, Observation *x, StreamElem *se,$/;"	f	file:
cacheMixoccHeap	HFBLat.c	/^MemHeap cacheMixoccHeap;$/;"	v
calcArc	HArc.h	/^  HArc *calcArc; \/*An identical arc (in hmm, start, end), which we use for purposes of forward-backward alignment [only if id==0].*\/$/;"	m	struct:_Arc
calign	HRec.c	/^   int calign;              \/* Number of align records after last collection *\/$/;"	m	struct:precinfo	file:
callBackEvent	HAudio.c	/^   HANDLE callBackEvent;$/;"	m	struct:_AudioIn	file:
callBackEvent	HAudio.c	/^   HANDLE callBackEvent;$/;"	m	struct:_AudioOut	file:
callBackIn	HAudio.c	/^void CALLBACK callBackIn(HWAVE hwaveIn, UINT msg, DWORD magic, $/;"	f
callBackOut	HAudio.c	/^void CALLBACK callBackOut(HWAVE hwaveIn, UINT msg, $/;"	f
ccs	HTrain.c	/^static ClusterSet *ccs; \/* current cluster set *\/$/;"	v	file:
cepLifter	HParm.c	/^   int cepLifter;             \/* Cepstral liftering coef *\/$/;"	m	struct:__anon62	file:
cepScale	HParm.c	/^   float cepScale;            \/* Scaling factor to avoid arithmetic problems *\/$/;"	m	struct:__anon62	file:
cepWin	HSigP.c	/^static Vector cepWin = NULL;        \/* Current cepstral weight window *\/$/;"	v	file:
cepWinL	HSigP.c	/^static int cepWinL=0;               \/* Current liftering coeff *\/$/;"	v	file:
cepWinSize	HSigP.c	/^static int cepWinSize=0;            \/* Size of current cepstral weight window *\/$/;"	v	file:
cf	HParm.c	/^   IOConfig cf;        \/* configuration for this channel *\/$/;"	m	struct:_ParmBuf	file:
cf	HParm.c	/^   IOConfigRec cf;        \/* Channel configuration *\/$/;"	m	struct:channelinfo	file:
cf	HSigP.h	/^   Vector cf;           \/* array[1..pOrder+1] of centre freqs *\/$/;"	m	struct:__anon80
cfHSKind	HModel.c	/^static HSetKind cfHSKind;$/;"	v	file:
cfWordBoundary	HNet.c	/^Boolean cfWordBoundary=TRUE;$/;"	v
cfkmap	HShell.c	/^static char *cfkmap[] = { $/;"	v	file:
cfs	HNet.h	/^   LabId *cfs;     \/* Sorted array of context free labids *\/$/;"	m	struct:hmmsetcxtinfo
ch	HUtil.c	/^static int ch;                 \/* Current character from source *\/$/;"	v	file:
chClear	HParm.c	/^   Boolean chClear;    \/* End of channel reached *\/$/;"	m	struct:_ParmBuf	file:
chOffset	HParm.c	/^   float chOffset;        \/* Average sample offset (-32768..32767) *\/$/;"	m	struct:channelinfo	file:
chPeak	HParm.c	/^   float chPeak;          \/* Scaled peak-to-peak range 0.0-1.0 *\/$/;"	m	struct:channelinfo	file:
chPeak	HParm.h	/^   float chPeak;              \/* Peak-to-peak input level for channel *\/$/;"	m	struct:__anon70
chType	HParm.c	/^   ChannelType chType; \/* type of input channel *\/$/;"	m	struct:_ParmBuf	file:
ch_ext_parm	HParm.c	/^   ch_ext_parm    \/* Externally defined parameterised source *\/$/;"	e	enum:channeltype	file:
ch_ext_wave	HParm.c	/^   ch_ext_wave,   \/* Externally defined waveform source *\/$/;"	e	enum:channeltype	file:
ch_haudio	HParm.c	/^   ch_haudio=4,   \/* The HAudio interface *\/$/;"	e	enum:channeltype	file:
ch_hparm	HParm.c	/^   ch_hparm,      \/* A parmeterised file *\/$/;"	e	enum:channeltype	file:
ch_hrfe	HParm.c	/^   ch_hrfe,       \/* The RFE is not yet reimplemented *\/$/;"	e	enum:channeltype	file:
ch_hwave	HParm.c	/^   ch_hwave,      \/* A waveform file *\/$/;"	e	enum:channeltype	file:
chain	HNet.c	/^   NetNode *chain;  \/* Chain of other nodes in word *\/$/;"	m	struct:pronholder	file:
chain	HNet.h	/^   NetNode *chain;$/;"	m	struct:_NetNode
chain	HNet.h	/^   NetNode *chain;$/;"	m	struct:__anon60
chain	HNet.h	/^   struct lattice *chain;       \/* Linked list used for various jobs *\/$/;"	m	struct:lattice	typeref:struct:lattice::lattice
chain	HNet.h	/^   struct sublatdef *chain; \/* Next sublat referring to lat *\/$/;"	m	struct:sublatdef	typeref:struct:sublatdef::sublatdef
chain	HRec.c	/^   NxtPath *chain;      \/* Next of NBest Paths *\/$/;"	m	struct:nxtpath	file:
chain	HRec.h	/^   NxtPath *chain;      \/* Next of NBest Paths *\/$/;"	m	struct:path
chan	HParm.c	/^   ChannelInfo *chan;  \/* input channel for this buffer *\/$/;"	m	struct:_ParmBuf	file:
channelinfo	HParm.c	/^typedef struct channelinfo {$/;"	s	file:
channels	HAudio.c	/^   long channels ;$/;"	m	struct:_AudioIn	file:
channels	HAudio.c	/^   long channels ;$/;"	m	struct:_AudioOut	file:
channeltype	HParm.c	/^typedef enum channeltype {$/;"	g	file:
chcount	HShell.h	/^   int chcount;         \/* num chars from start *\/$/;"	m	struct:__anon75
checking	HModel.c	/^static Boolean checking   = TRUE;       \/* check HMM defs *\/$/;"	v	file:
child	HModel.h	/^  struct _RegNode **child;  \/* children of this node NULL if terminal *\/$/;"	m	struct:_RegNode	typeref:struct:_RegNode::_RegNode
cis	HNet.h	/^   LabId *cis;     \/* Sorted array of context independent labids *\/$/;"	m	struct:hmmsetcxtinfo
ck	HTrain.h	/^   CovKind ck;     \/* type of covariance if any *\/$/;"	m	struct:__anon83
ckUsage	HModel.h	/^   int ckUsage[NUMCKIND];  \/* Number of components using given ckind *\/$/;"	m	struct:_HMMSet
ckind	HModel.h	/^   CovKind ckind;          \/* cov kind - only global in V1.X *\/$/;"	m	struct:_HMMSet
ckind	HModel.h	/^   CovKind ckind;       \/* kind of covariance *\/$/;"	m	struct:__anon41
ckind	HVQ.h	/^   CovKind ckind;       \/* kind of covariance used, if any*\/$/;"	m	struct:_VQTabRec
cl	HTrain.h	/^   Cluster *cl;    \/* array[1..numClust]of Cluster *\/$/;"	m	struct:__anon83
clen	HNet.c	/^   int clen;        \/* Number of non-cf phones in pronunciation *\/$/;"	m	struct:pronholder	file:
cm	HParm.c	/^   DMatrix cm;        \/* Cosine matrix for IDFT *\/ $/;"	m	struct:__anon62	file:
cmap	HTrain.c	/^static ShortVec cmap;   \/* array[1..cvp->nItems]of cluster index *\/$/;"	v	file:
cmllrAdaptKind	HAdapt.c	/^static AdaptKind cmllrAdaptKind = BASE;$/;"	v	file:
cmllrBaseClass	HAdapt.c	/^static char *cmllrBaseClass = NULL;$/;"	v	file:
cmllrBlockSize	HAdapt.c	/^static IntVec cmllrBlockSize = NULL;$/;"	v	file:
cmllrRegTree	HAdapt.c	/^static char *cmllrRegTree = NULL;$/;"	v	file:
cmllrSplitThresh	HAdapt.c	/^static float cmllrSplitThresh = 1000.0;$/;"	v	file:
cn	HArc.h	/^  CorrN *cn; \/* if doing dynamic MPE. *\/$/;"	m	struct:_MPEStruct
colours	HGraf.c	/^static int colours[MAX_COLOURS];$/;"	v	file:
colours	HGraf_WIN32.c	/^static unsigned char colours[MAX_COLOURS][3];    \/* r,g,b *\/$/;"	v	file:
compatMode	HLabel.c	/^static Boolean compatMode = FALSE;  \/* Allow spaces around . or \/\/\/ *\/$/;"	v	file:
compressFact	HParm.c	/^   float compressFact;        \/* Compression factor for PLP *\/  $/;"	m	struct:__anon62	file:
compressMerge	HLat.c	/^static Boolean compressMerge = TRUE; \/* compressing lattice scores when merging duplicates *\/$/;"	v	file:
confList	HShell.c	/^static ConfigEntry *confList = NULL;$/;"	v	file:
confName	HParm.c	/^   char *confName;        \/* Configuration name associated with mean *\/$/;"	m	struct:channelinfo	file:
config	HAudio.c	/^   ALconfig config;          \/* configuration record *\/$/;"	m	struct:_AudioIn	file:
config	HAudio.c	/^   ALconfig config;          \/* configuration record *\/$/;"	m	struct:_AudioOut	file:
correctness	HArc.h	/^  float correctness;  \/* for inexact MPE. *\/$/;"	m	struct:_MPEStruct
counts	HLM.h	/^   int counts[NSIZE+1];         \/* Number of [n]grams *\/$/;"	m	struct:ngramlm
cov	HAdapt.c	/^   Covariance cov;$/;"	m	struct:__anon7	file:
cov	HModel.h	/^   Covariance cov;      \/* covariance matrix or vector *\/$/;"	m	struct:__anon41
cov	HTrain.h	/^   Covariance cov;   \/* covariance counts *\/$/;"	m	struct:__anon87
cov	HTrain.h	/^   Covariance cov; \/* covariance of cluster *\/$/;"	m	struct:__anon82
cov	HVQ.h	/^   Covariance cov;      \/* null or inverse variance or covariance *\/$/;"	m	struct:_VQNodeRec
covarChanged	HAdapt.c	/^static Boolean covarChanged = FALSE;$/;"	v	file:
covarPChanged	HAdapt.c	/^static Boolean covarPChanged = FALSE;$/;"	v	file:
cpdf	HModel.h	/^   MixtureElem *cpdf;    \/* PLAINHS or SHAREDHS *\/$/;"	m	union:__anon43
cpth	HRec.c	/^   int cpth;                \/* Number of path records after last collection *\/$/;"	m	struct:precinfo	file:
crcc	HParm.c	/^   unsigned short crcc; \/* Running CRCC *\/$/;"	m	struct:__anon62	file:
crcc	HParm.c	/^   unsigned short crcc;\/* Put crcc here when we read it !! *\/$/;"	m	struct:_ParmBuf	file:
csize	HTrain.h	/^   int csize;      \/* num items in this cluster *\/$/;"	m	struct:__anon82
cur	HAudio.c	/^   int cur;               \/* Current sample index *\/$/;"	m	struct:mmapibuf	file:
curChan	HParm.c	/^static ChannelInfo *curChan=NULL;$/;"	v	file:
curElem	HMem.h	/^   size_t curElem;      \/*  current #elems per blk   curr #bytes per blk  *\/$/;"	m	struct:__anon37
curMeanVec	HParm.c	/^   Vector curMeanVec;     \/* Current mean *\/$/;"	m	struct:meanrec	file:
curNumCl	HTrain.c	/^static int curNumCl;    \/* num clust currently created *\/$/;"	v	file:
curPK	HParm.c	/^   ParmKind curPK;    \/* Used to track conversion from srcPK to tgtPK *\/$/;"	m	struct:__anon62	file:
curVol	HAudio.c	/^   float curVol;             \/* Current volume of input speech *\/$/;"	m	struct:_AudioIn	file:
curVol	HParm.c	/^   float curVol;      \/* current volume dB (0.0-100.0) *\/$/;"	m	struct:__anon62	file:
curVol	HParm.h	/^   float curVol;              \/* Volume level of last frame (0.0-100.0dB) *\/$/;"	m	struct:__anon70
curXForm	HModel.h	/^   AdaptXForm *curXForm;$/;"	m	struct:_HMMSet
curch	HLabel.c	/^static int curch = ' ';$/;"	v	file:
current	HAudio.c	/^   int current;             \/* Index of current buffer *\/$/;"	m	struct:_AudioIn	file:
current	HAudio.c	/^   int current;             \/* Index of current buffer *\/$/;"	m	struct:_AudioOut	file:
cvp	HTrain.c	/^static Sequence cvp;    \/* current vector pool being clustered *\/$/;"	v	file:
cxs	HNet.h	/^   LabId *cxs;     \/* Sorted array of labids indexed by context *\/$/;"	m	struct:hmmsetcxtinfo
dShort	HParm.c	/^   Boolean dShort;     \/* data is array of shorts not floats (DISCRETE) *\/$/;"	m	struct:_ParmBuf	file:
data	HAudio.c	/^   short *data;          \/* actual data buffer *\/$/;"	m	struct:__anon13	file:
data	HLM.h	/^   data;$/;"	m	struct:lmodel	typeref:union:lmodel::__anon33
data	HLat.c	/^   } data;$/;"	m	struct:_SubLNode	typeref:union:_SubLNode::__anon30	file:
data	HMem.h	/^   Ptr   data;          \/*        actual data for this block              *\/$/;"	m	struct:_Block
data	HParm.c	/^   void *data;       \/* parameterised data for this block *\/$/;"	m	struct:pblock	file:
data	HWave.c	/^   short *data;         \/* Actual data (always short once loaded) *\/$/;"	m	struct:_Wave	file:
data	esignal.h	/^    void        *data;          \/* GLOBAL data area *\/$/;"	m	struct:FieldSpec
data	esignal.h	/^    void        *data;          \/* storage area for data *\/$/;"	m	struct:Array
dataFormat	HWave.c	/^   int32 dataFormat;     \/* format code *\/$/;"	m	struct:__anon97	file:
dataLocation	HWave.c	/^   int32 dataLocation;   \/* offset to start of data *\/$/;"	m	struct:__anon97	file:
dataSize	HWave.c	/^   int32 dataSize;       \/* number of bytes of data *\/$/;"	m	struct:__anon97	file:
dataStack	HFB.h	/^  MemHeap dataStack;  \/* utterance data information heap *\/$/;"	m	struct:__anon17
dataStack2	HFB.h	/^  MemHeap dataStack2; \/* utterance data2 information heap *\/$/;"	m	struct:__anon17
datadir	Makefile	/^datadir = ${prefix}\/share$/;"	m
dck	HTrain.c	/^static CovKind dck;     \/* defines type of distance calc *\/$/;"	v	file:
dcov	HTrain.c	/^static Covariance dcov; \/* covariance to use in distance calc *\/$/;"	v	file:
debug	HArc.c	/^static int debug=0;$/;"	v	file:
debug_bestcorr	HExactMPE.c	/^static int debug_bestcorr = 1000;$/;"	v	file:
debug_level	HMem.c	/^int debug_level = 0;               \/* For esps linking *\/$/;"	v
def	HLabel.h	/^   MLFDef def;          \/* the actual def *\/$/;"	m	struct:_MLFEntry
defChan	HParm.c	/^static ChannelInfo *defChan=NULL;$/;"	v	file:
defConf	HParm.c	/^static const IOConfigRec defConf = {$/;"	v	file:
defMeanVec	HParm.c	/^   Vector defMeanVec;     \/* Default mean vector for reset *\/$/;"	m	struct:meanrec	file:
defargs	HShell.c	/^static char *defargs[2]={ "<Uninitialised>", "" };$/;"	v	file:
delWin	HParm.c	/^   int delWin;                \/* Delta window halfsize *\/$/;"	m	struct:__anon62	file:
den_index	HFBLat.h	/^  float den_index; \/*only for MPE. *\/ \/*make sure set. *\/$/;"	m	struct:__anon23
det	HAdapt.c	/^   float det;$/;"	m	struct:_ObsCache	file:
det	HModel.h	/^  float det;           \/* determinant of linxform *\/$/;"	m	struct:__anon53
diagCovXForm	HAdapt.c	/^static AdaptXForm* diagCovXForm = NULL;$/;"	v	file:
dim	HAdapt.c	/^   int dim;$/;"	m	struct:__anon6	file:
dim	esignal.h	/^    long        *dim;           \/* vector of dimensions *\/$/;"	m	struct:Array
dim	esignal.h	/^    long        *dim;           \/* vector of dimensions *\/$/;"	m	struct:FieldSpec
dirName	HModel.c	/^  char *dirName;           \/* input XForm directory name *\/$/;"	m	struct:_XFDirInfo	file:
discreteLZero	HModel.c	/^static Boolean discreteLZero=FALSE;     \/* map DLOGZERO to LZERO *\/$/;"	v	file:
dispDEEP	HGraf.c	/^static unsigned int  ncells, dispWIDE, dispHIGH, dispDEEP;$/;"	v	file:
dispDEEP	HGraf_WIN32.c	/^static int   dispDEEP,dispWIDE,dispHIGH;$/;"	v	file:
dispHIGH	HGraf.c	/^static unsigned int  ncells, dispWIDE, dispHIGH, dispDEEP;$/;"	v	file:
dispHIGH	HGraf_WIN32.c	/^static int   dispDEEP,dispWIDE,dispHIGH;$/;"	v	file:
dispWIDE	HGraf.c	/^static unsigned int  ncells, dispWIDE, dispHIGH, dispDEEP;$/;"	v	file:
dispWIDE	HGraf_WIN32.c	/^static int   dispDEEP,dispWIDE,dispHIGH;$/;"	v	file:
dkind	HModel.h	/^   DurKind dkind;          \/* kind of duration model (model or state) *\/$/;"	m	struct:_HMMSet
doubleFFT	HParm.c	/^   Boolean doubleFFT;         \/* use twice the required FFT size *\/$/;"	m	struct:__anon62	file:
dpdf	HModel.h	/^   ShortVec dpdf;        \/* DISCRETE *\/$/;"	m	union:__anon43
dur	HModel.h	/^   SVector dur;            \/* vector of model duration params, if any *\/   $/;"	m	struct:__anon49
dur	HModel.h	/^   SVector dur;         \/* vector of state duration params, if any *\/   $/;"	m	struct:__anon47
dur	HNet.h	/^   float dur;         \/* Duration of segment in seconds *\/$/;"	m	struct:lalign
eNormalise	HParm.c	/^   Boolean eNormalise;        \/* Normalise log energy *\/$/;"	m	struct:__anon62	file:
eScale	HParm.c	/^   float eScale;              \/* Energy scale factor *\/$/;"	m	struct:__anon62	file:
eSep	HFBLat.c	/^static  Boolean eSep;$/;"	v	file:
eSep	HParm.h	/^   Boolean eSep;         \/* Energy is in separate stream *\/$/;"	m	struct:__anon68
elemSize	HMem.h	/^   size_t elemSize;     \/*  size of each elem              1 always       *\/$/;"	m	struct:__anon37
enableBlockAdapt	HAdapt.c	/^static IntVec enableBlockAdapt = NULL;$/;"	v	file:
end	HArc.h	/^  CorrN *end;$/;"	m	struct:_CorrA
end	HArc.h	/^  HArc *end;$/;"	m	struct:ArcInfoStruct
end	HArc.h	/^  HArc *end;$/;"	m	struct:_ArcTrans
end	HFBLat.c	/^   int end;$/;"	m	struct:__anon21	file:
end	HLabel.h	/^   HTime start,end;         \/* Start and end times in 100ns units *\/$/;"	m	struct:_Label
end	HLat.c	/^   SubLNode *end;$/;"	m	struct:_SubLArc	file:
end	HNet.h	/^   NodeId end;         \/* Node at end of word *\/$/;"	m	struct:larc
end	HNet.h	/^   NodeId end;         \/* Node at end of word *\/$/;"	m	struct:larc_e
end	HNet.h	/^   NodeId end;$/;"	m	struct:larc_s
endLMWord	HLat.c	/^static LabId endLMWord;         \/* word at end in LM (<\/s>) *\/$/;"	v	file:
endWord	HLat.c	/^static LabId endWord;           \/* word at end of Lattice (!SENT_END) *\/$/;"	v	file:
end_foll	HArc.h	/^  ArcTrans *end_foll;  \/*similarly for the end_{foll,prec}. *\/$/;"	m	struct:_ArcTrans
end_foll	HArc.h	/^  CorrA *end_foll;$/;"	m	struct:_CorrA
end_prec	HArc.h	/^  ArcTrans *end_prec; $/;"	m	struct:_ArcTrans
endi	HArc.h	/^  int endi;$/;"	m	struct:_CorrN
ends	HNet.c	/^   NetNode *ends;   \/* Chain of final models *\/$/;"	m	struct:pronholder	file:
enindex	HShell.c	/^   long enindex;                        \/* end sample to extract *\/$/;"	m	struct:__anon71	file:
eql	HParm.c	/^   Vector eql;        \/* Equal loundness curve *\/$/;"	m	struct:__anon62	file:
event	HGraf.h	/^   HEvent event;     \/* type of event *\/$/;"	m	struct:__anon24
evin	HAudio.c	/^   Environment *evin;$/;"	m	struct:_AudioIn	file:
evout	HAudio.c	/^   Environment *evout;$/;"	m	struct:_AudioOut	file:
exec_prefix	Makefile	/^exec_prefix = ${prefix}$/;"	m
exit	HRec.c	/^   TokenSet *exit;      \/* TokenSet in exit state *\/$/;"	m	struct:_NetInst	file:
ext	HParm.c	/^   HParmSrcDef ext;     \/* external source functions *\/$/;"	m	struct:_ParmBuf	file:
extFileNext	HShell.c	/^static int extFileNext = 0;             \/* next slot to save into *\/$/;"	v	file:
extFileUsed	HShell.c	/^static int extFileUsed = 0;             \/* total ext files in buffer *\/$/;"	v	file:
extFiles	HShell.c	/^static ExtFile extFiles[MAXEFS];        \/* circ buf of ext file names *\/$/;"	v	file:
extendedFileNames	HShell.c	/^static Boolean extendedFileNames = TRUE; \/* allow extended file names *\/$/;"	v	file:
f	HShell.h	/^   FILE *f;             \/* input stream *\/$/;"	m	struct:__anon75
f	HShell.h	/^   double f;$/;"	m	union:__anon77
fClose	HParm.c	/^   void (*fClose)(Ptr xInfo,Ptr bInfo);  \/* Close buffer and free resources *\/$/;"	m	struct:hparmsrcdef	file:
fCnt	HParm.c	/^   int fCnt;              \/* Number of files processed for this channel *\/$/;"	m	struct:channelinfo	file:
fGetData	HParm.c	/^   int (*fGetData)(Ptr xInfo,Ptr bInfo,int n,Ptr data);  \/* Read samples *\/$/;"	m	struct:hparmsrcdef	file:
fGetWaveData	HParm.c	/^static int fGetWaveData(int n,void *data,short *res,$/;"	f	file:
fHead	HAudio.c	/^   mmApiBuf *fHead;         \/* Head of filled buffer list *\/$/;"	m	struct:_AudioIn	file:
fName	HModel.h	/^   char *fName;            \/* MMF file name *\/$/;"	m	struct:_MMFInfo
fNumSamp	HParm.c	/^   int (*fNumSamp)(Ptr xInfo,Ptr bInfo);  \/* Query samples readable without blocking *\/$/;"	m	struct:hparmsrcdef	file:
fOpen	HParm.c	/^   Ptr (*fOpen)(Ptr xInfo,char *fn,BufferInfo *info);  \/* Open new buffer *\/$/;"	m	struct:hparmsrcdef	file:
fShort	HParm.c	/^   Boolean fShort;     \/* file is array of shorts (DISCRETE, COMPX or IREFC) *\/$/;"	m	struct:_ParmBuf	file:
fStart	HParm.c	/^   void (*fStart)(Ptr xInfo,Ptr bInfo);  \/* Start data capture for real-time sources *\/$/;"	m	struct:hparmsrcdef	file:
fStop	HParm.c	/^   void (*fStop)(Ptr xInfo,Ptr bInfo);  \/* Stop data capture for real-time sources *\/$/;"	m	struct:hparmsrcdef	file:
fTail	HAudio.c	/^   mmApiBuf *fTail;         \/* Tail of filled buffer list *\/$/;"	m	struct:_AudioIn	file:
factorLM	HNet.c	/^Boolean factorLM=FALSE;$/;"	v
farc	HNet.h	/^   ArcId farc;         \/* Next arc following start node *\/$/;"	m	struct:larc
farc	HNet.h	/^   ArcId farc;$/;"	m	struct:larc_s
farc	HNet.h	/^   EArcId farc;        \/* Next arc following start node *\/$/;"	m	struct:larc_e
fbInfo	HFBLat.c	/^static FBLatInfo *fbInfo; \/* current fbInfo, so don't have to pass it around. *\/$/;"	v	file:
fbInfo	HParm.c	/^   FBankInfo fbInfo;  \/* FBank info used for filterbank analysis *\/$/;"	m	struct:__anon62	file:
fbank	HParm.c	/^   Vector fbank;      \/* filterbank vector *\/$/;"	m	struct:__anon62	file:
fc	HNet.c	/^   int fc;          \/* Final context - cache saves finding for all links *\/$/;"	m	struct:pronholder	file:
fci	HNet.c	/^   Boolean fci;     \/* Final phone context independent *\/$/;"	m	struct:pronholder	file:
fcmp	HParm.c	/^static int fcmp(const void *v1,const void *v2)$/;"	f	file:
fcra	HNet.h	/^   EArcId fcra;        \/* List linked in both directions *\/$/;"	m	struct:larc_e
fct	HNet.c	/^   LogFloat fct;    \/* LM likelihood to be factored into each phone *\/$/;"	m	struct:pronholder	file:
fftN	HSigP.h	/^   int fftN;            \/* fft size *\/$/;"	m	struct:__anon80
fg	HGraf.h	/^   HColour fg, bg;            \/* colors *\/$/;"	m	struct:_HButton
fidx	HLabel.h	/^   int fidx;      \/* MLF file index in mlfile *\/$/;"	m	struct:__anon28
fidx	HModel.h	/^   int fidx;               \/* MMF file index *\/$/;"	m	struct:_MMFInfo
fidx	HModel.h	/^   short fidx;             \/* idx of MMF file (0 = SMF) *\/$/;"	m	struct:_MacroDef
file	HLabel.c	/^   FILE *file;$/;"	m	struct:__anon26	file:
fileSize	HWave.c	/^   int32 fileSize;    \/* num samples * 2 *\/$/;"	m	struct:__anon96	file:
fill	HWave.c	/^   char fill[832];$/;"	m	struct:__anon96	file:
fill1	HWave.c	/^   char fill1[182];$/;"	m	struct:__anon96	file:
filtermap	HShell.c	/^static char *filtermap[] = {$/;"	v	file:
final	HNet.h	/^   NetNode final;     \/* Final (dummy) node *\/$/;"	m	struct:__anon60
finite	HTrain.h	49;"	d
firstElem	HModel.h	/^   Boolean *firstElem;     \/* first element added to hmem during MakeHMMSet*\/$/;"	m	struct:_HMMSet
firstFree	HMem.h	/^   size_t firstFree;    \/* idx of 1st free elem      idx of stack top     *\/$/;"	m	struct:_Block
firstTime	HFBLat.h	/^  Boolean firstTime ;     \/* Flag used to enable creation of ot *\/$/;"	m	struct:__anon23
flags	HRec.c	/^   int flags;           \/* Flags, active ... *\/$/;"	m	struct:_NetInst	file:
fmt	HWave.c	/^   FileFormat fmt;      \/* Format of associated source file *\/$/;"	m	struct:_Wave	file:
fmtmap	HWave.c	/^static char *fmtmap[] = {$/;"	v	file:
fname	HModel.h	/^  char *fname;                      \/* filename of where the xform was loaded *\/$/;"	m	struct:_AdaptXForm
fname	HModel.h	/^  char *fname;         \/* filename of where the baseclass was loaded *\/$/;"	m	struct:__anon50
fname	HModel.h	/^  char *fname;         \/* filename of where the input xform was loaded *\/$/;"	m	struct:__anon55
fname	HModel.h	/^  char *fname;         \/* filename of where the regTree was loaded *\/$/;"	m	struct:RegTree
foll	HArc.h	/^  HArc *foll;$/;"	m	struct:_Arc
foll	HLat.c	/^   SubLArc *foll;$/;"	m	struct:_SubLNode	file:
foll	HNet.h	/^   ArcId foll;         \/* Linked list of arcs following node *\/$/;"	m	struct:lnode
follTrans	HArc.h	/^  ArcTrans *follTrans;  \/*Arcs which follow.*\/$/;"	m	struct:_Arc
follTrans	HArc.h	/^  CorrA *follTrans;$/;"	m	struct:_CorrN
forceCxtExp	HNet.c	/^Boolean forceCxtExp=FALSE;$/;"	v
forceHSKind	HModel.c	/^static Boolean forceHSKind= FALSE;      \/* force HMM Set Kind *\/$/;"	v	file:
forceLeftBiphones	HNet.c	/^Boolean forceLeftBiphones=FALSE;$/;"	v
forceOutput	HRec.c	/^static Boolean forceOutput=FALSE;$/;"	v	file:
forceRightBiphones	HNet.c	/^Boolean forceRightBiphones=FALSE;$/;"	v
formType	HWave.c	/^   int32 formType;    \/* must be 'AIFF' *\/$/;"	m	struct:__anon98	file:
format	HNet.h	/^   LatFormat format;	       	\/* indicate which fields are valid *\/$/;"	m	struct:lattice
fourthWin	HParm.c	/^   int fourthWin;             \/* Fourth order differential halfsize *\/$/;"	m	struct:__anon62	file:
frBuf	HAudio.c	/^   short * frBuf;            \/* buffer for constructing frames *\/$/;"	m	struct:_AudioIn	file:
frIdx	HWave.c	/^   int frIdx;           \/* Start of next frame *\/$/;"	m	struct:_Wave	file:
frMax	HParm.c	/^   float frMax;           \/* Measured maximum frame energy for channel (dB) *\/$/;"	m	struct:channelinfo	file:
frMin	HParm.c	/^   float frMin;           \/* Measured minimum frame energy for channel (dB) *\/$/;"	m	struct:channelinfo	file:
frOLap	HAudio.c	/^   Vector frOLap;            \/* frame overlap buffer used by GetAudio *\/$/;"	m	struct:_AudioIn	file:
frRate	HAudio.c	/^   int frRate;               \/* num samples between speech frames *\/$/;"	m	struct:_AudioIn	file:
frRate	HParm.c	/^   int frRate;        \/* Number of waveform samples advanced each frame *\/$/;"	m	struct:__anon62	file:
frRate	HParm.h	/^   int frRate;                \/* Number of source samples forward each frame *\/$/;"	m	struct:__anon70
frRate	HWave.c	/^   int frRate;          \/* Frame rate *\/$/;"	m	struct:_Wave	file:
frSize	HAudio.c	/^   int frSize;               \/* num samples per speech frame *\/$/;"	m	struct:_AudioIn	file:
frSize	HParm.c	/^   int frSize;        \/* Total number of waveform samples in frame *\/$/;"	m	struct:__anon62	file:
frSize	HParm.h	/^   int frSize;                \/* Number of source samples in each frame *\/$/;"	m	struct:__anon70
frSize	HWave.c	/^   int frSize;          \/* Num samples per frame *\/$/;"	m	struct:_Wave	file:
frag_size	HAudio.c	/^static int frag_size;$/;"	v	file:
frame	HRec.c	/^   int frame;               \/* Current frame number *\/$/;"	m	struct:precinfo	file:
frame	HRec.c	/^   int frame;           \/* Frame number upon entering state\/model end *\/$/;"	m	struct:align	file:
frame	HRec.h	/^   int frame;               \/* Current frame number *\/$/;"	m	struct:vrecinfo
frame	HRec.h	/^   int frame;           \/* Time (frame) of boundary (end of word) *\/$/;"	m	struct:path
frameDur	HRec.h	/^   HTime frameDur;          \/* Sample rate (to convert frame to time) *\/$/;"	m	struct:vrecinfo
frameSize	HSigP.h	/^   int frameSize;       \/* speech frameSize *\/$/;"	m	struct:__anon80
framedur	HArc.h	/^  float framedur;$/;"	m	struct:ArcInfoStruct
framedur	HNet.h	/^   HTime framedur;              \/* Frame duration in 100ns units *\/$/;"	m	struct:lattice
frames	HParm.c	/^   int frames;            \/* Number of frames processed in session *\/$/;"	m	struct:meanrec	file:
frcSil	HNet.c	/^char *frcSil=NULL,frcSilBuf[MAXSTRLEN];$/;"	v
frcSilBuf	HNet.c	/^char *frcSil=NULL,frcSilBuf[MAXSTRLEN];$/;"	v
fres	HSigP.h	/^   float fres;          \/* scaled fft resolution *\/$/;"	m	struct:__anon80
fullname	esignal.h	/^    char	*fullname;	\/* name including parent name, if any,$/;"	m	struct:FieldSpec
fv	HParm.h	/^   Vector fv[SMAX];      \/* array[1..swidth[0]] of Vector *\/$/;"	m	struct:__anon68
fvSegs	HTrain.h	/^   Sequence fvSegs;     \/* each seg is a sequence of fv[SMAX] *\/$/;"	m	struct:_SegStoreRec
fwlike	HLat.h	/^   LogDouble fwlike;     \/* forward likelihood *\/$/;"	m	struct:FBlnodeInfo
gConst	HAdapt.c	/^   float gConst;$/;"	m	struct:__anon7	file:
gConst	HModel.h	/^   float gConst;        \/* Precomputed component of b(x) *\/$/;"	m	struct:__anon41
gains	HAudio.c	/^   AGainEntry gains[4];$/;"	m	struct:_AudioIn	file:
gains	HAudio.c	/^   AGainEntry gains[4];$/;"	m	struct:_AudioOut	file:
gcheap	HMem.c	/^MemHeap gcheap;   \/* global CHEAP for general purpose use *\/$/;"	v
gconst	HVQ.h	/^   float gconst;        \/* const part of log prob for INVDIAGC & FULLC *\/$/;"	m	struct:_VQNodeRec
gconst_cmp	HModel.c	/^static int gconst_cmp(const void *v1,const void *v2)$/;"	f	file:
gcs	HGraf.c	/^static GC            gcs[MAX_GC];$/;"	v	file:
genBeam	HRec.h	/^   LogFloat genBeam;        \/* Global beam width *\/$/;"	m	struct:vrecinfo
genMaxNode	HRec.c	/^   NetNode *genMaxNode;     \/* Most likely node in network *\/$/;"	m	struct:precinfo	file:
genMaxNode	HRec.h	/^   NetNode *genMaxNode;     \/* Most likely node in network *\/$/;"	m	struct:vrecinfo
genMaxTok	HRec.c	/^   Token genMaxTok;         \/* Most likely token *\/$/;"	m	struct:precinfo	file:
genMaxTok	HRec.h	/^   Token genMaxTok;         \/* Most likely token *\/$/;"	m	struct:vrecinfo
genThresh	HRec.c	/^   LogFloat genThresh;      \/* Cutoff from global beam *\/$/;"	m	struct:precinfo	file:
greys	HGraf.c	/^static int greys[MAX_GREYS];$/;"	v	file:
greys	HGraf_WIN32.c	/^static unsigned char greys[MAX_GREYS];$/;"	v	file:
growf	HMem.h	/^   float growf;         \/*           succ blocks grow as 1+growf          *\/$/;"	m	struct:__anon37
gstack	HMem.c	/^MemHeap gstack;   \/* global MSTAK for general purpose use *\/$/;"	v
h	HArc.c	/^   HArc *h;$/;"	m	struct:_ArcList	file:
h	HFBLat.c	/^   CorrectArc *h;$/;"	m	struct:_CorrectArcList	file:
h	HGraf.h	/^   int x, y, w, h;            \/* size of button rectangle *\/$/;"	m	struct:_HButton
h	HUtil.h	/^   int h;            \/* current mtab slot *\/$/;"	m	struct:__anon90
hadapt_vc_id	HAdapt.c	/^char *hadapt_vc_id =  "$Id: HAdapt.c,v 1.2 2006\/12\/07 11:09:07 mjfg Exp $";$/;"	v
hadapt_version	HAdapt.c	/^char *hadapt_version = "!HVER!HAdapt:   3.4.1  [CUED 12\/03\/09]";$/;"	v
hamWin	HSigP.c	/^static Vector hamWin = NULL;        \/* Current Hamming window *\/$/;"	v	file:
hamWinSize	HSigP.c	/^static int hamWinSize = 0;          \/* Size of current Hamming window *\/$/;"	v	file:
hasfv	HTrain.h	/^   Boolean hasfv;$/;"	m	struct:_SegStoreRec
hashsize	HLM.h	/^   unsigned int hashsize;       \/* Size of hashtab (adjusted by lm counts) *\/$/;"	m	struct:ngramlm
hashtab	HLM.h	/^   NEntry **hashtab;            \/* Hash table for finding NEntries *\/$/;"	m	struct:ngramlm
hashtab	HLabel.c	/^static NameCell *hashtab[HASHSIZE];  \/* the actual table *\/$/;"	v	file:
hasvq	HTrain.h	/^   Boolean hasvq;$/;"	m	struct:_SegStoreRec
haudio_vc_id	HAudio.c	/^char *haudio_vc_id = "$Id: HAudio.c,v 1.1.1.1 2006\/10\/11 09:54:57 jal58 Exp $";$/;"	v
haudio_version	HAudio.c	/^char *haudio_version = "!HVER!HAudio:   3.4.1 [CUED 12\/03\/09]";$/;"	v
hd	HTrain.h	/^   IBLink hd;        \/* head of list of item blocks *\/$/;"	m	struct:__anon81
hdict_vc_id	HDict.c	/^char *hdict_vc_id = "$Id: HDict.c,v 1.1.1.1 2006\/10\/11 09:54:57 jal58 Exp $";$/;"	v
hdict_version	HDict.c	/^char *hdict_version = "!HVER!HDict:   3.4.1 [CUED 12\/03\/09]";$/;"	v
hdrSize	HWave.c	/^   int  hdrSize;        \/* Header size in bytes *\/$/;"	m	struct:_Wave	file:
hdrSize	HWave.c	/^   short hdrSize;    \/* should be 1336 *\/$/;"	m	struct:__anon96	file:
hdrSize	HWave.c	/^   short hdrSize;$/;"	m	struct:__anon94	file:
hdrSize	HWave.c	/^   short hdrSize;$/;"	m	struct:__anon95	file:
head	HLabel.h	/^   LLink head;              \/* Pointer to head of List *\/$/;"	m	struct:_LabList
head	HLabel.h	/^   LabList *head;          \/* Pointer to head of Label List *\/$/;"	m	struct:__anon27
head	HRec.c	/^   NetInst head;            \/* Head (oldest) of Inst linked list *\/$/;"	m	struct:precinfo	file:
headac	HAdapt.c	/^static AccCache *headac = NULL;$/;"	v	file:
headboc	HAdapt.c	/^static ObsCache *headboc = NULL; $/;"	v	file:
headpoc	HAdapt.c	/^static ObsCache *headpoc = NULL; $/;"	v	file:
heap	HDict.h	/^   MemHeap heap;        \/* storage for dictionary *\/$/;"	m	struct:__anon15
heap	HLM.h	/^   MemHeap *heap;               \/* Heap for allocating lm structs *\/$/;"	m	struct:lmodel
heap	HLM.h	/^   MemHeap *heap;               \/* Pointer to heap *\/$/;"	m	struct:matbilm
heap	HLM.h	/^   MemHeap *heap;               \/* Pointer to heap *\/$/;"	m	struct:ngramlm
heap	HMem.c	/^   MemHeap *heap;$/;"	m	struct:_MemHeapRec	file:
heap	HMem.h	/^   BlockP heap;         \/*               linked list of blocks            *\/$/;"	m	struct:__anon37
heap	HNet.h	/^   MemHeap *heap;               \/* Heap lattice uses *\/$/;"	m	struct:lattice
heap	HNet.h	/^   MemHeap *heap;     \/* heap for allocating network *\/$/;"	m	struct:__anon60
heap	HRec.c	/^   MemHeap heap;            \/* Memory for this set of pre-comps *\/$/;"	m	struct:psetinfo	file:
heap	HRec.h	/^   MemHeap heap;            \/* General storage CHEAP (inc vri) *\/$/;"	m	struct:vrecinfo
heapList	HMem.c	/^static MemHeapRec *heapList = NULL;$/;"	v	file:
hexactmpe_vc_id	HExactMPE.c	/^char *hexactmpe_vc_id = "$Id: HExactMPE.c,v 1.1.1.1 2006\/10\/11 09:54:57 jal58 Exp $";$/;"	v
hexactmpe_version	HExactMPE.c	/^char *hexactmpe_version = "!HVER!HExactMPE:   3.4.1 [CUED 12\/03\/09]";$/;"	v
hfb_vc_id	HFB.c	/^char *hfb_vc_id = "$Id: HFB.c,v 1.1.1.1 2006\/10\/11 09:54:57 jal58 Exp $";$/;"	v
hfb_version	HFB.c	/^char *hfb_version = "!HVER!HFB:   3.4.1 [CUED 12\/03\/09]";$/;"	v
hfblat_vc_id	HFBLat.c	/^char *hfblat_vc_id = "$Id: HFBLat.c,v 1.1.1.1 2006\/10\/11 09:54:57 jal58 Exp $";$/;"	v
hfblat_version	HFBLat.c	/^char *hfblat_version = "!HVER!HFBLat:   3.4.1 [CUED 12\/03\/09]";$/;"	v
hfwdbkwd_totalProbScale	HFBLat.c	/^float hfwdbkwd_totalProbScale = 1.0;          \/* (not a config.) Product of all scales affecting lm likelihoods.   Also read in HFBExactMPE.c and possibly$/;"	v
hgraf_vc_id	HGraf.c	/^char *hgraf_vc_id = "$Id: HGraf.c,v 1.1.1.1 2006\/10\/11 09:54:57 jal58 Exp $";$/;"	v
hgraf_vc_id	HGraf.null.c	/^char *hgraf_vc_id = "$Id: HGraf.null.c,v 1.1.1.1 2006\/10\/11 09:54:57 jal58 Exp $";$/;"	v
hgraf_vc_id	HGraf_WIN32.c	/^char *hgraf_vc_id = "$Id: HGraf_WIN32.c,v 1.1.1.1 2006\/10\/11 09:54:57 jal58 Exp $";$/;"	v
hgraf_version	HGraf.c	/^char *hgraf_version = "!HVER!HGraf(X):   3.4.1 [CUED 12\/03\/09]";$/;"	v
hgraf_version	HGraf.null.c	/^char *hgraf_version = "!HVER!HGraf(null):   3.4.1 [CUED 12\/03\/09]";$/;"	v
hgraf_version	HGraf_WIN32.c	/^char *hgraf_version = "!HVER!HGraf(NT):   3.4.1 [CUED 12\/03\/09]";$/;"	v
hiFBankFreq	HParm.c	/^   float hiFBankFreq;         \/* Fbank hi frequency cut-off *\/$/;"	m	struct:__anon62	file:
highDiff	HParm.c	/^static Boolean highDiff = FALSE;   \/* compute higher oder differentials, only up to fourth *\/$/;"	v	file:
hints	HGraf.c	/^static XSizeHints    hints;$/;"	v	file:
hlabel_vc_id	HLabel.c	/^char *hlabel_vc_id = "$Id: HLabel.c,v 1.1.1.1 2006\/10\/11 09:54:57 jal58 Exp $";$/;"	v
hlabel_version	HLabel.c	/^char *hlabel_version = "!HVER!HLabel:   3.4.1 [CUED 12\/03\/09]";$/;"	v
hlat_vc_id	HLat.c	/^char *hlat_vc_id = "$Id: HLat.c,v 1.2 2006\/12\/07 11:09:08 mjfg Exp $";$/;"	v
hlat_version	HLat.c	/^char *hlat_version = "!HVER!HLat:   3.4.1 [CUED 12\/03\/09]";$/;"	v
hlib	Makefile	/^hlib = .$/;"	m
hlmModel	HLM.h	/^      void *hlmModel;$/;"	m	union:lmodel::__anon33
hlmModel	HLM.h	/^typedef enum { boNGram=1, matBigram, hlmModel } LMType;$/;"	e	enum:__anon32
hlm_vc_id	HLM.c	/^char *hlm_vc_id = "$Id: HLM.c,v 1.1.1.1 2006\/10\/11 09:54:57 jal58 Exp $";$/;"	v
hlm_version	HLM.c	/^char *hlm_version = "!HVER!HLM:   3.4.1 [CUED 12\/03\/09]";$/;"	v
hmap_vc_id	HMap.c	/^char *hmap_vc_id = "$Id: HMap.c,v 1.1.1.1 2006\/10\/11 09:54:57 jal58 Exp $";$/;"	v
hmap_version	HMap.c	/^char *hmap_version = "!HVER!HMap: 3.4.1 [CUED 12\/03\/09]";$/;"	v
hmath_vc_id	HMath.c	/^char *hmath_vc_id = "$Id: HMath.c,v 1.1.1.1 2006\/10\/11 09:54:58 jal58 Exp $";$/;"	v
hmath_version	HMath.c	/^char *hmath_version = "!HVER!HMath:   3.4.1 [CUED 12\/03\/09]";$/;"	v
hmem	HModel.h	/^   MemHeap *hmem;          \/* memory heap for this HMM Set *\/   $/;"	m	struct:_HMMSet
hmem_vc_id	HMem.c	/^char *hmem_vc_id = "$Id: HMem.c,v 1.1.1.1 2006\/10\/11 09:54:58 jal58 Exp $";$/;"	v
hmem_version	HMem.c	/^char *hmem_version = "!HVER!HMem:   3.4.1 [CUED 12\/03\/09]";$/;"	v
hmm	HArc.h	/^  HLink hmm; \/*For comparison, to see whether the physical hmm is the same.  Only used (at time of writing) for the exact-time$/;"	m	struct:_Arc
hmm	HArc.h	/^  HLink hmm;$/;"	m	struct:_Acoustic
hmm	HNet.h	/^      HLink  hmm;       \/* HMM (physical) definition *\/$/;"	m	union:_NetNode::__anon59
hmm	HUtil.h	/^   HLink hmm;        \/* -> current hmm *\/$/;"	m	struct:__anon90
hmmSetId	HModel.h	/^   char *hmmSetId;         \/* identifier for the hmm set *\/$/;"	m	struct:_HMMSet
hmms	HNet.h	/^   char *hmms;			\/* MMF file name (NULL==unknown) *\/$/;"	m	struct:lattice
hmmsetcxtinfo	HNet.h	/^typedef struct hmmsetcxtinfo {$/;"	s
hmodel_vc_id	HModel.c	/^char *hmodel_vc_id = "$Id: HModel.c,v 1.2 2006\/12\/07 11:09:08 mjfg Exp $";$/;"	v
hmodel_version	HModel.c	/^char *hmodel_version = "!HVER!HModel:   3.4.1 [CUED 12\/03\/09]";$/;"	v
hnet_vc_id	HNet.c	/^char *hnet_vc_id = "$Id: HNet.c,v 1.1.1.1 2006\/10\/11 09:54:58 jal58 Exp $";$/;"	v
hnet_version	HNet.c	/^char *hnet_version = "!HVER!HNet:   3.4.1 [CUED 12\/03\/09]";$/;"	v
hook	HModel.h	/^   Ptr hook;               \/* general hook *\/$/;"	m	struct:__anon49
hook	HModel.h	/^   Ptr hook;            \/* general hook *\/$/;"	m	struct:__anon41
hook	HModel.h	/^   Ptr hook;            \/* general hook *\/$/;"	m	struct:__anon46
hook	HModel.h	/^   Ptr hook;            \/* general hook *\/$/;"	m	struct:__anon47
hook	HNet.h	/^   Ptr hook;                    \/* User definable hook *\/$/;"	m	struct:lattice
hook	HNet.h	/^   Ptr hook;           \/* User definable hook *\/$/;"	m	struct:lnode
hparmBin	HParm.c	/^static Boolean hparmBin=TRUE; \/* HTK format files are binary *\/$/;"	v	file:
hparm_vc_id	HParm.c	/^char *hparm_vc_id = "$Id: HParm.c,v 1.1.1.1 2006\/10\/11 09:54:58 jal58 Exp $";$/;"	v
hparm_version	HParm.c	/^char *hparm_version = "!HVER!HParm:   3.4.1 [CUED 12\/03\/09]";$/;"	v
hparmsrcdef	HParm.c	/^typedef struct hparmsrcdef {$/;"	s	file:
hrec_vc_id	HRec.c	/^char *hrec_vc_id = "$Id: HRec.c,v 1.1.1.1 2006\/10\/11 09:54:58 jal58 Exp $";$/;"	v
hrec_version	HRec.c	/^char *hrec_version = "!HVER!HRec:   3.4.1 [CUED 12\/03\/09]";$/;"	v
hsKind	HFB.h	/^  HSetKind hsKind;    \/* kind of the alignment HMM system *\/$/;"	m	struct:__anon20
hsKind	HFBLat.h	/^  HSetKind hsKind;              \/* kind of the alignment HMM system *\/$/;"	m	struct:__anon23
hsKind	HModel.h	/^   HSetKind hsKind;        \/* kind of HMM set *\/$/;"	m	struct:_HMMSet
hset	HFBLat.h	/^  HMMSet *hset;$/;"	m	struct:__anon23
hset	HModel.h	/^  struct _HMMSet *hset;                     \/* transform is linked with a model set *\/$/;"	m	struct:_AdaptXForm	typeref:struct:_AdaptXForm::_HMMSet
hset	HNet.h	/^   HMMSet *hset;   \/* HMMSet *\/$/;"	m	struct:hmmsetcxtinfo
hset	HParm.c	/^static HMMSet *hset = NULL;        \/* hmmset to be used for frontend *\/$/;"	v	file:
hset	HRec.c	/^   HMMSet *hset;            \/* HMM Set for recognition *\/$/;"	m	struct:psetinfo	file:
hset	HUtil.h	/^   HMMSet *hset;     \/* HMM set *\/$/;"	m	struct:__anon90
hshell_vc_id	HShell.c	/^char *hshell_vc_id = "$Id: HShell.c,v 1.1.1.1 2006\/10\/11 09:54:58 jal58 Exp $";$/;"	v
hshell_version	HShell.c	/^char *hshell_version = "!HVER!HShell:   3.4.1 [CUED 12\/03\/09]";$/;"	v
hsigp_vc_id	HSigP.c	/^char *hsigp_vc_id = "$Id: HSigP.c,v 1.1.1.1 2006\/10\/11 09:54:58 jal58 Exp $";$/;"	v
hsigp_version	HSigP.c	/^char *hsigp_version = "!HVER!HSigP:   3.4.1 [CUED 12\/03\/09]";$/;"	v
htkLabelTimeScale	HLabel.c	/^static double htkLabelTimeScale = 1; \/* multiply all times in HTK format labels by this on reading *\/$/;"	v	file:
htrain_vc_id	HTrain.c	/^char *htrain_vc_id = "$Id: HTrain.c,v 1.1.1.1 2006\/10\/11 09:54:58 jal58 Exp $";$/;"	v
htrain_version	HTrain.c	/^char *htrain_version = "!HVER!HTrain:   3.4.1 [CUED 12\/03\/09]";$/;"	v
hutil_vc_id	HUtil.c	/^char *hutil_vc_id = "$Id: HUtil.c,v 1.1.1.1 2006\/10\/11 09:54:59 jal58 Exp $";$/;"	v
hutil_version	HUtil.c	/^char *hutil_version = "!HVER!HUtil:   3.4.1 [CUED 12\/03\/09]";$/;"	v
hvq_vc_id	HVQ.c	/^char *hvq_vc_id = "$Id: HVQ.c,v 1.1.1.1 2006\/10\/11 09:54:59 jal58 Exp $";$/;"	v
hvq_version	HVQ.c	/^char *hvq_version = "!HVER!HVQ:   3.4.1 [CUED 12\/03\/09]";$/;"	v
hvs	HLM.c	/^static int hvs[]= { 165902236, 220889002, 32510287, 117809592,$/;"	v	file:
hwave_vc_id	HWave.c	/^char *hwave_vc_id = "$Id: HWave.c,v 1.1.1.1 2006\/10\/11 09:54:59 jal58 Exp $";$/;"	v
hwave_version	HWave.c	/^char *hwave_version = "!HVER!HWave:   3.4.1 [CUED 12\/03\/09]";$/;"	v
i	HParm.c	/^      Ptr i;            \/* data for external source *\/$/;"	m	union:_ParmBuf::__anon64	file:
i	HParm.h	/^   Ptr i;                     \/* the other input - if any *\/$/;"	m	struct:__anon70
i	HShell.h	/^   int i;$/;"	m	union:__anon77
i	HUtil.h	/^   int i;            \/* current state index 2..N-1 *\/$/;"	m	struct:__anon90
i_label	HFBLat.c	/^   int i_label;$/;"	m	struct:__anon21	file:
ic	HNet.c	/^   int ic;          \/* Initial context - cache saves finding for all links *\/$/;"	m	struct:pronholder	file:
id	HArc.h	/^  int id;   \/*numbering from 1..nArcs for arcs which will be used for forward-backward alignment; $/;"	m	struct:_Arc
id	HGraf.h	/^   ButtonId id; $/;"	m	struct:_HButton
id	HModel.h	/^   LabId id;               \/* name of macro *\/$/;"	m	struct:_MacroDef
id	HRec.c	/^   int id;                  \/* Unique identifier for current frame *\/$/;"	m	struct:precomp	file:
id	HRec.c	/^   int id;                  \/* Unique observation identifier *\/$/;"	m	struct:precinfo	file:
id	HWave.c	/^   int32 id;          \/* must be 'FORM' *\/$/;"	m	struct:__anon98	file:
id	HWave.c	/^   int32 id;$/;"	m	struct:__anon99	file:
ilist	HModel.h	/^  ILink *ilist;        \/* 1..numClasses of ilists *\/$/;"	m	struct:__anon50
imag	esignal.h	/^typedef struct {Schar	real, imag;}	ScharComplex;$/;"	m	struct:__anon5
imag	esignal.h	/^typedef struct {double	real, imag;}	DoubleComplex;$/;"	m	struct:__anon1
imag	esignal.h	/^typedef struct {float	real, imag;}	FloatComplex;$/;"	m	struct:__anon2
imag	esignal.h	/^typedef struct {long	real, imag;}	LongComplex;$/;"	m	struct:__anon3
imag	esignal.h	/^typedef struct {short	real, imag;}	ShortComplex;$/;"	m	struct:__anon4
immed	HLabel.h	/^   ImmDef immed;     \/* Immediate Definition for MLF_IMMEDIATE *\/$/;"	m	union:__anon29
in	HParm.c	/^   in;$/;"	m	struct:_ParmBuf	typeref:union:_ParmBuf::__anon64	file:
inBufPos	HAudio.c	/^   int inBufPos;             \/* Position to write in to buffer *\/$/;"	m	struct:_AudioIn	file:
inConn	HAudio.c	/^   char inConn[30];   $/;"	m	struct:_AudioIn	file:
inOLap	HAudio.c	/^   int inOLap;               \/* num samples in frOLap *\/$/;"	m	struct:_AudioIn	file:
inRow	HParm.c	/^   int inRow;          \/* Absolute row number of next to read (nRows+stRow) *\/$/;"	m	struct:_ParmBuf	file:
inSpkrPat	HAdapt.h	/^  char *inSpkrPat;$/;"	m	struct:__anon10
inXForm	HAdapt.h	/^  AdaptXForm *inXForm;$/;"	m	struct:__anon10
inXForm	HFB.h	/^  AdaptXForm *inXForm;\/* current input transform (if any) *\/$/;"	m	struct:__anon20
inXForm	HFBLat.h	/^  AdaptXForm *inXForm;\/* current input transform (if any) *\/$/;"	m	struct:__anon23
inXForm	HRec.c	/^static AdaptXForm *inXForm;$/;"	v	file:
inXFormExt	HAdapt.h	/^  char *inXFormExt;$/;"	m	struct:__anon10
incSpaces	HLabel.c	/^static Boolean incSpaces;$/;"	v	file:
includedir	Makefile	/^includedir = ${prefix}\/include$/;"	m
indent	esignal.h	/^    int     indent;$/;"	m	struct:Annot
index	HAudio.c	/^   int index;             \/* Index of buffer *\/$/;"	m	struct:mmapibuf	file:
index	HModel.h	/^   short index;          \/* mixture index *\/$/;"	m	struct:__anon44
indexSet	HModel.c	/^static Boolean indexSet = FALSE;        \/* have the indexes been set for the model set *\/$/;"	v	file:
indx	HTrain.h	/^   int indx;$/;"	m	struct:__anon88
info	HModel.h	/^   Ptr info;            \/* hook to hang information from *\/$/;"	m	struct:__anon41
info	HModel.h	/^   StateInfo *info;     \/* information for this state *\/$/;"	m	struct:__anon48
info	HModel.h	/^  Ptr info;                 \/* hook to hang information from *\/$/;"	m	struct:_RegNode
info	HModel.h	/^  XFormAccInfo *info;               \/* information abbout the accumulates for this transform *\/$/;"	m	struct:_AdaptXForm
info	HNet.h	/^   info;                \/* Extra information specific to type of node *\/$/;"	m	struct:_NetNode	typeref:union:_NetNode::__anon59
info	HWave.c	/^   char info[4];  $/;"	m	struct:__anon97	file:
infoPrinted	HShell.c	/^static Boolean infoPrinted = FALSE;      \/* set when -A -B or -V is used *\/$/;"	v	file:
infoStack	HAdapt.c	/^static MemHeap infoStack;$/;"	v	file:
infodir	Makefile	/^infodir = ${prefix}\/share\/info$/;"	m
initNuisanceFR	HAdapt.c	/^static Boolean initNuisanceFR = TRUE;$/;"	v	file:
initNuisanceFRIdent	HAdapt.c	/^static Boolean initNuisanceFRIdent = FALSE;$/;"	v	file:
initial	HNet.h	/^   NetNode initial;   \/* Initial (dummy) node *\/$/;"	m	struct:__anon60
insPen	HArc.h	/^  float insPen; $/;"	m	struct:ArcInfoStruct
inst	HNet.h	/^   NetInst *inst;       \/* Model Instance (if one exists, else NULL) *\/   $/;"	m	struct:_NetNode
instHeap	HRec.c	/^   MemHeap instHeap;        \/* Inst heap *\/$/;"	m	struct:precinfo	file:
int32	HShell.h	/^typedef int int32;$/;"	t
inv	HMath.h	/^   STriMat inv;         \/* if FULLC or LLTC *\/$/;"	m	union:__anon35
inx	HAudio.c	/^   int inx,outx;         \/* in\/out indices - wrap modulo size *\/$/;"	m	struct:__anon13	file:
ioConfName	HParm.c	/^static char * ioConfName[CFGSIZE] = {$/;"	v	file:
iphone	HArc.h	/^  int iphone; \/* (int) correct phone. *\/$/;"	m	struct:_CorrN
ipos	HRec.c	/^   int ipos;                \/* Current inst position *\/$/;"	m	struct:precinfo	file:
ipos	HRec.c	/^   int ipos;$/;"	m	struct:_NetInst	file:
isActive	HAudio.c	/^   AudioDevStatus isActive;  \/* indicates when device active *\/$/;"	m	struct:_AudioIn	file:
isActive	HAudio.c	/^   Boolean isActive;         \/* true when device active *\/$/;"	m	struct:_AudioOut	file:
isActive	HAudio.c	/^   Boolean isActive;     \/* true if in use *\/$/;"	m	struct:__anon13	file:
isCont	HUtil.h	/^   Boolean isCont;   \/* true PLAINHS or SHAREDHS *\/$/;"	m	struct:__anon90
isLoaded	HModel.h	/^   Boolean isLoaded;       \/* true if contents are loaded *\/$/;"	m	struct:_MMFInfo
isPipe	HShell.h	/^   Boolean isPipe;      \/* input is a pipe *\/$/;"	m	struct:__anon75
isPipe	HWave.c	/^   Boolean isPipe;      \/* Source is a pipe *\/$/;"	m	struct:_Wave	file:
isTree	HTrain.h	/^   Boolean isTree; \/* true if tree clustered *\/$/;"	m	struct:__anon83
is_nonsil	HFBLat.c	/^   int is_nonsil;  \/* used in SetCorrectnessAsError *\/$/;"	m	struct:__anon21	file:
isnan	HMath.h	30;"	d
item	HModel.h	/^   Ptr item;         \/* -> to a HMM structure *\/$/;"	m	struct:_ItemRec
itemHeap	HUtil.c	/^static MemHeap itemHeap;$/;"	v	file:
items	HTrain.h	/^   Ptr *items;       \/* array[0..blkSize-1] of items *\/$/;"	m	struct:_ItemBlock
k	HParm.c	/^   Vector a,k;        \/* lpc and refc vectors *\/$/;"	m	struct:__anon62	file:
keepDistinct	HModel.c	/^static Boolean keepDistinct=FALSE;      \/* keep orphan HMMs distinct *\/$/;"	v	file:
keepXFormDistinct	HAdapt.c	/^static Boolean keepXFormDistinct = TRUE;$/;"	v	file:
keymap	HUtil.c	/^static char *keymap[] = {$/;"	v	file:
khi	HSigP.h	/^   int klo,khi;         \/* lopass to hipass cut-off fft indices *\/$/;"	m	struct:__anon80
kind	HShell.h	/^   ConfKind kind;       \/* kind of config param value *\/$/;"	m	struct:__anon78
klo	HSigP.h	/^   int klo,khi;         \/* lopass to hipass cut-off fft indices *\/$/;"	m	struct:__anon80
knil	HRec.c	/^   Align *knil;         \/* Prev align in list *\/$/;"	m	struct:align	file:
knil	HRec.c	/^   NBestEntry *knil;$/;"	m	struct:nbestentry	file:
knil	HRec.c	/^   struct _NetInst *knil; \/* Doubly linked list of instances, backward *\/$/;"	m	struct:_NetInst	typeref:struct:_NetInst::_NetInst	file:
knil	HRec.h	/^   Path *knil;          \/* Prev path in list *\/$/;"	m	struct:path
ktype	HGraf.h	/^   KeyType ktype;    \/* type of key pressed *\/$/;"	m	struct:__anon24
lAlign	HNet.h	/^   LAlign *lAlign;     \/* Array[0..nAlign-1] of alignment records *\/$/;"	m	struct:larc
la	HLat.c	/^   LArc *la;$/;"	m	struct:_SubLArc	file:
label	HNet.h	/^   LabId label;       \/* Segment label ('phys_hmm[state]' or 'phys_hmm') *\/$/;"	m	struct:lalign
labelQuote	HLabel.c	/^static char labelQuote = 0;        \/* How do we quote label names *\/$/;"	v	file:
labid	HLabel.h	/^   LabId labid;             \/* primary label id *\/$/;"	m	struct:_Label
lalign	HNet.h	/^typedef struct lalign $/;"	s
langProbScale	HFBLat.c	/^static float langProbScale = 1.0;             \/* Extra scale on lm probabilities.   Leave this alone for normal usage. *\/$/;"	v	file:
larc	HNet.h	/^typedef struct larc$/;"	s
larc	HRec.c	/^   LArc *larc;$/;"	m	struct:nbestentry	file:
larc_e	HNet.h	/^typedef struct larc_e$/;"	s
larc_s	HNet.h	/^typedef struct larc_s$/;"	s
larcs	HNet.h	/^   LArc *larcs;                 \/* Array of lattice arcs *\/$/;"	m	struct:lattice
lastAccess	HLat.c	/^   int lastAccess;$/;"	m	struct:_LLFInfo	file:
lastRow	HParm.c	/^   int lastRow;        \/*   of final row (if we know it) *\/$/;"	m	struct:_ParmBuf	file:
lat	HArc.h	/^  Lattice *lat[MAXLATS]; \/*only needed if we are creating an Arc. Array starts from zero.*\/$/;"	m	struct:ArcInfoStruct
lat	HNet.h	/^   struct lattice *lat;     \/* Lattice this refers to (may be shared) *\/$/;"	m	struct:sublatdef	typeref:struct:sublatdef::lattice
latProbScale	HExactMPE.c	/^static float latProbScale = 1.0; \/* repeat of config also used in HFBLat.c *\/$/;"	v	file:
latProbScale	HFBLat.c	/^static float latProbScale = 1.0; \/*IMPORTANT*\/  \/* Scales the lattice-arc and lm probabilities.  Normally set to e.g. 1\/12 or 1\/15, the inverse$/;"	v	file:
lattice	HNet.h	/^typedef struct lattice$/;"	s
lattices	HFBLat.h	/^  ArcInfo lattices; $/;"	m	struct:__anon23
lc	HNet.c	/^   NetNode **lc;    \/* Left contexts - linked to word initial models *\/$/;"	m	struct:pronholder	file:
ldBinary	HTrain.c	/^static Boolean ldBinary = TRUE;        \/* load\/dump in binary *\/$/;"	v	file:
left	HVQ.h	/^   VQNode left,right;   \/* offspring, only right is used in linTree *\/$/;"	m	struct:_VQNodeRec
lendian	HWave.c	/^   int32  lendian;$/;"	m	struct:__anon95	file:
level	HAdapt.c	/^   int level;$/;"	m	struct:_AInfo	file:
lgain	HAudio.c	/^   long lgain;$/;"	m	struct:_AudioIn	file:
lgain	HAudio.c	/^   long lgain;$/;"	m	struct:_AudioOut	file:
libdir	Makefile	/^libdir = ${exec_prefix}\/lib$/;"	m
libexecdir	Makefile	/^libexecdir = ${exec_prefix}\/libexec$/;"	m
lid	HVQ.h	/^   short nid,lid,rid;   \/* used for mapping between mem and ext def *\/$/;"	m	struct:_VQNodeRec
like	HNet.h	/^   LogFloat like;       \/* Transition likelihood *\/$/;"	m	struct:_NetLink
like	HNet.h	/^   LogFloat like;     \/* Total aclike of label (inc trans within + out) *\/$/;"	m	struct:lalign
like	HRec.c	/^   LogDouble like;      \/* Likelihood at boundary *\/$/;"	m	struct:nxtpath	file:
like	HRec.c	/^   LogDouble like;      \/* Likelihood upon entering state\/model end *\/$/;"	m	struct:align	file:
like	HRec.c	/^   LogFloat like;       \/* Relative Likelihood of token *\/$/;"	m	struct:reltoken	file:
like	HRec.c	/^   double like;$/;"	m	struct:nbestentry	file:
like	HRec.h	/^   LogDouble like;	\/* Likelihood of token *\/$/;"	m	struct:token
like	HRec.h	/^   LogDouble like;      \/* Likelihood at boundary *\/$/;"	m	struct:path
linTree	HVQ.h	/^   linTree,    \/* linear flat codebook (right branching tree) *\/$/;"	e	enum:__anon92
lineIn	HAudio.c	/^static Boolean lineIn = TRUE;$/;"	v	file:
lineOut	HAudio.c	/^static Boolean lineOut = TRUE;$/;"	v	file:
link	HLM.h	/^   struct nentry *link;         \/* Next entry in hash table *\/$/;"	m	struct:nentry	typeref:struct:nentry::nentry
link	HRec.c	/^   Align *link;         \/* Next align in list *\/$/;"	m	struct:align	file:
link	HRec.c	/^   NBestEntry *link;$/;"	m	struct:nbestentry	file:
link	HRec.c	/^   struct _NetInst *link; \/* Doubly linked list of instances, forward *\/$/;"	m	struct:_NetInst	typeref:struct:_NetInst::_NetInst	file:
link	HRec.h	/^   Path *link;          \/* Next path in list *\/$/;"	m	struct:path
linkHeap	HNet.h	/^   MemHeap linkHeap;  \/* a stack for adding the links as needed *\/$/;"	m	struct:__anon60
links	HNet.h	/^   NetLink *links;      \/* Array[0..nlinks-1] of links to connected nodes *\/$/;"	m	struct:_NetNode
lit	HGraf.h	/^   Boolean lit;               \/* if true, invert colors *\/$/;"	m	struct:_HButton
llfExt	HLat.c	/^static char *llfExt = "LLF";    \/* extension for LLF lattice files *\/$/;"	v	file:
llfHeap	HLat.c	/^static MemHeap llfHeap;$/;"	v	file:
llfInfo	HLat.c	/^static LLFInfo *llfInfo = NULL;$/;"	v	file:
lm	HRec.c	/^   LogFloat lm;         \/* LM likelihood of current word *\/$/;"	m	struct:nxtpath	file:
lm	HRec.c	/^   LogFloat lm;         \/* LM likelihood of token *\/$/;"	m	struct:reltoken	file:
lm	HRec.h	/^   LogFloat lm;         \/* LM likelihood of current word *\/$/;"	m	struct:path
lm	HRec.h	/^   LogFloat lm;         \/* LM likelihood of token *\/$/;"	m	struct:token
lmCnt	HLM.h	/^typedef unsigned short lmCnt;   \/* Type used by lm to count wds 0..MAX_LMID *\/$/;"	t
lmId	HLM.h	/^typedef unsigned short lmId;    \/* Type used by lm to id words  1..MAX_LMID *\/$/;"	t
lmScale	HArc.h	/^  float lmScale; \/*This functions as a prscale (pronunciation$/;"	m	struct:ArcInfoStruct
lmlike	HArc.h	/^  LogFloat lmlike;  \/*This is the lmprob + the prlike [not scaled].*\/$/;"	m	struct:_ArcTrans
lmlike	HNet.h	/^   LogFloat lmlike;    \/* Language model likelihood of word *\/$/;"	m	struct:larc
lmlike	HNet.h	/^   LogFloat lmlike;    \/* Language model likelihood of word *\/$/;"	m	struct:larc_e
lmlike	HNet.h	/^   LogFloat lmlike;$/;"	m	struct:larc_s
lmodel	HLM.h	/^typedef struct lmodel {$/;"	s
lmprob	HLat.c	/^   LogFloat lmprob;$/;"	m	struct:_SubLArc	file:
lmscale	HNet.h	/^   float lmscale;		\/* LM scale factor *\/$/;"	m	struct:lattice
lmstate	HLat.c	/^      LMState lmstate;$/;"	m	union:_SubLNode::__anon30	file:
ln	HNet.c	/^   LNode *ln;       \/* Node that created this instance *\/$/;"	m	struct:pronholder	file:
lnode	HNet.h	/^typedef struct lnode$/;"	s
lnode	HRec.c	/^   LNode *lnode;$/;"	m	struct:nbestentry	file:
lnodes	HNet.h	/^   LNode *lnodes;               \/* Array of lattice nodes *\/$/;"	m	struct:lattice
loChan	HSigP.h	/^   ShortVec loChan;     \/* array[1..fftN\/2] of loChan index *\/$/;"	m	struct:__anon80
loFBankFreq	HParm.c	/^   float loFBankFreq;         \/* Fbank lo frequency cut-off *\/$/;"	m	struct:__anon62	file:
loWt	HSigP.h	/^   Vector loWt;         \/* array[1..fftN\/2] of loChan weighting *\/$/;"	m	struct:__anon80
localstatedir	Makefile	/^localstatedir = ${prefix}\/var$/;"	m
locc	HArc.h	/^  LogFloat locc;$/;"	m	struct:_Acoustic
locc	HArc.h	/^  LogFloat locc;$/;"	m	struct:_ArcTrans
logWt	HModel.h	/^   Boolean logWt;       \/* Component weights are stored as Logs *\/$/;"	m	struct:_HMMSet
logbase	HNet.h	/^   float logbase;               \/* base of logarithm for likelihoods in lattice files$/;"	m	struct:lattice
logfile	HShell.c	/^   char logfile[1024];                  \/* logical name *\/$/;"	m	struct:__anon71	file:
lp	HParm.c	/^   Vector as, ac, lp; \/* Auditory, autocorrelation an lp vectors for PLP *\/ $/;"	m	struct:__anon62	file:
lpcOrder	HParm.c	/^   int lpcOrder;              \/* Order of lpc analysis *\/$/;"	m	struct:__anon62	file:
lvobjects	Makefile	/^lvobjects = $(basename HGraf.o).lv.o esig_asc.lv.o \\$/;"	m
m	HModel.h	/^   MLink m;                \/* macro def for this structure *\/$/;"	m	struct:_PtrMap
m	HUtil.h	/^   int m;            \/* current mixture index 1..M *\/$/;"	m	struct:__anon90
mIdx	HModel.h	/^   int mIdx;            \/* MixPDF index *\/$/;"	m	struct:__anon41
mInfo	HAdapt.c	/^   MInfo *mInfo;         \/* any original model information *\/$/;"	m	struct:__anon9	file:
mPre	HRec.c	/^   PreComp *mPre;           \/* Array[1..nmp] Shared mixture PreComps *\/$/;"	m	struct:psetinfo	file:
mac	HUtil.h	/^   MLink mac;        \/* current macro *\/$/;"	m	struct:__anon90
macroType	HModel.c	/^   char macroType;      \/* current macro type if sym==MACRO *\/$/;"	m	struct:__anon40	file:
magic	HAudio.c	/^   DWORD magic;             \/* Magic number identifying this instance *\/$/;"	m	struct:_AudioIn	file:
magic	HAudio.c	/^   DWORD magic;             \/* Magic number identifying this instance *\/$/;"	m	struct:_AudioOut	file:
magic	HVQ.h	/^   short magic;         \/* magic num, usually the ParmKind *\/$/;"	m	struct:_VQTabRec
magic	HWave.c	/^   int32 magic;          \/* magic number 0x2e736e64 *\/$/;"	m	struct:__anon97	file:
main	HParm.c	/^   PBlock main;        \/* Main block of data (next points to first block) *\/$/;"	m	struct:_ParmBuf	file:
mandir	Makefile	/^mandir = ${prefix}\/share\/man$/;"	m
mapTau	HMap.c	/^static float mapTau     = 20.0;                \/* Guides the MAP process *\/$/;"	v	file:
marginCount	HParm.c	/^   int marginCount;           \/*   of sil around speech to process *\/$/;"	m	struct:__anon62	file:
matBigram	HLM.h	/^typedef enum { boNGram=1, matBigram, hlmModel } LMType;$/;"	e	enum:__anon32
matPK	HParm.c	/^   ParmKind matPK;$/;"	m	struct:__anon62	file:
matTranFN	HParm.h	/^   char *matTranFN;           \/* Matrix transformation name *\/$/;"	m	struct:__anon70
matbi	HLM.h	/^      MatBiLM *matbi;$/;"	m	union:lmodel::__anon33
matbilm	HLM.h	/^typedef struct matbilm {$/;"	s
max	HRec.c	/^   LogFloat max;        \/* Likelihood for pruning of instance *\/$/;"	m	struct:_NetInst	file:
max	HRec.c	/^   int max;                 \/* Max states in HMM set *\/$/;"	m	struct:psetinfo	file:
maxAlphaBeta	HFB.h	/^  LogDouble maxAlphaBeta;   \/* max alpha\/beta product along beam ridge *\/$/;"	m	struct:__anon18
maxAuxLab	HLabel.h	/^   int maxAuxLab;           \/* max aux labels (default=0) *\/$/;"	m	struct:_LabList
maxBeam	HRec.h	/^   int maxBeam;             \/* Maximum model instance beam *\/$/;"	m	struct:vrecinfo
maxBeamWidth	HFB.h	/^  int maxBeamWidth;         \/* max width of beam in model units *\/$/;"	m	struct:__anon18
maxElem	HMem.h	/^   size_t maxElem;      \/*  max #elems per block     max #bytes per blk   *\/$/;"	m	struct:__anon37
maxIter	HTrain.c	/^static int maxIter = 10;               \/* max num cluster iterations *\/$/;"	v	file:
maxLLFs	HLat.c	/^static int maxLLFs = 5; $/;"	v	file:
maxM	HFB.h	/^  int maxM;           \/* maximum number of mixtures in hmmset *\/$/;"	m	struct:__anon20
maxM	HMap.c	/^static int maxM;$/;"	v	file:
maxMixInS	HFB.h	/^  int maxMixInS[SMAX];\/* array[1..swidth[0]] of max mixes *\/$/;"	m	struct:__anon20
maxMixes	HUtil.c	/^static int maxMixes;           \/*  and max number of mix comps *\/$/;"	v	file:
maxP	HModel.h	/^   LogFloat maxP;        \/* max log mixture prob *\/$/;"	m	struct:__anon45
maxRows	HParm.c	/^   int maxRows;      \/* total number of rows in this block *\/$/;"	m	struct:pblock	file:
maxSemiTiedIter	HAdapt.c	/^static int maxSemiTiedIter = 10;$/;"	v	file:
maxStates	HUtil.c	/^static int maxStates;          \/*  and its max number of states *\/$/;"	v	file:
maxTry	HShell.c	/^static int maxTry = 1;$/;"	v	file:
maxXFormIter	HAdapt.c	/^static double maxXFormIter = 10; \/* something big, for CMLLR *\/ $/;"	v	file:
me	HUtil.h	/^   MixtureElem *me;  \/* ->current mixtureElem *\/$/;"	m	struct:__anon90
me_end	HArc.h	/^  HArc *me_start; HArc *me_end;\/* first & last arc. *\/$/;"	m	struct:_CorrN
me_start	HArc.h	/^  HArc *me_start; HArc *me_end;\/* first & last arc. *\/$/;"	m	struct:_CorrN
mean	HAdapt.c	/^   Vector mean;$/;"	m	struct:__anon7	file:
mean	HModel.h	/^   SVector mean;        \/* mean vector *\/$/;"	m	struct:__anon41
mean	HParm.c	/^   Vector mean;       \/* Running mean shared by this config *\/$/;"	m	struct:__anon62	file:
mean	HVQ.h	/^   Vector mean;         \/* centre of this node *\/$/;"	m	struct:_VQNodeRec
meanrec	HParm.c	/^typedef struct meanrec $/;"	s	file:
measureSil	HParm.c	/^   Boolean measureSil;        \/* Measure Silence *\/$/;"	m	struct:__anon62	file:
mem	HArc.h	/^  MemHeap *mem;$/;"	m	struct:ArcInfoStruct
mem	HAudio.c	/^   MemHeap *mem;             \/* memory heap for this audio rec *\/$/;"	m	struct:_AudioIn	file:
mem	HAudio.c	/^   MemHeap *mem;             \/* memory heap for this audio rec *\/$/;"	m	struct:_AudioOut	file:
mem	HModel.h	/^  MemHeap *mem;                     \/* heap used for storing transform *\/$/;"	m	struct:_AdaptXForm
mem	HParm.c	/^   MemHeap *mem;       \/* Memory heap for this parm buf *\/$/;"	m	struct:_ParmBuf	file:
mem	HTrain.h	/^   MemHeap *mem;        \/* memory for this seg store *\/$/;"	m	struct:_SegStoreRec
mem	HTrain.h	/^   MemHeap *mem;     \/* memory stack for this sequence *\/$/;"	m	struct:__anon81
mem	HWave.c	/^   MemHeap *mem;        \/* memory heap for this wave rec *\/$/;"	m	struct:_Wave	file:
memDC	HGraf_WIN32.c	/^static HDC memDC = NULL;          \/* A handle to the memory device context *\/$/;"	v	file:
micIn	HAudio.c	/^static Boolean micIn = FALSE;$/;"	v	file:
minAlphaBeta	HFB.h	/^  LogDouble minAlphaBeta;   \/* min alpha\/beta product along beam ridge *\/$/;"	m	struct:__anon18
minClustSize	HTrain.c	/^static int minClustSize = 3;           \/* min num vectors in cluster *\/$/;"	v	file:
minDur	HTrain.h	/^   int minDur;       \/* Min no of frames to get through trans mat *\/$/;"	m	struct:__anon84
minEgs	HMap.c	/^static int minEgs    = 0;        \/* min examples to train a model *\/$/;"	v	file:
minElem	HMem.h	/^   size_t minElem;      \/*  init #elems per blk      init #bytes per blk  *\/$/;"	m	struct:__anon37
minFrwdP	HFB.c	/^   float minFrwdP;           \/* mix prune threshold *\/$/;"	m	struct:__anon16	file:
minFrwdP	HFBLat.c	/^static float minFrwdP = 10.0;            \/* mix prune threshold *\/$/;"	v	file:
minLogExp	HMath.c	/^static LogDouble minLogExp;$/;"	v	file:
minObs	HMap.c	/^static float minObs  = 0;        \/* min observations  to train a model *\/$/;"	v	file:
minOccThresh	HAdapt.c	/^static float minOccThresh = 0.0;       \/* minimum occupancy to accumulate stats to estimate xform *\/$/;"	v	file:
minRows	HParm.c	/^   int minRows;        \/* min rows to keep in main block *\/$/;"	m	struct:_ParmBuf	file:
minVar	HMap.c	/^static float minVar  = 0.0;      \/* minimum variance (diagonal only) *\/$/;"	v	file:
minab	HMath.c	685;"	d	file:
miscStack	HFBLat.h	/^  MemHeap miscStack;$/;"	m	struct:__anon23
mixId	HModel.h	/^   LabId mixId;          \/* id of macro base name *\/$/;"	m	struct:__anon45
mixShared	HRec.c	/^   Boolean mixShared;$/;"	m	struct:psetinfo	file:
mixWeightFloor	HMap.c	/^static float mixWeightFloor=0.0; \/* Floor for mixture weights *\/$/;"	v	file:
mixer_fd	HAudio.c	/^static int mixer_fd;$/;"	v	file:
mixes	HModel.h	/^   MixPDF ** mixes;      \/* array[1..M] of MixPDF *\/$/;"	m	struct:__anon45
ml_cnt	HParm.c	/^   ml_cnt      \/* Total size of ml results array *\/$/;"	e	enum:__anon65	file:
ml_max	HParm.c	/^   ml_max,     \/* Max frame energy *\/$/;"	e	enum:__anon65	file:
ml_min	HParm.c	/^   ml_min,     \/* Min frame energy *\/$/;"	e	enum:__anon65	file:
ml_off	HParm.c	/^   ml_off,     \/* Average sample offset *\/$/;"	e	enum:__anon65	file:
ml_range	HParm.c	/^   ml_range,   \/* Peak to peak sample range (% of max) *\/$/;"	e	enum:__anon65	file:
ml_sil	HParm.c	/^   ml_sil,     \/* Average silence energy *\/$/;"	e	enum:__anon65	file:
ml_snr	HParm.c	/^   ml_snr,     \/* Assumed SNR ratio *\/$/;"	e	enum:__anon65	file:
ml_sp	HParm.c	/^   ml_sp,      \/* Average speeck energy *\/$/;"	e	enum:__anon65	file:
ml_thresh	HParm.c	/^   ml_thresh,  \/* Threshold for speech detector *\/$/;"	e	enum:__anon65	file:
mlfHead	HLabel.c	/^static MLFEntry *mlfHead = NULL; \/* head of linked list of MLFEntry *\/$/;"	v	file:
mlfHeap	HLabel.c	/^static MemHeap mlfHeap;          \/* memory heap for MLF stuff *\/$/;"	v	file:
mlfTail	HLabel.c	/^static MLFEntry *mlfTail = NULL; \/* tail of linked list of MLFEntry *\/$/;"	v	file:
mlfUsed	HLabel.c	/^static int      mlfUsed = 0;     \/* number of entries in mlfTab *\/$/;"	v	file:
mlfile	HLabel.c	/^static FILE   * mlfile[MAXMLFS]; \/* array [0..numMLFs-1] of MLF file *\/$/;"	v	file:
mllrCov2CMLLR	HAdapt.c	/^static Boolean mllrCov2CMLLR= FALSE;   \/* apply mllrcov transforms as cmllr transform *\/ $/;"	v	file:
mllrCovAdaptKind	HAdapt.c	/^static AdaptKind mllrCovAdaptKind = BASE;$/;"	v	file:
mllrCovBaseClass	HAdapt.c	/^static char *mllrCovBaseClass = NULL;$/;"	v	file:
mllrCovBlockSize	HAdapt.c	/^static IntVec mllrCovBlockSize = NULL;$/;"	v	file:
mllrCovRegTree	HAdapt.c	/^static char *mllrCovRegTree = NULL;$/;"	v	file:
mllrCovSplitThresh	HAdapt.c	/^static float mllrCovSplitThresh = 1000.0;$/;"	v	file:
mllrDiagCov	HAdapt.c	/^static Boolean mllrDiagCov = FALSE;    \/* perform diagonal covariance adaptation *\/$/;"	v	file:
mllrMeanAdaptKind	HAdapt.c	/^static AdaptKind mllrMeanAdaptKind = BASE;$/;"	v	file:
mllrMeanBaseClass	HAdapt.c	/^static char *mllrMeanBaseClass = NULL;$/;"	v	file:
mllrMeanBlockSize	HAdapt.c	/^static IntVec mllrMeanBlockSize = NULL;$/;"	v	file:
mllrMeanRegTree	HAdapt.c	/^static char *mllrMeanRegTree = NULL;$/;"	v	file:
mllrMeanSplitThresh	HAdapt.c	/^static float mllrMeanSplitThresh = 1000.0;$/;"	v	file:
mmApiBuf	HAudio.c	/^} mmApiBuf;$/;"	t	typeref:struct:mmapibuf	file:
mmError	HAudio.c	/^   MMRESULT mmError;$/;"	m	struct:_AudioIn	file:
mmError	HAudio.c	/^   MMRESULT mmError;$/;"	m	struct:_AudioOut	file:
mmapibuf	HAudio.c	/^typedef struct mmapibuf{$/;"	s	file:
mmeAllocBuffer	HAudio.c	/^void *mmeAllocBuffer(size_t size)$/;"	f
mmeAllocMem	HAudio.c	/^void *mmeAllocMem(size_t size)$/;"	f
mmeCheckForCallbacks	HAudio.c	/^Boolean mmeCheckForCallbacks(void)$/;"	f
mmeFreeBuffer	HAudio.c	/^Boolean mmeFreeBuffer(void *ptr)$/;"	f
mmeFreeMem	HAudio.c	/^Boolean mmeFreeMem(void *ptr)$/;"	f
mmeProcessCallbacks	HAudio.c	/^void mmeProcessCallbacks(void)$/;"	f
mmeWaitForCallbacks	HAudio.c	/^void mmeWaitForCallbacks(void)$/;"	f
mmfIdMask	HModel.h	/^  char* mmfIdMask;     \/* mask of model sets that appropriate for *\/$/;"	m	struct:__anon50
mmfIdMask	HModel.h	/^  char* mmfIdMask;     \/* mask of model sets that appropriate for *\/$/;"	m	struct:__anon55
mmfNames	HModel.h	/^   MILink mmfNames;        \/* List of external file names *\/$/;"	m	struct:_HMMSet
models	HRec.c	/^   Boolean models;          \/* Keep track of model history *\/$/;"	m	struct:precinfo	file:
mp	HFBLat.c	/^   MixPDF *mp;$/;"	m	struct:__anon22	file:
mp	HUtil.h	/^   MixPDF *mp;       \/* ->current mixPDF *\/$/;"	m	struct:__anon90
mpdf	HModel.h	/^   MixPDF *mpdf;        \/* -> mixture pdf *\/$/;"	m	struct:__anon42
mpe	HArc.h	/^  MPEStruct *mpe; \/*if doing mpe. *\/$/;"	m	struct:_Arc
mpe_occscale	HArc.h	/^  float mpe_occscale; \/* scale on the occupancy [for MPE code], equals$/;"	m	struct:_Acoustic
mtab	HModel.h	/^   MLink * mtab;           \/* Array[0..MACHASHSIZE-1]OF MLink *\/$/;"	m	struct:_HMMSet
mu	HTrain.h	/^   Vector mu;        \/* mean vector counts *\/$/;"	m	struct:__anon86
muC	HTrain.c	/^static int muC,vaC,trC,wtC,prC;$/;"	v	file:
myArc	HArc.h	/^  HArc *myArc; $/;"	m	struct:_Acoustic
n	HAudio.c	/^   int n;                 \/* Number of valid samples in buffer *\/$/;"	m	struct:mmapibuf	file:
n	HNet.c	/^   int n;$/;"	m	struct:pinstinfo	file:
n	HNet.h	/^   int n;              \/* Arc identity *\/$/;"	m	struct:larc_e
n	HNet.h	/^   int n;              \/* Sorted order *\/$/;"	m	struct:lnode
n	HRec.c	/^   short n;                  \/* Number of rtok valid (0==1-best, 1>==N-best) *\/$/;"	m	struct:tokenset	file:
nAlign	HNet.h	/^   short nAlign;       \/* Number of alignment records in word *\/$/;"	m	struct:larc
nArcs	HArc.h	/^  int nArcs; \/* normally 1, but e.g.  if quinphone or perhaps MWE, can be more. *\/$/;"	m	struct:_CorrN
nArcs	HArc.h	/^  int nArcs;$/;"	m	struct:ArcInfoStruct
nAvail	HWave.c	/^   long nAvail;         \/* Num samples allocated for data *\/$/;"	m	struct:_Wave	file:
nBeam	HRec.h	/^   LogFloat nBeam;          \/* Beam width for non-best tokens *\/$/;"	m	struct:vrecinfo
nCols	HParm.c	/^   int nCols;         \/* num columns in each row of the parameter block *\/$/;"	m	struct:__anon62	file:
nCvrt	HParm.c	/^   int nCvrt;         \/* num columns produced from coding *\/$/;"	m	struct:__anon62	file:
nFloorVar	HMap.c	/^static int nFloorVar = 0;     \/* # of floored variance comps *\/$/;"	v	file:
nFloorVarMix	HMap.c	/^static int nFloorVarMix = 0;  \/* # of mix comps with floored vars *\/$/;"	v	file:
nFree	HTrain.h	/^   int nFree;        \/* number of items slots in total *\/$/;"	m	struct:__anon81
nGaussPDE1	HModel.c	/^static int nGaussPDE1 = 0;$/;"	v	file:
nGaussPDE2	HModel.c	/^static int nGaussPDE2 = 0;$/;"	v	file:
nGaussTot	HModel.c	/^static int nGaussTot = 0;$/;"	v	file:
nInBuffer	HAudio.c	/^   int nInBuffer;            \/* Number of valid samples in buffer *\/$/;"	m	struct:_AudioIn	file:
nItems	HTrain.c	/^static int nItems;      \/* num items in pool *\/$/;"	v	file:
nItems	HTrain.h	/^   int nItems;       \/* number of items stored *\/$/;"	m	struct:__anon81
nLats	HArc.h	/^  int nLats;$/;"	m	struct:ArcInfoStruct
nMembers	HUtil.h	/^   int nMembers;		\/* cardinality of set *\/$/;"	m	struct:__anon91
nMix	HModel.h	/^   int nMix;            \/* num mixtures in this stream *\/$/;"	m	struct:__anon46
nMix	HModel.h	/^   short nMix;           \/* num mixtures M in set *\/$/;"	m	struct:__anon45
nObs	HParm.h	/^   int nObs;                  \/* Number of table observations *\/$/;"	m	struct:__anon70
nPDFs	HFBLat.c	/^static int nPDFs[SMAX];  \/*rely on it being initialised to zeros.*\/$/;"	v	file:
nParm	HAdapt.c	/^static int nParm = 0;$/;"	v	file:
nParm	HArc.c	/^static int nParm = 0;$/;"	v	file:
nParm	HDict.c	/^static int nParm = 0;$/;"	v	file:
nParm	HExactMPE.c	/^static int nParm = 0;$/;"	v	file:
nParm	HFB.c	/^static int nParm = 0;$/;"	v	file:
nParm	HFBLat.c	/^static int nParm = 0;$/;"	v	file:
nParm	HGraf.c	/^static int nParm = 0;$/;"	v	file:
nParm	HGraf.null.c	/^static int nParm = 0;$/;"	v	file:
nParm	HGraf_WIN32.c	/^static int nParm = 0;$/;"	v	file:
nParm	HLM.c	/^static int nParm = 0;$/;"	v	file:
nParm	HLat.c	/^static int nParm = 0;$/;"	v	file:
nParm	HMap.c	/^static int nParm = 0;$/;"	v	file:
nParm	HModel.c	/^static int nParm = 0;$/;"	v	file:
nParm	HNet.c	/^static int nParm = 0;$/;"	v	file:
nParm	HParm.c	/^static int nParm = 0;$/;"	v	file:
nParm	HRec.c	/^static int nParm = 0;$/;"	v	file:
nParm	HShell.c	/^static int nParm = 0;$/;"	v	file:
nParm	HTrain.c	/^static int nParm = 0;$/;"	v	file:
nParm	HUtil.c	/^static int nParm = 0;$/;"	v	file:
nPaths	HLat.c	/^   LogDouble nPaths;     \/* number of paths from start node *\/$/;"	m	struct:_StatsInfo	file:
nRows	HParm.c	/^   int nRows;        \/* number of rows used in this block *\/$/;"	m	struct:pblock	file:
nSamples	HParm.c	/^   long nSamples;     \/* num samples in original (WAVEFORM only) *\/$/;"	m	struct:__anon62	file:
nSamples	HParm.h	/^   long nSamples;             \/* Number of source samples *\/$/;"	m	struct:__anon70
nSamples	HWave.c	/^   int32  nSamples;$/;"	m	struct:__anon94	file:
nSamples	HWave.c	/^   int32  nSamples;$/;"	m	struct:__anon95	file:
nSamples	HWave.c	/^   int32 nSamples;$/;"	m	struct:__anon101	file:
nSamples	HWave.c	/^   long nSamples;       \/* No of samples in data *\/$/;"	m	struct:_Wave	file:
nSamples	HWave.c	/^   unsigned int nSamples;$/;"	m	struct:__anon100	file:
nThresh	HRec.c	/^   LogFloat nThresh;        \/* Cutoff for non-best tokens *\/$/;"	m	struct:precinfo	file:
nToPlay	HAudio.c	/^   int nToPlay;$/;"	m	struct:_AudioOut	file:
nToks	HRec.c	/^   int nToks;               \/* Maximum tokens to propagate (0==1) *\/$/;"	m	struct:precinfo	file:
nUse	HModel.h	/^   int nUse;               \/* num logical hmm's sharing this def *\/$/;"	m	struct:__anon49
nUse	HModel.h	/^   int nUse;            \/* usage counter *\/$/;"	m	struct:__anon41
nUse	HModel.h	/^   int nUse;            \/* usage counter *\/$/;"	m	struct:__anon47
nUse	HModel.h	/^  int nUse;                         \/* usage counter *\/$/;"	m	struct:_AdaptXForm
nUse	HModel.h	/^  int nUse;            \/* usage counter *\/$/;"	m	struct:__anon50
nUse	HModel.h	/^  int nUse;            \/* usage counter *\/$/;"	m	struct:__anon53
nUse	HModel.h	/^  int nUse;            \/* usage counter *\/$/;"	m	struct:__anon54
nUse	HModel.h	/^  int nUse;            \/* usage counter *\/$/;"	m	struct:__anon55
nUsed	HParm.c	/^   int nUsed;         \/* num columns used in each row of the parm block *\/$/;"	m	struct:__anon62	file:
n_hmm	HNet.h	/^   n_hmm=2,             \/* Node Instance represents HMM *\/$/;"	e	enum:__anon58
n_lcontext	HNet.h	/^   n_lcontext=16,       \/* Multiplication factor for context id *\/$/;"	e	enum:__anon58
n_nocontext	HNet.h	/^   n_nocontext=15,      \/* binary and with this to remove context ids *\/$/;"	e	enum:__anon58
n_rcontext	HNet.h	/^   n_rcontext=16384     \/* Multiplication factor for context id *\/$/;"	e	enum:__anon58
n_tr0	HNet.h	/^   n_tr0=4,             \/* Entry token reaches exit in t=0 *\/$/;"	e	enum:__anon58
n_unused	HNet.h	/^   n_unused,            \/* Node Instance not yet assigned *\/$/;"	e	enum:__anon58
n_wd0	HNet.h	/^   n_wd0=1,             \/* Exit token reaches word node in t=0 *\/$/;"	e	enum:__anon58
n_wdstart	HNet.h	/^   n_wdstart=8,         \/* Temporary wdstart node *\/$/;"	e	enum:__anon58
n_word	HNet.h	/^   n_word=4,            \/* Node Instance represents word end (or null) *\/$/;"	e	enum:__anon58
na	HNet.h	/^   int na;                      \/* Number of arcs *\/$/;"	m	struct:lattice
nact	HRec.c	/^   int nact;                \/* Number of active instances *\/$/;"	m	struct:precinfo	file:
nact	HRec.h	/^   int nact;                \/* Number of active models *\/$/;"	m	struct:vrecinfo
nalign	HRec.c	/^   int nalign;              \/* Current number of align records *\/$/;"	m	struct:precinfo	file:
name	HLM.h	/^   char *name;                  \/* Name used for identifying lm *\/$/;"	m	struct:lmodel
name	HLabel.c	/^   LabId name;$/;"	m	struct:__anon26	file:
name	HLabel.h	/^   char * name;             \/* Label Name *\/$/;"	m	struct:_NameCell
name	HLat.c	/^   char name[MAXFNAMELEN];$/;"	m	struct:_LLFInfo	file:
name	HMem.h	/^   char *name;          \/*            name of this memory heap            *\/$/;"	m	struct:__anon37
name	HModel.c	/^   char *name;$/;"	m	struct:__anon39	file:
name	HShell.h	/^   char *name;          \/* name of param - upper case always *\/$/;"	m	struct:__anon78
name	HShell.h	/^   char name[256];      \/* file name for error messages *\/$/;"	m	struct:__anon75
name	esignal.h	/^    char        *name;          \/* identifying character string *\/$/;"	m	struct:FieldSpec
namecellHeap	HLabel.c	/^static MemHeap namecellHeap;         \/* heap for name cells *\/$/;"	v	file:
natReadOrder	HShell.c	/^static Boolean natReadOrder = FALSE;     \/* Preserve natural mach read order*\/$/;"	v	file:
natReadOrder	HWave.c	/^static Boolean natReadOrder = FALSE;    \/* Preserve natural read byte order*\/$/;"	v	file:
natWriteOrder	HParm.c	/^static Boolean natWriteOrder = FALSE; \/* Preserve natural write byte order*\/$/;"	v	file:
natWriteOrder	HShell.c	/^static Boolean natWriteOrder = FALSE;    \/* Preserve natural mach write order*\/$/;"	v	file:
natWriteOrder	HWave.c	/^static Boolean natWriteOrder = FALSE;   \/* Preserve natural write byte order*\/$/;"	v	file:
nbestentry	HRec.c	/^struct nbestentry {$/;"	s	file:
nc	HNet.h	/^   int nc;         \/* Number of contexts *\/$/;"	m	struct:hmmsetcxtinfo
ncells	HGraf.c	/^static unsigned int  ncells, dispWIDE, dispHIGH, dispDEEP;$/;"	v	file:
ncf	HNet.c	/^int nwi=0,nin=0,nfi=0,ncn=0,nll=0,ncf=0,nwe=0,nil=0,nxl=0,nnl=0;$/;"	v
ncf	HNet.h	/^   int ncf;        \/* Number of context free models *\/$/;"	m	struct:hmmsetcxtinfo
nci	HNet.h	/^   int nci;        \/* Number of context independent models *\/$/;"	m	struct:hmmsetcxtinfo
ncn	HNet.c	/^int nwi=0,nin=0,nfi=0,ncn=0,nll=0,ncf=0,nwe=0,nil=0,nxl=0,nnl=0;$/;"	v
nend	HNet.c	/^   int nend;        \/* Number of models in ends chain *\/$/;"	m	struct:pronholder	file:
nentry	HLM.h	/^typedef struct nentry {         \/* HLM NGram history *\/$/;"	s
nep_cmp	HLM.c	/^static int nep_cmp(const void *v1,const void *v2)$/;"	f	file:
net	HNet.h	/^   char *net;			\/* Network file name (NULL==unknown) *\/$/;"	m	struct:lattice
net	HRec.c	/^   Network *net;            \/* Recognition network *\/$/;"	m	struct:precinfo	file:
newln	HLat.c	/^      LNode *newln;$/;"	m	union:_SubLNode::__anon30	file:
next	HAdapt.c	/^   struct _AInfo *next;            \/* next external file name in list *\/$/;"	m	struct:_AInfo	typeref:struct:_AInfo::_AInfo	file:
next	HAdapt.c	/^   struct _AccCache *next;$/;"	m	struct:_AccCache	typeref:struct:_AccCache::_AccCache	file:
next	HAdapt.c	/^   struct _ObsCache *next;$/;"	m	struct:_ObsCache	typeref:struct:_ObsCache::_ObsCache	file:
next	HArc.h	/^  CorrN *next;$/;"	m	struct:_CorrN
next	HAudio.c	/^   struct mmapibuf *next;$/;"	m	struct:mmapibuf	typeref:struct:mmapibuf::mmapibuf	file:
next	HDict.h	/^   Pron next;      \/* Next pronunciation of word *\/$/;"	m	struct:_WordPron
next	HDict.h	/^   Word next;       \/* next word in hash table chain *\/$/;"	m	struct:_DictEntry
next	HGraf.h	/^   BtnLink next;$/;"	m	struct:_HButton
next	HLabel.h	/^   struct _LabList *next;   \/* Next label list *\/$/;"	m	struct:_LabList	typeref:struct:_LabList::_LabList
next	HLabel.h	/^   struct _MLFEntry *next;    \/* next in chain *\/$/;"	m	struct:_MLFEntry	typeref:struct:_MLFEntry::_MLFEntry
next	HLabel.h	/^   struct _NameCell *next;  \/* Chain *\/$/;"	m	struct:_NameCell	typeref:struct:_NameCell::_NameCell
next	HLat.c	/^   LLFInfo *next;$/;"	m	struct:_LLFInfo	file:
next	HLat.c	/^   SubLArc *next;$/;"	m	struct:_SubLArc	file:
next	HLat.c	/^   SubLNode *next;$/;"	m	struct:_SubLNode	file:
next	HMem.c	/^   struct _MemHeapRec *next;$/;"	m	struct:_MemHeapRec	typeref:struct:_MemHeapRec::_MemHeapRec	file:
next	HMem.h	/^   BlockP next;         \/*           next block in chain                  *\/$/;"	m	struct:_Block
next	HModel.c	/^  XFDirLink next;          \/* next directory name in list *\/$/;"	m	struct:_XFDirInfo	file:
next	HModel.h	/^   ILink next;$/;"	m	struct:_ItemRec
next	HModel.h	/^   MILink next;            \/* next external file name in list *\/$/;"	m	struct:_MMFInfo
next	HModel.h	/^   MLink next;             \/* next cell in hash table *\/$/;"	m	struct:_MacroDef
next	HModel.h	/^   struct _PtrMap *next;   \/* next cell in hash table *\/$/;"	m	struct:_PtrMap	typeref:struct:_PtrMap::_PtrMap
next	HNet.c	/^   struct pronholder *next;$/;"	m	struct:pronholder	typeref:struct:pronholder::pronholder	file:
next	HNet.h	/^   struct sublatdef *next;  \/* Next sublat at this level *\/$/;"	m	struct:sublatdef	typeref:struct:sublatdef::sublatdef
next	HParm.c	/^   struct channelinfo *next;  \/* Next channel record *\/$/;"	m	struct:channelinfo	typeref:struct:channelinfo::channelinfo	file:
next	HParm.c	/^   struct pblock *next; \/* Next block *\/$/;"	m	struct:pblock	typeref:struct:pblock::pblock	file:
next	HShell.c	/^   struct _ConfigEntry *next;$/;"	m	struct:_ConfigEntry	typeref:struct:_ConfigEntry::_ConfigEntry	file:
next	HShell.c	/^   struct _VersionEntry *next;$/;"	m	struct:_VersionEntry	typeref:struct:_VersionEntry::_VersionEntry	file:
next	HTrain.h	/^   IBLink next;      \/* next block in chain *\/$/;"	m	struct:_ItemBlock
next	HVQ.h	/^   VQTable next;        \/* used internally for housekeeping *\/$/;"	m	struct:_VQTabRec
nextarg	HShell.c	/^static int nextarg=1;         \/* next arg to return in GetxxxArg *\/$/;"	v	file:
nfi	HNet.c	/^int nwi=0,nin=0,nfi=0,ncn=0,nll=0,ncf=0,nwe=0,nil=0,nxl=0,nnl=0;$/;"	v
ngram	HLM.h	/^      NGramLM *ngram;$/;"	m	union:lmodel::__anon33
ngramlm	HLM.h	/^typedef struct ngramlm {$/;"	s
nid	HVQ.h	/^   short nid,lid,rid;   \/* used for mapping between mem and ext def *\/$/;"	m	struct:_VQNodeRec
nil	HNet.c	/^int nwi=0,nin=0,nfi=0,ncn=0,nll=0,ncf=0,nwe=0,nil=0,nxl=0,nnl=0;$/;"	v
nin	HNet.c	/^int nwi=0,nin=0,nfi=0,ncn=0,nll=0,ncf=0,nwe=0,nil=0,nxl=0,nnl=0;$/;"	v
nlinks	HNet.h	/^   int nlinks;          \/* Number of nodes connected to this one *\/$/;"	m	struct:_NetNode
nll	HNet.c	/^int nwi=0,nin=0,nfi=0,ncn=0,nll=0,ncf=0,nwe=0,nil=0,nxl=0,nnl=0;$/;"	v
nmp	HRec.c	/^   int nmp;$/;"	m	struct:psetinfo	file:
nn	HNet.h	/^   int nn;                      \/* Number of nodes *\/$/;"	m	struct:lattice
nnl	HNet.c	/^int nwi=0,nin=0,nfi=0,ncn=0,nll=0,ncf=0,nwe=0,nil=0,nxl=0,nnl=0;$/;"	v
noNumEscapes	HShell.c	/^static Boolean noNumEscapes = FALSE;     \/* Prevent writing in \\012 format *\/$/;"	v	file:
noTable	HParm.c	/^   Boolean noTable;    \/* no need for table access *\/$/;"	m	struct:_ParmBuf	file:
noTokenSurvived	HRec.h	/^   Boolean noTokenSurvived; \/* Set when no valid final token produced *\/$/;"	m	struct:vrecinfo
node	HNet.h	/^   NetNode *node;       \/* Node in network *\/$/;"	m	struct:_NetLink
node	HRec.c	/^   NetNode *node;       \/* Node for which alignment information present *\/$/;"	m	struct:align	file:
node	HRec.c	/^   NetNode *node;       \/* Position of instance within network *\/$/;"	m	struct:_NetInst	file:
node	HRec.h	/^   NetNode *node;       \/* Word level traceback info *\/$/;"	m	struct:path
nodeHeap	HNet.h	/^   MemHeap nodeHeap;  \/* a heap for allocating nodes *\/$/;"	m	struct:__anon60
nodeIndex	HModel.h	/^  int nodeIndex;            \/* index number of node *\/$/;"	m	struct:_RegNode
nodeOcc	HModel.h	/^  float nodeOcc;            \/* occupancy for this node *\/$/;"	m	struct:_RegNode
node_hmm	HRec.c	53;"	d	file:
node_tr0	HRec.c	55;"	d	file:
node_wd0	HRec.c	56;"	d	file:
node_word	HRec.c	54;"	d	file:
nphones	HDict.h	/^   short nphones;  \/* Number of phones in pronuciation *\/$/;"	m	struct:_WordPron
nphones	HNet.c	/^   short nphones;   \/* Number of phones for this instance *\/$/;"	m	struct:pronholder	file:
nprons	HDict.h	/^   int nprons;          \/* total number of prons *\/$/;"	m	struct:__anon15
nprons	HDict.h	/^   int nprons;      \/* number of prons for this word *\/$/;"	m	struct:_DictEntry
npth	HRec.c	/^   int npth;                \/* Current number of path records *\/$/;"	m	struct:precinfo	file:
nse	HLM.h	/^   lmCnt nse;                   \/* Number of ngrams for this entry *\/$/;"	m	struct:nentry
nsize	HLM.h	/^   int nsize;                   \/* Unigram==1, Bigram==2, Trigram==3 *\/$/;"	m	struct:ngramlm
nsp	HRec.c	/^   int nsp;$/;"	m	struct:psetinfo	file:
nstart	HNet.c	/^   int nstart;      \/* Number of models in starts chain *\/$/;"	m	struct:pronholder	file:
ntr	HRec.c	/^   int ntr;$/;"	m	struct:psetinfo	file:
nullWord	HDict.h	/^   Word nullWord;       \/* dummy null word\/node *\/$/;"	m	struct:__anon15
nullWord	HLat.c	/^static LabId nullWord;          \/* null word in Lattices (!NULL) *\/$/;"	v	file:
nullWord	HNet.h	/^   Word nullWord;     \/* Word for output when word==NULL *\/$/;"	m	struct:__anon60
null_token	HRec.c	/^const Token null_token={LZERO,0.0,NULL,NULL};$/;"	v
numAccesses	HLabel.c	/^static long numAccesses = 0;$/;"	v	file:
numCepCoef	HParm.c	/^   int numCepCoef;            \/* Number of cepstral coef *\/$/;"	m	struct:__anon62	file:
numChan	HWave.c	/^   int32 numChan;        \/* number of channels *\/$/;"	m	struct:__anon97	file:
numChannels	HWave.c	/^   short numChannels;$/;"	m	struct:__anon94	file:
numChannels	HWave.c	/^   short numChannels;$/;"	m	struct:__anon95	file:
numChannels	HWave.c	/^   short numChannels;$/;"	m	struct:__anon99	file:
numChans	HParm.c	/^   int numChans;              \/* Number of filter bank channels *\/$/;"	m	struct:__anon62	file:
numChans	HSigP.h	/^   int numChans;        \/* number of channels *\/$/;"	m	struct:__anon80
numChild	HModel.h	/^  int numChild;             \/* number of children - 0 if terminal *\/$/;"	m	struct:_RegNode
numClasses	HModel.h	/^  int numClasses;      \/* number of baseclasses *\/$/;"	m	struct:__anon50
numClust	HTrain.h	/^   int numClust;   \/* num cluster nodes *\/$/;"	m	struct:__anon83
numConfigParms	HShell.c	/^static int numConfigParms = 0;$/;"	v	file:
numElem	HMem.h	/^   size_t numElem;      \/* #elems in blk             #bytes in blk        *\/$/;"	m	struct:_Block
numFiles	HModel.h	/^   int numFiles;           \/* total number of ext files *\/$/;"	m	struct:_HMMSet
numFree	HMem.h	/^   size_t numFree;      \/* #free elements            #free bytes          *\/$/;"	m	struct:_Block
numLLFs	HLat.c	/^static int numLLFs = 0; $/;"	v	file:
numLat	HFBLat.h	/^  Lattice *numLat; \/* for MPE. *\/$/;"	m	struct:__anon23
numLatIncluded	HArc.h	/^  Boolean numLatIncluded; \/*if TRUE and this is a denominator lat, means the num lat$/;"	m	struct:ArcInfoStruct
numLatsLoaded	HLat.c	/^static int numLatsLoaded = 0;$/;"	v	file:
numLink	HNet.h	/^   int numLink;$/;"	m	struct:__anon60
numLists	HLabel.h	/^   int numLists;           \/* num label lists (default=1) *\/$/;"	m	struct:__anon27
numLogHMM	HModel.h	/^   int numLogHMM;          \/* Num of logical HMM's *\/$/;"	m	struct:_HMMSet
numMLFs	HLabel.c	/^static int      numMLFs = 0;     \/* number of MLF files opened *\/$/;"	v	file:
numMacros	HModel.h	/^   int numMacros;          \/* num macros used in this set *\/$/;"	m	struct:_HMMSet
numMix	HModel.h	/^   int numMix;             \/* Number of mixture components in HMMSet *\/$/;"	m	struct:_HMMSet
numNode	HNet.h	/^   int numNode;$/;"	m	struct:__anon60
numNodes	HModel.h	/^  int numNodes;        \/* number of non-terminal nodes in tree *\/$/;"	m	struct:RegTree
numNodes	HVQ.h	/^   short numNodes;      \/* total num nodes in all sub trees *\/$/;"	m	struct:_VQTabRec
numNuisanceDim	HAdapt.c	/^static int numNuisanceDim = 0;$/;"	v	file:
numOutMLF	HLabel.c	/^static int numOutMLF = 0;                   \/* number of output MLFs *\/ $/;"	v	file:
numParm	HAudio.c	/^static int numParm = 0;$/;"	v	file:
numParm	HLabel.c	/^static int numParm = 0;$/;"	v	file:
numParm	HMath.c	/^static int numParm = 0;$/;"	v	file:
numParm	HMem.c	/^static int numParm = 0;$/;"	v	file:
numParm	HSigP.c	/^static int numParm = 0;$/;"	v	file:
numParm	HVQ.c	/^static int numParm = 0;$/;"	v	file:
numParm	HWave.c	/^static int numParm = 0;$/;"	v	file:
numPhyHMM	HModel.h	/^   int numPhyHMM;          \/* Num of distinct physical HMM's *\/$/;"	m	struct:_HMMSet
numSamples	HAudio.c	/^   int numSamples;$/;"	m	struct:_AudioIn	file:
numSamples	HAudio.c	/^   int numSamples;$/;"	m	struct:_AudioOut	file:
numSharedMix	HModel.h	/^   int numSharedMix;       \/* Number of shared mixtures in HMMSet *\/$/;"	m	struct:_HMMSet
numSharedStates	HModel.h	/^   int numSharedStates;    \/* Number of shared states in HMMSet *\/$/;"	m	struct:_HMMSet
numStates	HModel.h	/^   int numStates;          \/* Number of states in HMMSet *\/$/;"	m	struct:_HMMSet
numStates	HModel.h	/^   short numStates;        \/* includes entry and exit states *\/$/;"	m	struct:__anon49
numTNodes	HModel.h	/^  int numTNodes;       \/* number of terminal nodes in tree *\/$/;"	m	struct:RegTree
numTests	HLabel.c	/^static long numTests = 0;$/;"	v	file:
numTransP	HModel.h	/^   int numTransP;          \/* Number of distinct transition matrices *\/$/;"	m	struct:_HMMSet
numWords	HLM.h	/^   lmCnt numWords;              \/* Number of words for language model *\/$/;"	m	struct:matbilm
numWrites	HAudio.c	/^   int numWrites;$/;"	m	struct:_AudioOut	file:
numXForms	HModel.h	/^  int numXForms;       \/* number of transforms in this xformset *\/$/;"	m	struct:__anon54
num_index	HFBLat.h	/^  float num_index; \/*make sure set. *\/$/;"	m	struct:__anon23
nwe	HNet.c	/^int nwi=0,nin=0,nfi=0,ncn=0,nll=0,ncf=0,nwe=0,nil=0,nxl=0,nnl=0;$/;"	v
nwi	HNet.c	/^int nwi=0,nin=0,nfi=0,ncn=0,nll=0,ncf=0,nwe=0,nil=0,nxl=0,nnl=0;$/;"	v
nwords	HDict.h	/^   int nwords;          \/* total number of words *\/$/;"	m	struct:__anon15
nxl	HNet.c	/^int nwi=0,nin=0,nfi=0,ncn=0,nll=0,ncf=0,nwe=0,nil=0,nxl=0,nnl=0;$/;"	v
nxtInst	HRec.c	/^   NetInst *nxtInst;        \/* Inst used to select next in step sequence *\/$/;"	m	struct:precinfo	file:
nxtpath	HRec.c	/^struct nxtpath$/;"	s	file:
nz	HAudio.c	/^static int nz=0;$/;"	v	file:
o	HTrain.h	/^   Observation o;       \/* used as an 'i\/o channel' to segstore *\/$/;"	m	struct:_SegStoreRec
oCnt	HParm.c	/^   int oCnt;              \/* Number of observations processed in session *\/$/;"	m	struct:channelinfo	file:
objects	Makefile	/^objects = HGraf.o esig_asc.o \\$/;"	m
obs	HAdapt.c	/^   Vector obs;$/;"	m	struct:_ObsCache	file:
obs	HRec.c	/^   Observation *obs;         \/* Current Observation *\/$/;"	m	struct:precinfo	file:
obsVec	HAdapt.c	/^   Vector  obsVec;$/;"	m	struct:__anon8	file:
obyte_order	HAudio.c	/^   char *obyte_order;$/;"	m	struct:_AudioIn	file:
obyte_order	HAudio.c	/^   char *obyte_order;$/;"	m	struct:_AudioOut	file:
oc	HAdapt.c	/^   ObsCache *oc;         \/* observation cache for input transform *\/$/;"	m	struct:__anon9	file:
occ	HAdapt.c	/^   double occ;  $/;"	m	struct:__anon6	file:
occ	HAdapt.c	/^   float occ;$/;"	m	struct:__anon8	file:
occ	HFBLat.c	/^   float occ;$/;"	m	struct:__anon22	file:
occ	HTrain.h	/^   Vector occ;       \/* array[1..N] of state occupation *\/$/;"	m	struct:__anon84
occ	HTrain.h	/^   float occ;        \/* occ for states sharing this mpdf *\/$/;"	m	struct:__anon86
occ	HTrain.h	/^   float occ;        \/* occ for states sharing this mpdf *\/$/;"	m	struct:__anon87
occ	HTrain.h	/^   float occ;        \/* occ for states sharing this pdf *\/$/;"	m	struct:__anon85
occa	HFB.h	/^  Vector *occa;       \/* array[1..Q][1..Nq] of occ probs (trace only) *\/$/;"	m	struct:__anon19
occt	HFB.h	/^  Vector occt;        \/* occ probs for current time t *\/$/;"	m	struct:__anon19
occurrence	esignal.h	/^    short       occurrence;     \/* REQUIRED, GLOBAL, OPTIONAL, etc. *\/$/;"	m	struct:FieldSpec
offset	HLabel.h	/^   long offset;   \/* offset into MLF file *\/$/;"	m	struct:__anon28
offset	esignal.h	/^    double      scale, offset;  \/* scale factor and offset relating$/;"	m	struct:FieldSpec
oldincludedir	Makefile	/^oldincludedir = \/usr\/include$/;"	m
ooo	HRec.c	/^   Boolean ooo;         \/* Instance potentially out of order *\/$/;"	m	struct:_NetInst	file:
optSet	HModel.h	/^   Boolean optSet;         \/* true if global options have been set *\/$/;"	m	struct:_HMMSet
orphanMacFile	HModel.c	/^static char orphanMacFile[100];         \/* last resort file for new macros *\/$/;"	v	file:
osamples	HAudio.c	/^   long osamples;            \/* Sample rate *\/$/;"	m	struct:_AudioIn	file:
osamples	HAudio.c	/^   long osamples;            \/* Sample rate *\/$/;"	m	struct:_AudioOut	file:
ot	HFB.h	/^  Observation ot;      \/* Observation at time t ... *\/$/;"	m	struct:__anon17
ot2	HFB.h	/^  Observation ot2;     \/* Cepstral Mean Normalised obervation, used in$/;"	m	struct:__anon17
otprob	HArc.h	/^  float ****otprob; \/* [myArc->t_start..myArc->t_end][0..(S>1?S:0)][2..Nq-1][0..(M>1)?M:0] *\/$/;"	m	struct:_Acoustic
otprob	HFB.h	/^  float *****otprob;  \/* array[1..T][1..Q][2..Nq-1][0..S][0..M] of prob *\/$/;"	m	struct:__anon19
outBufPos	HAudio.c	/^   int outBufPos;            \/* Position to read out of buffer *\/$/;"	m	struct:_AudioIn	file:
outConn	HAudio.c	/^   char outConn[30];   $/;"	m	struct:_AudioOut	file:
outMLF	HLabel.c	/^static FILE *outMLF = NULL;                 \/* output MLF file, if any *\/ $/;"	v	file:
outMLFSet	HLabel.c	/^static OutMLFEntry outMLFSet[MAXMLFS];      \/* array of output MLFs *\/$/;"	v	file:
outRow	HParm.c	/^   int outRow;         \/*   of next row to return (may be in any block) *\/$/;"	m	struct:_ParmBuf	file:
outSilWarn	HParm.c	/^   Boolean outSilWarn;        \/* Give Warning when SilMeas *\/$/;"	m	struct:__anon62	file:
outSpkrPat	HAdapt.h	/^  char *outSpkrPat;$/;"	m	struct:__anon10
outSym	HDict.h	/^   LabId outSym;   \/* Output symbol generated when pronunciation recognised *\/$/;"	m	struct:_WordPron
outXForm	HAdapt.c	/^static AdaptXForm* outXForm = NULL;$/;"	v	file:
outXForm	HAdapt.h	/^  AdaptXForm *outXForm;$/;"	m	struct:__anon10
outXFormDir	HAdapt.h	/^  char *outXFormDir;$/;"	m	struct:__anon10
outXFormExt	HAdapt.h	/^  char *outXFormExt;$/;"	m	struct:__anon10
outp	HRec.c	/^   LogFloat outp;           \/* State\/mixture output likelihood *\/$/;"	m	struct:precomp	file:
outx	HAudio.c	/^   int inx,outx;         \/* in\/out indices - wrap modulo size *\/$/;"	m	struct:__anon13	file:
owner	HModel.h	/^   HLink owner;      \/* HMM owning this item *\/$/;"	m	struct:_ItemRec
owner	HModel.h	/^   struct _HMMSet *owner;  \/* owner of this model *\/$/;"	m	struct:__anon49	typeref:struct:__anon49::_HMMSet
pCollThresh	HRec.h	/^   int pCollThresh;         \/* Max path records created before collection *\/$/;"	m	struct:vrecinfo
pHead	HAudio.c	/^   mmApiBuf *pHead;         \/* Head of buffer list *\/$/;"	m	struct:_AudioOut	file:
pInfo	HFB.h	/^  PruneInfo *pInfo;   \/* pruning information *\/$/;"	m	struct:__anon19
pNoRef	HRec.c	/^   Path pNoRef;             \/* Head of PathNoRef linked list *\/$/;"	m	struct:precinfo	file:
pNoTail	HRec.c	/^   Path pNoTail;            \/* Tail of PathNoRef linked list *\/$/;"	m	struct:precinfo	file:
pTail	HAudio.c	/^   mmApiBuf *pTail;         \/* Tail of buffer list *\/$/;"	m	struct:_AudioOut	file:
pYesRef	HRec.c	/^   Path pYesRef;            \/* Head of PathYesRef linked list *\/$/;"	m	struct:precinfo	file:
pYesTail	HRec.c	/^   Path pYesTail;           \/* Tail of PathYesRef linked list *\/$/;"	m	struct:precinfo	file:
paInfo	HAdapt.c	/^   AInfo *paInfo;        \/* parent transform information *\/$/;"	m	struct:__anon9	file:
paSpkrPat	HAdapt.h	/^  char *paSpkrPat;$/;"	m	struct:__anon10
paXForm	HAdapt.h	/^  AdaptXForm *paXForm;$/;"	m	struct:__anon10
paXForm	HFB.h	/^  AdaptXForm *paXForm;\/* current parent transform (if any) *\/$/;"	m	struct:__anon20
paXForm	HFBLat.h	/^  AdaptXForm *paXForm;\/* current parent transform (if any) *\/$/;"	m	struct:__anon23
paXFormDir	HAdapt.h	/^  char *paXFormDir;$/;"	m	struct:__anon10
paXFormExt	HAdapt.h	/^  char *paXFormExt;$/;"	m	struct:__anon10
paac	HAdapt.c	/^   AccCache *paac;       \/* accummulator cache for parent transform *\/$/;"	m	struct:__anon9	file:
paoc	HAdapt.c	/^   ObsCache *paoc;       \/* observation cache for parent transform *\/$/;"	m	struct:__anon9	file:
param	HShell.c	/^   ConfParam param;$/;"	m	struct:_ConfigEntry	file:
params	HAudio.c	/^   long params[2];           \/* parameter array *\/$/;"	m	struct:_AudioIn	file:
params	HAudio.c	/^   long params[6];           \/* parameter array *\/$/;"	m	struct:_AudioOut	file:
parc	HNet.h	/^   ArcId parc;         \/* Next arc preceding end node *\/$/;"	m	struct:larc
parc	HNet.h	/^   ArcId parc;$/;"	m	struct:larc_s
parc	HNet.h	/^   EArcId parc;        \/* Next arc preceding end node *\/$/;"	m	struct:larc_e
parentLarc	HArc.h	/^  LArc *parentLarc; \/*the word arc in the Lattice from which this was derived.*\/$/;"	m	struct:_Arc
parentXForm	HModel.h	/^   AdaptXForm *parentXForm;$/;"	m	struct:_HMMSet
parentXForm	HModel.h	/^  struct _AdaptXForm *parentXForm;  \/* parent transform, NULL if no parent parenttransform *\/$/;"	m	struct:_AdaptXForm	typeref:struct:_AdaptXForm::_AdaptXForm
parmHeap	HParm.c	/^static MemHeap parmHeap;                \/* HParm no longer uses gstack *\/$/;"	v	file:
parms	HAudio.c	/^   SSPlayParams parms;$/;"	m	struct:_AudioOut	file:
parms	HAudio.c	/^   SSRecordParams parms;$/;"	m	struct:_AudioIn	file:
parsePhysicalHMM	HUtil.c	/^static Boolean parsePhysicalHMM = FALSE;$/;"	v	file:
patHash	HLabel.h	/^   unsigned patHash;    \/* hash of pattern if not general *\/$/;"	m	struct:_MLFEntry
patType	HLabel.h	/^   MLFPatType patType;  \/* type of pattern *\/$/;"	m	struct:_MLFEntry
path	HRec.c	/^   Path *path;          \/* Route (word level) through network *\/$/;"	m	struct:reltoken	file:
path	HRec.h	/^   Path *path;		\/* Route (word level) through network *\/$/;"	m	struct:token
path	HRec.h	/^struct path$/;"	s
pathHeap	HRec.c	/^   MemHeap pathHeap;        \/* Path heap *\/$/;"	m	struct:precinfo	file:
pattern	HLabel.h	/^   char *pattern;       \/* pattern to match for this definition *\/$/;"	m	struct:_MLFEntry
pattern	HUtil.c	/^static char pattern[PAT_LEN];  \/* A copy of the last pattern parsed *\/$/;"	v	file:
pbStatMap	HParm.c	/^static char * pbStatMap[] = { $/;"	v	file:
pbValid	HShell.h	/^   Boolean pbValid;     \/* true if putback holds char *\/$/;"	m	struct:__anon75
pblock	HParm.c	/^typedef struct pblock {$/;"	s	file:
pbuf	HFB.h	/^  ParmBuf pbuf;       \/* parameter buffer *\/$/;"	m	struct:__anon17
pbuf2	HFB.h	/^  ParmBuf pbuf2;      \/* a second parameter buffer (if required) *\/$/;"	m	struct:__anon17
pclose	HShell.c	921;"	d	file:
pcra	HNet.h	/^   EArcId pcra;        \/*  to easy deletetion *\/$/;"	m	struct:larc_e
pde	HFB.c	/^static Boolean pde = FALSE;  \/* partial distance elimination *\/$/;"	v	file:
pde1BlockEnd	HModel.c	/^static int pde1BlockEnd = 13;          \/* size of PDE blocks *\/$/;"	v	file:
pde2BlockEnd	HModel.c	/^static int pde2BlockEnd = 26;          \/* size of PDE blocks *\/$/;"	v	file:
pdeTh1	HModel.c	/^static LogFloat pdeTh1 = -5.0;         \/* threshold for 1\/3 PDE *\/$/;"	v	file:
pdeTh2	HModel.c	/^static LogFloat pdeTh2 = 0.0;          \/* threshold for 2\/3 PDE *\/$/;"	v	file:
pdf	HModel.h	/^   StreamElem *pdf;     \/* array[1..numStreams] of StreamElem *\/$/;"	m	struct:__anon47
pen	HLM.h	/^   LogFloat pen;                \/* Word insertion penalty *\/$/;"	m	struct:lmodel
phnInsPen	HExactMPE.c	/^static float phnInsPen = 0.0;    \/* repeat of config also used in HFBLat.c *\/$/;"	v	file:
phnInsPen	HFBLat.c	/^static float phnInsPen = 0.0;                 \/* Insertion penalty for each phone, not subject to lm scaling.  Normally zero, but setting it to e.g.$/;"	v	file:
phone	HArc.h	/^  LabId phone;         \/* phone-in-context. *\/$/;"	m	struct:_Arc
phones	HDict.h	/^   LabId *phones;  \/* Array[0..nphones-1] of phones *\/$/;"	m	struct:_WordPron
phones	HNet.c	/^   LabId *phones;   \/* Phone sequence for the instance *\/$/;"	m	struct:pronholder	file:
phones	HNet.c	/^   LabId *phones;$/;"	m	struct:pinstinfo	file:
phonesHeap	HDict.h	/^   MemHeap phonesHeap;  \/* for arrays of phones   *\/$/;"	m	struct:__anon15
phonesOut	HAudio.c	/^static Boolean phonesOut = TRUE;$/;"	v	file:
pinstinfo	HNet.c	/^typedef struct pinstinfo {$/;"	s	file:
pk	HParm.c	/^   ParmKind pk;       \/* Type of source - split into parmKind and *\/$/;"	m	struct:hparmsrcdef	file:
pk	HParm.h	/^   ParmKind pk;          \/* parm kind of this obs (bk or DISCRETE) *\/$/;"	m	struct:__anon68
pkind	HModel.c	/^   ParmKind pkind;      \/* samp kind when sym==PARMKIND *\/$/;"	m	struct:__anon40	file:
pkind	HModel.h	/^   ParmKind pkind;         \/* kind of obs vector components *\/$/;"	m	struct:_HMMSet
pkind	HModel.h	/^  ParmKind pkind;      \/* parameter kind for xform to be applied to *\/$/;"	m	struct:__anon55
playPort	HAudio.c	/^   ALport playPort;          \/* SGI audio port *\/$/;"	m	struct:_AudioOut	file:
pmap	HModel.h	/^   PtrMap ** pmap;         \/* Array[0..PTRHASHSIZE-1]OF PtrMap* *\/$/;"	m	struct:_HMMSet
pmkmap	HParm.c	/^static char *pmkmap[] = {"WAVEFORM", "LPC", "LPREFC", "LPCEPSTRA", $/;"	v	file:
pnlen	HRec.c	/^   int pnlen;               \/* Number of PathNoRef list *\/$/;"	m	struct:precinfo	file:
pnum	HDict.h	/^   short pnum;     \/* Pronunciation number 1..nprons *\/$/;"	m	struct:_WordPron
pobcaStack	HAdapt.c	/^static MemHeap pobcaStack; \/* parent obscache *\/$/;"	v	file:
popen	HShell.c	920;"	d	file:
pos	HArc.h	/^  int pos;       \/*the position of this phone in the word arc.*\/$/;"	m	struct:_Arc
position	HUtil.c	/^static char *position;         \/*  and the current position in copy *\/$/;"	v	file:
position	esignal.h	/^    int     position;$/;"	m	struct:Annot
postFrames	HParm.c	/^   int postFrames;$/;"	m	struct:__anon62	file:
pr	HFB.h	/^  LogDouble pr;        \/* log prob of current utterance *\/$/;"	m	struct:__anon17
pr	HFB.h	/^  LogDouble pr;       \/* log prob of current utterance *\/$/;"	m	struct:__anon19
pr	HFBLat.h	/^  LogDouble pr;$/;"	m	struct:__anon23
prC	HTrain.c	/^static int muC,vaC,trC,wtC,prC;$/;"	v	file:
preEmph	HParm.c	/^   float preEmph;             \/* PreEmphasis Coef *\/$/;"	m	struct:__anon62	file:
preFrames	HParm.c	/^   int preFrames;$/;"	m	struct:__anon62	file:
preQual	HModel.h	/^  Boolean preQual;     \/* is this applied prior to qualifiers? *\/$/;"	m	struct:__anon55
preQual	HParm.c	/^   Boolean preQual;$/;"	m	struct:__anon62	file:
prec	HArc.h	/^  HArc *prec;$/;"	m	struct:_Arc
precTrans	HArc.h	/^  ArcTrans *precTrans;$/;"	m	struct:_Arc
precTrans	HArc.h	/^  CorrA *precTrans;$/;"	m	struct:_CorrN
precinfo	HRec.c	/^struct precinfo {$/;"	s	file:
precomp	HRec.c	/^typedef struct precomp$/;"	s	file:
pred	HLabel.h	/^   LLink pred;              \/* Preceding label *\/$/;"	m	struct:_Label
pred	HNet.h	/^   ArcId pred;         \/* Linked list of arcs preceding node *\/$/;"	m	struct:lnode
prefix	Makefile	/^prefix = \/usr\/local$/;"	m
present	esignal.h	/^    Bool	present;	\/* is OPTIONAL field present in record? *\/$/;"	m	struct:FieldSpec
prev	HArc.h	/^  CorrN *prev;$/;"	m	struct:_CorrN
prev	HAudio.c	/^   struct mmapibuf *prev;$/;"	m	struct:mmapibuf	typeref:struct:mmapibuf::mmapibuf	file:
prev	HRec.c	/^   Align *prev;         \/* Previous align record *\/$/;"	m	struct:align	file:
prev	HRec.c	/^   NBestEntry *prev;$/;"	m	struct:nbestentry	file:
prev	HRec.c	/^   Path *prev;          \/* Previous word record *\/$/;"	m	struct:nxtpath	file:
prev	HRec.h	/^   Path *prev;		\/* Previous word record *\/$/;"	m	struct:path
pri	HRec.c	/^static PRecInfo *pri;$/;"	v	file:
pri	HRec.h	/^   PRecInfo *pri;           \/* Private recognition information *\/$/;"	m	struct:vrecinfo
prid	HRec.c	/^   int prid;                \/* Unique pri identifier *\/$/;"	m	struct:precinfo	file:
printVersionInfo	HShell.c	/^static Boolean printVersionInfo = FALSE; \/* request version info *\/$/;"	v	file:
prlike	HNet.h	/^   LogFloat prlike;    \/* Pronunciation likelihood of arc *\/$/;"	m	struct:larc
prob	HDict.h	/^   LogFloat prob;  \/* Log probability of pronunciation *\/$/;"	m	struct:_WordPron
prob	HLM.h	/^   float prob;                  \/* probability *\/$/;"	m	struct:sentry
prob	HModel.h	/^   float prob;           \/* mixture prob scaled by maxP *\/$/;"	m	struct:__anon44
prob	HTrain.h	/^   LogFloat prob;    \/* PreComputed Mixture Log Prob *\/$/;"	m	struct:__anon88
prob	HTrain.h	/^   float *prob;      \/* PreComputed mixture Log Probs *\/$/;"	m	struct:__anon85
probScale	HFBLat.c	/^static float probScale = 1.0;                 \/* Scales the state-output and lm probabilities.  Leave this alone for normal usage. *\/$/;"	v	file:
probs	HModel.h	/^   TMProb *probs;        \/* array[1..M] of TMProb *\/$/;"	m	struct:__anon45
projSize	HModel.h	/^   short projSize;         \/* dimension of vector to update *\/$/;"	m	struct:_HMMSet
pron	HDict.h	/^   Pron pron;       \/* first pronunciation *\/$/;"	m	struct:_DictEntry
pron	HNet.c	/^   Pron pron;       \/* Actual pronunciation *\/$/;"	m	struct:pronholder	file:
pron	HNet.c	/^   Pron pron;$/;"	m	struct:pinstinfo	file:
pron	HNet.h	/^      Pron   pron;      \/* Word represented (may == null) *\/$/;"	m	union:_NetNode::__anon59
pronHeap	HDict.h	/^   MemHeap pronHeap;    \/* for WordPron structs   *\/$/;"	m	struct:__anon15
pronholder	HNet.c	/^typedef struct pronholder$/;"	s	file:
protectStaks	HMem.c	/^static Boolean protectStaks = FALSE;    \/* enable stack protection *\/$/;"	v	file:
protectStk	HMem.h	/^   Boolean protectStk;  \/*  MSTAK only, prevents disposal below Stack Top *\/$/;"	m	struct:__anon37
prscale	HNet.h	/^   float prscale;		\/* Pronunciation scale factor *\/$/;"	m	struct:lattice
pruneInc	HFB.c	/^   LogDouble pruneInc;       \/* pruning threshold increment *\/$/;"	m	struct:__anon16	file:
pruneInit	HFB.c	/^   LogDouble pruneInit;      \/* pruning threshold initially *\/$/;"	m	struct:__anon16	file:
pruneLim	HFB.c	/^   LogDouble pruneLim;       \/* pruning threshold limit *\/$/;"	m	struct:__anon16	file:
pruneSetting	HFB.c	/^} pruneSetting = { NOPRUNE, 0.0, NOPRUNE, 10.0 };$/;"	v	typeref:struct:__anon16	file:
pruneThresh	HFB.h	/^  LogDouble pruneThresh;    \/* pruning threshold currently *\/$/;"	m	struct:__anon18
pscale	HRec.c	/^   float pscale;            \/* Pronunciation probs scale factor *\/$/;"	m	struct:precinfo	file:
psetinfo	HRec.c	/^struct psetinfo$/;"	s	file:
psi	HRec.c	/^   PSetInfo *psi;           \/* HMMSet information *\/$/;"	m	struct:precinfo	file:
ptr	HModel.h	/^   Ptr ptr;                \/* the structure *\/$/;"	m	struct:_PtrMap
putWtActive	HModel.c	/^static Boolean putWtActive;   \/* false until a weight is output *\/$/;"	v	file:
putback	HShell.h	/^   int putback;         \/* put back character *\/$/;"	m	struct:__anon75
pxd	HRec.c	/^   Boolean pxd;         \/* External propagation done this frame *\/$/;"	m	struct:_NetInst	file:
pylen	HRec.c	/^   int pylen;               \/* Number of PathYesRef list *\/$/;"	m	struct:precinfo	file:
qDms	HFB.h	/^  short *qDms;        \/* array[1..Q] of minimum model duration *\/$/;"	m	struct:__anon19
qHead	HAudio.c	/^   mmApiBuf *qHead;         \/* Head of buffer waiting to be filled list *\/$/;"	m	struct:_AudioIn	file:
qHi	HArc.h	/^  int *qHi;     \/* [t], highest q active at time t *\/$/;"	m	struct:ArcInfoStruct
qHi	HFB.h	/^  short *qHi;               \/* array[1..T] of top of pruning beam *\/$/;"	m	struct:__anon18
qIds	HFB.h	/^  LabId  *qIds;       \/* array[1..Q] of logical HMM names (in qList) *\/$/;"	m	struct:__anon19
qLo	HArc.h	/^  int *qLo;     \/* [t], lowest q active at time t *\/$/;"	m	struct:ArcInfoStruct
qLo	HFB.h	/^  short *qLo;               \/* array[1..T] of bottom of pruning beam *\/$/;"	m	struct:__anon18
qTail	HAudio.c	/^   mmApiBuf *qTail;         \/* Tail of buffer waiting to be filled list *\/$/;"	m	struct:_AudioIn	file:
qcksrtM	HRec.c	/^static void qcksrtM(float *array,int l,int r,int M)$/;"	f	file:
qen	HParm.c	/^   int qen;            \/* final row in main block qualified (last valid row) *\/$/;"	m	struct:_ParmBuf	file:
qsa	HRec.c	/^   LogFloat *qsa;           \/* Array form performing qsort *\/$/;"	m	struct:precinfo	file:
qsn	HRec.c	/^   int qsn;                 \/* Sizeof qsa *\/$/;"	m	struct:precinfo	file:
qst	HParm.c	/^   int qst;            \/* next row in main block to qualify (qst>qwin) *\/$/;"	m	struct:_ParmBuf	file:
qwin	HParm.c	/^   int qwin;           \/* Width of qualify window (needed on each side) *\/$/;"	m	struct:_ParmBuf	file:
r	HParm.c	/^   ShortVec r;        \/* raw speech vector *\/$/;"	m	struct:__anon62	file:
rOK	HAudio.c	77;"	d	file:
rOR	HAudio.c	79;"	d	file:
rPthHeap	HRec.c	/^   MemHeap rPthHeap;        \/* NxtPath heap *\/$/;"	m	struct:precinfo	file:
rTokHeap	HRec.c	/^   MemHeap rTokHeap;        \/* RelToken heap *\/$/;"	m	struct:precinfo	file:
rUR	HAudio.c	78;"	d	file:
rank	esignal.h	/^    short       rank;           \/* number of dimensions *\/$/;"	m	struct:Array
rank	esignal.h	/^    short       rank;           \/* number of dimensions *\/$/;"	m	struct:FieldSpec
rawBuffer	HParm.c	/^   char *rawBuffer;   \/* buffer for external data *\/$/;"	m	struct:__anon62	file:
rawEnergy	HParm.c	/^   Boolean rawEnergy;         \/* Use raw energy before preEmp and ham *\/$/;"	m	struct:__anon62	file:
rawMITFormat	HLM.c	/^static Boolean rawMITFormat = FALSE;    \/* Don't use HTK quoting and escapes *\/$/;"	v	file:
rbuf	HAudio.c	/^   ReplayBuf rbuf;           \/* replay buffer (if needed) *\/$/;"	m	struct:_AudioIn	file:
rc	HAudio.c	/^   UMSAudioDevice_ReturnCode rc;$/;"	m	struct:_AudioIn	file:
rc	HAudio.c	/^   UMSAudioDevice_ReturnCode rc;$/;"	m	struct:_AudioOut	file:
rc	HNet.c	/^   NetNode **rc;    \/* Right contexts - linked to word end nodes *\/$/;"	m	struct:pronholder	file:
real	esignal.h	/^typedef struct {Schar	real, imag;}	ScharComplex;$/;"	m	struct:__anon5
real	esignal.h	/^typedef struct {double	real, imag;}	DoubleComplex;$/;"	m	struct:__anon1
real	esignal.h	/^typedef struct {float	real, imag;}	FloatComplex;$/;"	m	struct:__anon2
real	esignal.h	/^typedef struct {long	real, imag;}	LongComplex;$/;"	m	struct:__anon3
real	esignal.h	/^typedef struct {short	real, imag;}	ShortComplex;$/;"	m	struct:__anon4
recPort	HAudio.c	/^   ALport recPort;           \/* SGI audio port *\/$/;"	m	struct:_AudioIn	file:
recnum	esignal.h	/^    long    recnum;$/;"	m	struct:Annot
refList	HNet.h	/^   SubLatDef *refList;          \/* List of all SubLats referring to this lat *\/$/;"	m	struct:lattice
regAcc	HAdapt.c	/^   RegAcc *regAcc;       \/* accumulate information for generating transform *\/$/;"	m	struct:__anon9	file:
regTree	HModel.h	/^  RegTree regTree;     \/* the regression tree used for transform *\/$/;"	m	struct:__anon51
reltoken	HRec.c	/^typedef struct reltoken$/;"	s	file:
remDupPron	HNet.c	/^Boolean remDupPron=TRUE;$/;"	v
reorderComps	HModel.c	/^static Boolean reorderComps=FALSE;      \/* re-order mixture components (PDE) *\/$/;"	v	file:
report	HGraf.c	/^static XEvent        report;$/;"	v	file:
rgain	HAudio.c	/^   long rgain;$/;"	m	struct:_AudioIn	file:
rgain	HAudio.c	/^   long rgain;$/;"	m	struct:_AudioOut	file:
rid	HVQ.h	/^   short nid,lid,rid;   \/* used for mapping between mem and ext def *\/$/;"	m	struct:_VQNodeRec
right	HVQ.h	/^   VQNode left,right;   \/* offspring, only right is used in linTree *\/$/;"	m	struct:_VQNodeRec
rmax	HRec.c	/^static const RelToken rmax={0.0,0.0,NULL$/;"	v	file:
rnull	HRec.c	/^static const RelToken rnull={LZERO,0.0,NULL$/;"	v	file:
root	HModel.h	/^  RegNode *root;       \/* pointer to the root node of the tree *\/$/;"	m	struct:RegTree
rootW	HGraf.c	/^static Window        rootW, theWindow;                   $/;"	v	file:
rtree	HModel.h	/^  RegTree *rtree;                   \/* regression tree to be used for adaptation *\/$/;"	m	struct:_AdaptXForm
s	HParm.c	/^   Vector s;          \/* speech vector *\/$/;"	m	struct:__anon62	file:
s	HShell.h	/^   char *s;$/;"	m	union:__anon77
s	HUtil.h	/^   int s;            \/* current stream index 1..S *\/$/;"	m	struct:__anon90
sAudioIn	HAudio.c	/^static AudioIn sAudioIn=NULL;$/;"	v	file:
sAudioOut	HAudio.c	/^static AudioOut sAudioOut=NULL;$/;"	v	file:
sBuf	HRec.c	/^   TokenSet *sBuf;          \/* Buffer Array[2..N-1] of tokset for StepHMM1_N *\/$/;"	m	struct:psetinfo	file:
sCnt	HParm.c	/^   int sCnt;              \/* Number of files processed in current session *\/$/;"	m	struct:channelinfo	file:
sIdx	HModel.h	/^   int sIdx;            \/* State index *\/$/;"	m	struct:__anon47
sLeft	HNet.h	/^   Boolean sLeft;  \/* Seen left context dependency *\/$/;"	m	struct:hmmsetcxtinfo
sMagic	HAudio.c	/^static DWORD sMagic=-1;$/;"	v	file:
sPre	HRec.c	/^   PreComp *sPre;           \/* Array[1..nsp] State PreComps *\/$/;"	m	struct:psetinfo	file:
sRight	HNet.h	/^   Boolean sRight; \/* Seen right context dependency *\/$/;"	m	struct:hmmsetcxtinfo
sampFreqs	HAudio.c	/^static float sampFreqs[NUM_SAMP_FREQS] = {$/;"	v	file:
sampKind	HWave.c	/^   short sampKind;$/;"	m	struct:__anon101	file:
sampPeriod	HAudio.c	/^   HTime sampPeriod;         \/* sampling period in 100ns units *\/$/;"	m	struct:_AudioIn	file:
sampPeriod	HParm.c	/^   HTime sampPeriod;  \/* Either 0.0 or the fixed sample rate of source *\/$/;"	m	struct:hparmsrcdef	file:
sampPeriod	HSigP.h	/^   long sampPeriod;     \/* sample period *\/$/;"	m	struct:__anon80
sampPeriod	HWave.c	/^   HTime sampPeriod;    \/* Sample period in 100ns units *\/$/;"	m	struct:_Wave	file:
sampPeriod	HWave.c	/^   int32 sampPeriod;  \/* sample period in usecs *\/$/;"	m	struct:__anon96	file:
sampPeriod	HWave.c	/^   int32 sampPeriod;$/;"	m	struct:__anon101	file:
sampRate	HWave.c	/^   int32 sampRate;       \/* sample rate code *\/$/;"	m	struct:__anon97	file:
sampRate	HWave.c	/^   int32 sampRate;    \/* sample rate in Hertz *\/$/;"	m	struct:__anon96	file:
sampRate	HWave.c	/^   short sampRate;$/;"	m	struct:__anon94	file:
sampRate	HWave.c	/^   short sampRate;$/;"	m	struct:__anon95	file:
sampSize	HWave.c	/^   short sampSize;   \/* sample size in bits (16) *\/$/;"	m	struct:__anon96	file:
sampSize	HWave.c	/^   short sampSize;$/;"	m	struct:__anon100	file:
sampSize	HWave.c	/^   short sampSize;$/;"	m	struct:__anon101	file:
saveBaseClass	HModel.c	/^static Boolean saveBaseClass = FALSE;   \/* save base classes *\/ $/;"	v	file:
saveBinary	HAdapt.h	/^  Boolean saveBinary;$/;"	m	struct:__anon10
saveBinary	HModel.c	/^static Boolean saveBinary = FALSE;      \/* save HMM defs in binary *\/$/;"	v	file:
saveCompressed	HParm.c	/^   Boolean saveCompressed;    \/* If LPREFC save as IREFC else _C *\/$/;"	m	struct:__anon62	file:
saveCompressed	HParm.h	/^   Boolean saveCompressed;    \/* Save in compressed format *\/$/;"	m	struct:__anon70
saveGlobOpts	HModel.c	/^static Boolean saveGlobOpts = TRUE;     \/* save ~o with HMM defs *\/$/;"	v	file:
saveInputXForm	HModel.c	/^static Boolean saveInputXForm = TRUE;   \/* save input xforms with models set *\/$/;"	v	file:
saveRegTree	HModel.c	/^static Boolean saveRegTree = FALSE;     \/* save regression classes and tree *\/ $/;"	v	file:
saveSemiTiedBinary	HAdapt.c	/^static Boolean saveSemiTiedBinary = FALSE;$/;"	v	file:
saveSpkrModels	HAdapt.c	/^static Boolean saveSpkrModels = FALSE;$/;"	v	file:
saveWithCRC	HParm.c	/^   Boolean saveWithCRC;       \/* Append check sum on save *\/$/;"	m	struct:__anon62	file:
saveWithCRC	HParm.h	/^   Boolean saveWithCRC;       \/* Save with CRC check added *\/$/;"	m	struct:__anon70
savedCommandLine	HShell.c	/^static char *savedCommandLine;$/;"	v	file:
sbindir	Makefile	/^sbindir = ${exec_prefix}\/sbin$/;"	m
sc_lmlike	HArc.h	/^  LogFloat sc_lmlike;$/;"	m	struct:_CorrA
scale	HLM.h	/^   float scale;                 \/* Language model scale *\/$/;"	m	struct:lmodel
scale	HRec.c	/^   float scale;             \/* LM (Net probs) scale factor *\/$/;"	m	struct:precinfo	file:
scale	esignal.h	/^    double      scale, offset;  \/* scale factor and offset relating$/;"	m	struct:FieldSpec
scaledOcc	HFBLat.c	/^   float scaledOcc; \/*for MEE.*\/$/;"	m	struct:__anon22	file:
scaled_aclike	HArc.h	/^  float scaled_aclike; \/* scaled. *\/$/;"	m	struct:_CorrN
sccs	HShell.c	/^   char *sccs;$/;"	m	struct:_VersionEntry	file:
score	HLabel.h	/^   float score;             \/* primary score eg. logP *\/$/;"	m	struct:_Label
score	HNet.h	/^   double score;       \/* Field used for pruning *\/$/;"	m	struct:lnode
score	HNet.h	/^   float score;        \/* Field used for pruning\/sorting *\/$/;"	m	struct:larc
score	HRec.c	/^   double score;$/;"	m	struct:nbestentry	file:
scribeMap	HLabel.c	/^static char *scribeMap[] = {"LBB:", "LBA:", "UTS:"};$/;"	v	file:
script	HShell.c	/^static FILE *script = NULL;   \/* script file if any *\/$/;"	v	file:
scriptBuf	HShell.c	/^static char scriptBuf[256];   \/* buffer for current script arg *\/$/;"	v	file:
scriptBufLoaded	HShell.c	/^static Boolean scriptBufLoaded = FALSE;$/;"	v	file:
scriptcount	HShell.c	/^static int scriptcount = 0;   \/* num words in script *\/$/;"	v	file:
se	HLM.h	/^   SEntry *se;                  \/* Array[0..nse-1] of ngram probabilities *\/$/;"	m	struct:nentry
se	HUtil.h	/^   StateElem *se;    \/* ->current stateElem *\/$/;"	m	struct:__anon90
seIndexes	HRec.c	/^   short ***seIndexes;      \/* Array[1..ntr] of seIndexes *\/$/;"	m	struct:psetinfo	file:
se_cmp	HLM.c	/^static int se_cmp(const void *v1,const void *v2)$/;"	f	file:
seen	HShell.h	/^   Boolean seen;        \/* set true when read by any module *\/$/;"	m	struct:__anon78
segLen	HTrain.h	/^   int segLen;          \/* blkSize for each segment *\/$/;"	m	struct:_SegStoreRec
selfCalSilDet	HParm.c	/^   int selfCalSilDet;         \/* Self calibrating silence detection *\/$/;"	m	struct:__anon62	file:
semiTied	HModel.h	/^   AdaptXForm *semiTied;   \/* SemiTied transform associated with model set *\/$/;"	m	struct:_HMMSet
semiTied2InputXForm	HAdapt.c	/^static Boolean semiTied2InputXForm = FALSE;$/;"	v	file:
semiTiedFloorScale	HAdapt.c	/^static float semiTiedFloorScale = 0.1;$/;"	v	file:
semiTiedMacro	HAdapt.c	/^static char *semiTiedMacro = NULL;$/;"	v	file:
semiTiedMacro	HModel.h	/^   char *semiTiedMacro;  \/* macroname of semi-tied transform *\/$/;"	m	struct:_HMMSet
semiTiedVFloor	HAdapt.c	/^static Boolean semiTiedVFloor = TRUE;$/;"	v	file:
sentry	HLM.h	/^typedef struct sentry {         \/* HLM NGram probability *\/$/;"	s
set	HRec.c	/^   RelToken *set;            \/* Likelihood sorted array[0..nToks] of rtoks *\/$/;"	m	struct:tokenset	file:
set	HUtil.h	/^   Boolean *set;		\/* array[1..nMembers] of Boolean *\/$/;"	m	struct:__anon91
setHeap	HUtil.c	/^static MemHeap setHeap;$/;"	v	file:
sgn	HMath.c	684;"	d	file:
sharedMix	HFB.c	/^static Boolean sharedMix = FALSE; \/* true if shared mixtures *\/$/;"	v	file:
sharedstatedir	Makefile	/^sharedstatedir = ${prefix}\/com$/;"	m
showConfig	HShell.c	/^static Boolean showConfig = FALSE;       \/* show configuration params *\/$/;"	v	file:
si	HUtil.h	/^   StateInfo *si;    \/* ->current stateInfo *\/$/;"	m	struct:__anon90
sideXForm	HParm.c	/^   AdaptXForm *sideXForm;$/;"	m	struct:__anon62	file:
sideXFormExt	HParm.c	/^   char* sideXFormExt;       \/* side XForm mask *\/$/;"	m	struct:__anon62	file:
sideXFormMask	HParm.c	/^   char* sideXFormMask;       \/* side XForm mask *\/$/;"	m	struct:__anon62	file:
sig	HAudio.c	/^   int sig;                  \/* signal if any *\/$/;"	m	struct:_AudioIn	file:
sigAudio	HAudio.c	/^static AudioIn sigAudio;  \/* Globals used for signalling *\/$/;"	v	file:
sigNum	HAudio.c	/^static int sigNum=NULLSIG;$/;"	v	file:
sigpHeap	HSigP.c	/^static MemHeap sigpHeap;$/;"	v	file:
silDetCnt	HParm.c	/^   int silDetCnt;      \/* Number of silence frames in window *\/$/;"	m	struct:_ParmBuf	file:
silDiscard	HParm.c	/^   float silDiscard;          \/* Calibrate discard level *\/$/;"	m	struct:__anon62	file:
silFloor	HParm.c	/^   float silFloor;            \/* Silence floor in dBs *\/$/;"	m	struct:__anon62	file:
silGlchCount	HParm.c	/^   int silGlchCount;          \/*   of sil in spc acceptable as glitches *\/$/;"	m	struct:__anon62	file:
silId	HNet.c	/^   int silId;$/;"	m	struct:pinstinfo	file:
silMean	HParm.c	/^   float silMean;             \/* Mean silence energy (in dB) *\/$/;"	m	struct:__anon62	file:
silSeqCount	HParm.c	/^   int silSeqCount;           \/*   of silence before stopping *\/$/;"	m	struct:__anon62	file:
simpleDiffs	HParm.c	/^   Boolean simpleDiffs;       \/* Use simple differences for delta calcs *\/$/;"	m	struct:__anon62	file:
size	HAudio.c	/^   int size;              \/* Size of buffer *\/$/;"	m	struct:mmapibuf	file:
size	HAudio.c	/^   int used,size;        \/* used in data, size of data *\/$/;"	m	struct:__anon13	file:
size	HParm.c	/^   int size;          \/* Sample size fields *\/$/;"	m	struct:hparmsrcdef	file:
size	HWave.c	/^   int32 size;        \/* size of rest of chunk *\/$/;"	m	struct:__anon98	file:
size	HWave.c	/^   int32 size;$/;"	m	struct:__anon99	file:
skipend	HFB.h	/^  int skipend;$/;"	m	struct:__anon20
skipendInit	HFB.c	/^static int skipendInit   = -1;$/;"	v	file:
skipstart	HFB.h	/^  int skipstart;      \/* Skipover region - debugging only *\/$/;"	m	struct:__anon20
skipstartInit	HFB.c	/^static int skipstartInit = -1;$/;"	v	file:
slaHeap	HLat.c	/^static MemHeap slaHeap, slnHeap;\/* MHEAPs for use in LatExpand() *\/$/;"	v	file:
slat	HNet.c	/^static Lattice *slat;   \/* Used by qsort cmp routines *\/$/;"	v	file:
slnHeap	HLat.c	/^static MemHeap slaHeap, slnHeap;\/* MHEAPs for use in LatExpand() *\/$/;"	v	file:
socket	HAudio.c	/^   int socket;$/;"	m	struct:_AudioIn	file:
socket	HAudio.c	/^   int socket;$/;"	m	struct:_AudioOut	file:
source	HLM.c	/^static Source source;           \/* input file *\/$/;"	v	file:
source	HLat.c	/^   Source source;$/;"	m	struct:_LLFInfo	file:
source	HUtil.c	/^static Source *source;         \/* Current source for item list *\/$/;"	v	file:
spDetCnt	HParm.c	/^   int spDetCnt;       \/* Number of speech frames in window *\/$/;"	m	struct:_ParmBuf	file:
spDetCur	HParm.c	/^   int spDetCur;       \/* Current speech detector frame *\/$/;"	m	struct:_ParmBuf	file:
spDetEn	HParm.c	/^   int spDetEn;        \/* row after last to return (MAX_INT == waiting) *\/$/;"	m	struct:_ParmBuf	file:
spDetEn	HParm.h	/^   int spDetEn;               \/* Frame number of last frame of buffer *\/$/;"	m	struct:__anon70
spDetFin	HParm.c	/^   int spDetFin;       \/* final row allowed to return (normally qen) *\/$/;"	m	struct:_ParmBuf	file:
spDetLst	HParm.c	/^   int spDetLst;       \/* Last frame of speech seen *\/$/;"	m	struct:_ParmBuf	file:
spDetParmsSet	HParm.c	/^   Boolean spDetParmsSet; \/* Speech detector parameters set *\/$/;"	m	struct:channelinfo	file:
spDetParmsSet	HParm.h	/^   Boolean spDetParmsSet;     \/* Parameters set for sp\/sil detector *\/$/;"	m	struct:__anon70
spDetSNR	HParm.c	/^   float spDetSNR;        \/* Measured\/set silence\/speech ratio (dB) *\/$/;"	m	struct:channelinfo	file:
spDetSNR	HParm.h	/^   float spDetSNR;            \/* Speech\/noise ratio for channel *\/$/;"	m	struct:__anon70
spDetSil	HParm.c	/^   float spDetSil;        \/* Measured\/set silence level for channel (dB) *\/$/;"	m	struct:channelinfo	file:
spDetSil	HParm.h	/^   float spDetSil;            \/* Silence level for channel *\/$/;"	m	struct:__anon70
spDetSp	HParm.c	/^   float spDetSp;         \/* Measured\/set speech level for channel (dB) *\/$/;"	m	struct:channelinfo	file:
spDetSp	HParm.h	/^   float spDetSp;             \/* Speech level for channel *\/$/;"	m	struct:__anon70
spDetSt	HParm.c	/^   int spDetSt;        \/* first row to return (MAX_INT == waiting) *\/$/;"	m	struct:_ParmBuf	file:
spDetSt	HParm.h	/^   int spDetSt;               \/* Frame number of first frame of buffer *\/$/;"	m	struct:__anon70
spDetThresh	HParm.c	/^   float spDetThresh;     \/* Measured\/set speech\/silence threshold (dB) *\/$/;"	m	struct:channelinfo	file:
spDetThresh	HParm.h	/^   float spDetThresh;         \/* Silence\/speech level threshold *\/$/;"	m	struct:__anon70
spSum	HAdapt.c	/^   Vector spSum;$/;"	m	struct:__anon8	file:
spSumSq	HAdapt.c	/^   Vector spSumSq;$/;"	m	struct:__anon8	file:
spThresh	HParm.c	/^   float spThresh;            \/* Speech Threshold (in dB above sil level) *\/$/;"	m	struct:__anon62	file:
spVal	HParm.c	/^   float *spVal;       \/* Array of speech\/silence levels *\/$/;"	m	struct:_ParmBuf	file:
spcGlchCount	HParm.c	/^   int spcGlchCount;          \/*   of spc in sil acceptable as glitches *\/$/;"	m	struct:__anon62	file:
spcSeqCount	HParm.c	/^   int spcSeqCount;           \/* Number of frames for speech window *\/$/;"	m	struct:__anon62	file:
spdf	HModel.h	/^   MixtureVector spdf;  \/* Mixture Vector *\/$/;"	m	struct:__anon46
speakerOut	HAudio.c	/^static Boolean speakerOut = FALSE;$/;"	v	file:
specialNull	HNet.c	/^static DictEntry specialNull;$/;"	v	file:
src	HParm.c	/^   Source src;        \/* Source to read HParm file from *\/$/;"	m	struct:__anon62	file:
srcFF	HParm.c	/^   FileFormat srcFF;          \/* Source File format *\/ $/;"	m	struct:__anon62	file:
srcFF	HParm.h	/^   FileFormat srcFF;          \/* Source File format *\/ $/;"	m	struct:__anon70
srcPK	HParm.c	/^   ParmKind srcPK;            \/* Source ParmKind *\/ $/;"	m	struct:__anon62	file:
srcPK	HParm.h	/^   ParmKind srcPK;            \/* Source ParmKind *\/ $/;"	m	struct:__anon70
srcSampRate	HParm.c	/^   HTime srcSampRate;         \/* Source Sample Rate *\/ $/;"	m	struct:__anon62	file:
srcSampRate	HParm.h	/^   HTime srcSampRate;         \/* Source Sample Rate *\/ $/;"	m	struct:__anon70
srcUsed	HParm.c	/^   int srcUsed;       \/* num columns which was used in source *\/$/;"	m	struct:__anon62	file:
srcVecSize	HParm.h	/^   int srcVecSize;            \/* Size of source vector *\/$/;"	m	struct:__anon70
srcdir	Makefile	/^srcdir = .$/;"	m
stHeap	HRec.c	/^   MemHeap *stHeap;         \/* Array[0..stHeapNum-1] of heaps for states *\/$/;"	m	struct:precinfo	file:
stHeapIdx	HRec.c	/^   short *stHeapIdx;        \/* Array[1..max] of state to heap index *\/$/;"	m	struct:psetinfo	file:
stHeapNum	HRec.c	/^   short stHeapNum;         \/* Number of separate state heaps *\/$/;"	m	struct:psetinfo	file:
stRow	HParm.c	/^   int stRow;        \/* absolute number of first row in this block *\/$/;"	m	struct:pblock	file:
start	HArc.h	/^  CorrN *start;$/;"	m	struct:_CorrA
start	HArc.h	/^  HArc *start; \/*The beginning and end of a dll of arcs.*\/$/;"	m	struct:ArcInfoStruct
start	HArc.h	/^  HArc *start;$/;"	m	struct:_ArcTrans
start	HFBLat.c	/^   int start;$/;"	m	struct:__anon21	file:
start	HLabel.h	/^   HTime start,end;         \/* Start and end times in 100ns units *\/$/;"	m	struct:_Label
start	HNet.h	/^   NodeId start;       \/* Node at start of word *\/$/;"	m	struct:larc
start	HNet.h	/^   NodeId start;       \/* Node at start of word *\/$/;"	m	struct:larc_e
start	HNet.h	/^   NodeId start;$/;"	m	struct:larc_s
startLMWord	HLat.c	/^static LabId startLMWord;       \/* word at start in LM (<s>) *\/$/;"	v	file:
startWord	HLat.c	/^static LabId startWord;         \/* word at start of Lattice (!SENT_START) *\/$/;"	v	file:
start_foll	HArc.h	/^  ArcTrans *start_foll; \/*The transition is in a dll w.r.t both the arcs it follows and the ones it precedes.*\/$/;"	m	struct:_ArcTrans
start_foll	HArc.h	/^  CorrA *start_foll;$/;"	m	struct:_CorrA
start_inst	HRec.c	/^   NetInst *start_inst;     \/* Inst that started a move *\/$/;"	m	struct:precinfo	file:
start_prec	HArc.h	/^  ArcTrans *start_prec; \/*the start_{foll,prec} dll is the list of the transitions attached to the same start node; *\/$/;"	m	struct:_ArcTrans
starti	HArc.h	/^  int starti;  \/* start & end of search beam. *\/$/;"	m	struct:_CorrN
starts	HNet.c	/^   NetNode *starts; \/* Chain of initial models *\/$/;"	m	struct:pronholder	file:
state	HNet.h	/^   int state;         \/* State number (-1==model_end) *\/$/;"	m	struct:lalign
state	HRec.c	/^   TokenSet *state;     \/* TokenSet[0..N-2] in state [1..N-1] for hmm *\/$/;"	m	struct:_NetInst	file:
state	HRec.c	/^   short state;         \/* State level traceback info *\/$/;"	m	struct:align	file:
stateCounter	HModel.h	/^   int stateCounter;    \/* # of state occurrences *\/$/;"	m	struct:__anon47
states	HRec.c	/^   Boolean states;          \/* Keep track of state history *\/$/;"	m	struct:precinfo	file:
staticSemiTied	HAdapt.c	/^static Boolean staticSemiTied = FALSE;$/;"	v	file:
status	HAudio.c	/^   AudioInStatus status;     \/* current status of this audio stream *\/$/;"	m	struct:_AudioIn	file:
status	HParm.c	/^   PBStatus status;    \/* status of this buffer *\/$/;"	m	struct:_ParmBuf	file:
ste	HUtil.h	/^   StreamElem *ste;  \/* ->current streamElem *\/$/;"	m	struct:__anon90
stindex	HShell.c	/^   long stindex;                        \/* start sample to extract *\/$/;"	m	struct:__anon71	file:
stopSignalled	HAudio.c	/^static volatile Boolean stopSignalled;$/;"	v	file:
storeMInfo	HAdapt.c	/^static Boolean storeMInfo = TRUE;      \/* whether original model information  is to be stored *\/$/;"	v	file:
str	HGraf.h	/^   char *str;                 \/* string in button *\/$/;"	m	struct:_HButton
stream	HAudio.c	/^   SStream stream;$/;"	m	struct:_AudioIn	file:
stream	HAudio.c	/^   SStream stream;$/;"	m	struct:_AudioOut	file:
stream	HModel.h	/^   int stream;          \/* enables multi-stream semi-tied transforms *\/$/;"	m	struct:__anon41
stripTriPhones	HLabel.c	/^static Boolean stripTriPhones = FALSE;   \/* Enable triPhone stripping *\/$/;"	v	file:
strlen_LEVELSEP	HLabel.c	581;"	d	file:
strmProj	HTrain.c	/^Boolean strmProj = FALSE; $/;"	v
structure	HModel.h	/^   Ptr structure;          \/* -> shared structure or HMM Def *\/$/;"	m	struct:_MacroDef
style	HParm.c	/^   CodeStyle style;   \/* style encoding *\/$/;"	m	struct:__anon62	file:
subLatEnd	HNet.c	/^char *subLatEnd="!)_SUBLAT",subLatEndBuf[MAXSTRLEN];$/;"	v
subLatEndBuf	HNet.c	/^char *subLatEnd="!)_SUBLAT",subLatEndBuf[MAXSTRLEN];$/;"	v
subLatId	HNet.h	/^   LabId subLatId;              \/* Lattice Identifier (for SubLats only) *\/$/;"	m	struct:lattice
subLatStart	HNet.c	/^char *subLatStart="!SUBLAT_(",subLatStartBuf[MAXSTRLEN];$/;"	v
subLatStartBuf	HNet.c	/^char *subLatStart="!SUBLAT_(",subLatStartBuf[MAXSTRLEN];$/;"	v
subLatWord	HDict.h	/^   Word subLatWord;     \/* special word for HNet subLats *\/$/;"	m	struct:__anon15
subList	HNet.h	/^   SubLatDef *subList;          \/* List of sublats in this lattice level *\/$/;"	m	struct:lattice
subdir	HLabel.h	/^   char *subdir;     \/* Sub-directory to search for MLF_SIMPLE & MLF_FULL *\/$/;"	m	union:__anon29
subfields	esignal.h	/^    FieldList   subfields;      \/* field specs of subfields *\/$/;"	m	struct:FieldSpec
sublat	HNet.h	/^   SubLatDef *sublat;  \/* SubLat for node (if word==lat->voc->subLatWord) *\/$/;"	m	struct:lnode
sublatdef	HNet.h	/^typedef struct sublatdef {$/;"	s
sublatmarkers	HNet.c	/^Boolean sublatmarkers=FALSE;$/;"	v
succ	HLabel.h	/^   LLink succ;              \/* Successor label *\/$/;"	m	struct:_Label
svec	HModel.h	/^   StateElem *svec;        \/* array[2..numStates-1] of StateElem *\/  $/;"	m	struct:__anon49
sw	HAudio.c	/^   long sw;$/;"	m	struct:_AudioIn	file:
sw	HAudio.c	/^   long sw;$/;"	m	struct:_AudioOut	file:
swapXForm	HModel.h	/^  struct _AdaptXForm  *swapXForm;    \/* has this transform been swapped with parent *\/$/;"	m	struct:_AdaptXForm	typeref:struct:_AdaptXForm::_AdaptXForm
swapXForms	HAdapt.c	/^static Boolean swapXForms = FALSE;     \/* swap the transforms around after generating transform *\/$/;"	v	file:
swidth	HModel.h	/^   short swidth[SMAX];     \/* [0]=num streams,[i]=width of stream i *\/$/;"	m	struct:_HMMSet
swidth	HModel.h	/^  IntVec swidth;       \/* stream width size *\/$/;"	m	struct:__anon50
swidth	HParm.h	/^   short swidth[SMAX];   \/* [0]=num streams,[i]=width of stream i *\/$/;"	m	struct:__anon68
swidth	HVQ.h	/^   short swidth[SMAX];  \/* sw[0]=num streams, sw[i]=width of stream i *\/$/;"	m	struct:_VQTabRec
sym	HModel.c	/^   Symbol sym;          \/* the current input symbol *\/$/;"	m	struct:__anon40	file:
sym	HModel.c	/^   Symbol sym; } symMap[] = $/;"	m	struct:__anon39	file:
symMap	HModel.c	/^   Symbol sym; } symMap[] = $/;"	v	typeref:struct:__anon39	file:
symNames	HModel.c	/^static char *symNames[NULLSYM+1];$/;"	v	file:
sysconfdir	Makefile	/^sysconfdir = ${prefix}\/etc$/;"	m
t	HArc.c	/^   struct _ArcList *t;$/;"	m	struct:_ArcList	typeref:struct:_ArcList::_ArcList	file:
t	HFBLat.c	/^   struct _CorrectArcList *t;$/;"	m	struct:_CorrectArcList	typeref:struct:_CorrectArcList::_CorrectArcList	file:
t	HNet.c	/^   int t;$/;"	m	struct:pinstinfo	file:
tBuf	HRec.c	/^   Token *tBuf;             \/* Buffer Array[2..N-1] of tok for StepHMM1 *\/$/;"	m	struct:psetinfo	file:
tIdx	HModel.h	/^   int tIdx;               \/* Transition matrix index *\/$/;"	m	struct:__anon49
t_end	HArc.h	/^  int t_end;$/;"	m	struct:_Arc
t_end	HArc.h	/^  int t_start, t_end;$/;"	m	struct:_Acoustic
t_start	HArc.h	/^  int t_start, t_end;$/;"	m	struct:_Acoustic
t_start	HArc.h	/^  int t_start;$/;"	m	struct:_Arc
tabFN	HVQ.h	/^   char * tabFN;        \/* name of this VQ table *\/$/;"	m	struct:_VQTabRec
tact	HRec.c	/^   int tact;                \/* Cummulative number of active instances *\/$/;"	m	struct:precinfo	file:
tag	HNet.h	/^   char    *tag;        \/* Semantic tagging information *\/$/;"	m	struct:_NetNode
tag	HNet.h	/^   char *tag;          \/* Semantic tag for this node *\/$/;"	m	struct:lnode
tail	HLabel.h	/^   LLink tail;              \/* Pointer to tail of List *\/$/;"	m	struct:_LabList
tail	HLabel.h	/^   LabList *tail;          \/* Pointer to tail of Label List *\/$/;"	m	struct:__anon27
tail	HRec.c	/^   NetInst tail;            \/* Tail (newest) of Inst linked list *\/$/;"	m	struct:precinfo	file:
takeLogs	HSigP.h	/^   Boolean takeLogs;    \/* log filterbank channels *\/$/;"	m	struct:__anon80
target	Makefile	/^target = HTKLib.a$/;"	m
tee	HNet.c	/^   Boolean tee;     \/* TRUE if word consists solely of tee models *\/$/;"	m	struct:pronholder	file:
teeWords	HNet.h	/^   Boolean teeWords;  \/* True if any tee words are present *\/$/;"	m	struct:__anon60
tempArcStack	HArc.c	/^static MemHeap tempArcStack;                  \/* for temporary structures. *\/$/;"	v	file:
tempStack	HFBLat.h	/^  MemHeap tempStack;$/;"	m	struct:__anon23
tgtFF	HParm.c	/^   FileFormat tgtFF;          \/* Target File format *\/ $/;"	m	struct:__anon62	file:
tgtFF	HParm.h	/^   FileFormat tgtFF;          \/* Target File format *\/ $/;"	m	struct:__anon70
tgtPK	HParm.c	/^   ParmKind tgtPK;            \/* Target ParmKind *\/ $/;"	m	struct:__anon62	file:
tgtPK	HParm.h	/^   ParmKind tgtPK;            \/* Target ParmKind *\/ $/;"	m	struct:__anon70
tgtSampRate	HParm.c	/^   HTime tgtSampRate;         \/* Target Sample Rate *\/ $/;"	m	struct:__anon62	file:
tgtSampRate	HParm.h	/^   HTime tgtSampRate;         \/* Target Sample Rate *\/ $/;"	m	struct:__anon70
tgtUsed	HParm.c	/^   int tgtUsed;       \/* num columns which will be used once converted *\/$/;"	m	struct:__anon62	file:
tgtVecSize	HParm.h	/^   int tgtVecSize;            \/* Size of target vector *\/$/;"	m	struct:__anon70
theBitmap	HGraf_WIN32.c	/^static HBITMAP  theBitmap;        \/* Internal representation of window contents *\/$/;"	v	file:
theBrush	HGraf_WIN32.c	/^static HBRUSH theBrush = NULL;      \/* Used to fill solid areas *\/$/;"	v	file:
theCmap	HGraf.c	/^static Colormap      theCmap;$/;"	v	file:
theDisp	HGraf.c	/^static Display       *theDisp;                           $/;"	v	file:
theFont	HGraf_WIN32.c	/^static HFONT theFont   = NULL;      \/* Current font for text output *\/$/;"	v	file:
theGC	HGraf.c	/^static GC            theGC;$/;"	v	file:
thePen	HGraf_WIN32.c	/^static HPEN thePen     = NULL;      \/* Used to draw lines *\/$/;"	v	file:
theScreen	HGraf.c	/^static int           theScreen;                          $/;"	v	file:
theVisual	HGraf.c	/^static Visual        *theVisual;$/;"	v	file:
theWindow	HGraf.c	/^static Window        rootW, theWindow;                   $/;"	v	file:
theWindow	HGraf_WIN32.c	/^static HWND theWindow = NULL;     \/* A handle to the graphics window *\/$/;"	v	file:
thinPen	HGraf_WIN32.c	/^static HPEN thinPen    = NULL;      \/* Always has width 1, needed for outlining filled shapes *\/$/;"	v	file:
thirdWin	HParm.c	/^   int thirdWin;              \/* Accel window halfsize *\/$/;"	m	struct:__anon62	file:
thresh	HModel.h	/^  float thresh;        \/* split threshold to determine stopping in tree *\/$/;"	m	struct:RegTree
tid	HAudio.c	/^   ATransID tid;$/;"	m	struct:_AudioIn	file:
tid	HAudio.c	/^   ATransID tid;$/;"	m	struct:_AudioOut	file:
time	HAdapt.c	/^   int time;$/;"	m	struct:_ObsCache	file:
time	HNet.h	/^   HTime time;         \/* Time of word boundary at node *\/$/;"	m	struct:lnode
time	HTrain.h	/^   int   time;       \/* time for which prob is valid *\/$/;"	m	struct:__anon85
time	HTrain.h	/^   int   time;       \/* time for which prob is valid *\/$/;"	m	struct:__anon88
timerDone	HGraf.c	/^static Boolean timerDone;$/;"	v	file:
tl	HTrain.h	/^   IBLink tl;        \/* tail of list of item blocks *\/$/;"	m	struct:__anon81
tmBeam	HRec.h	/^   LogFloat tmBeam;         \/* Beam width for tied mixtures *\/$/;"	m	struct:vrecinfo
tmRecs	HModel.h	/^   TMixRec tmRecs[SMAX];   \/* array[1..S]of tied mixture record *\/$/;"	m	struct:_HMMSet
toggle	HGraf.h	/^   Boolean toggle;            \/* if true, clicking toggles state *\/$/;"	m	struct:_HButton
tok	HRec.c	/^   Token tok;                \/* Most likely Token in state *\/$/;"	m	struct:tokenset	file:
token	HRec.h	/^typedef struct token$/;"	s
tokenset	HRec.c	/^typedef struct tokenset$/;"	s	file:
topM	HModel.h	/^   short topM;           \/* num TMProbs actually used *\/$/;"	m	struct:__anon45
top_srcdir	Makefile	/^top_srcdir = ..$/;"	m
totAlloc	HMem.h	/^   size_t totAlloc;     \/*  total #elems alloc'ed    total #bytes alloc'd *\/$/;"	m	struct:__anon37
totUsed	HMem.h	/^   size_t totUsed;      \/*  total #elems used        total #bytes used    *\/$/;"	m	struct:__anon37
total	HAudio.c	/^   int total;               \/* Total number of samples queued *\/$/;"	m	struct:_AudioIn	file:
total	HAudio.c	/^   int total;               \/* Total number of samples queued *\/$/;"	m	struct:_AudioOut	file:
tpdf	HModel.h	/^   Vector tpdf;          \/* TIEDHS *\/$/;"	m	union:__anon43
tr	HFB.h	/^  Transcription *tr;  \/* current transcription *\/$/;"	m	struct:__anon17
trC	HTrain.c	/^static int muC,vaC,trC,wtC,prC;$/;"	v	file:
trNum	HLabel.c	/^static double trNum;$/;"	v	file:
trStr	HLabel.c	/^static char trStr[256];$/;"	v	file:
trSym	HLabel.c	/^static TrSymbol trSym = TRNULL;$/;"	v	file:
trace	HAdapt.c	/^static int trace = 0;                   \/* trace info *\/$/;"	v	file:
trace	HArc.c	/^static int trace=1;$/;"	v	file:
trace	HAudio.c	/^static int trace = 0;$/;"	v	file:
trace	HDict.c	/^static int trace=0;$/;"	v	file:
trace	HFB.c	/^static int trace         =  0;$/;"	v	file:
trace	HFBLat.c	/^static int trace     =  1;            \/* Trace level *\/$/;"	v	file:
trace	HGraf.c	/^static int trace = 0;                   \/* Just for consistency *\/$/;"	v	file:
trace	HGraf.null.c	/^static int trace = 0;                   \/* Just for consistency *\/$/;"	v	file:
trace	HGraf_WIN32.c	/^static int trace = 0;                   \/* Just for consistency *\/$/;"	v	file:
trace	HLM.c	/^static int trace=0;$/;"	v	file:
trace	HLabel.c	/^static int trace = 0;$/;"	v	file:
trace	HLat.c	/^static int trace=0;$/;"	v	file:
trace	HMap.c	/^static int trace     = 0;        \/* Trace level *\/$/;"	v	file:
trace	HMath.c	/^static int trace = 0;$/;"	v	file:
trace	HMem.c	/^static int trace = 0;$/;"	v	file:
trace	HModel.c	/^static int trace = 0;$/;"	v	file:
trace	HNet.c	/^static int trace=0;$/;"	v	file:
trace	HParm.c	/^static int trace = 0;$/;"	v	file:
trace	HRec.c	/^static int trace=0;$/;"	v	file:
trace	HShell.c	/^static int trace = 0;$/;"	v	file:
trace	HSigP.c	/^static int trace = 0;$/;"	v	file:
trace	HTrain.c	/^static int trace = 0;$/;"	v	file:
trace	HUtil.c	/^static int trace = 0;$/;"	v	file:
trace	HVQ.c	/^static int trace = 0;$/;"	v	file:
trace	HWave.c	/^static int trace = 0;$/;"	v	file:
tran	HTrain.h	/^   Matrix tran;      \/* array[1..N][1..N]of transition count *\/$/;"	m	struct:__anon84
transAlt	HLabel.c	/^static int transAlt = 0;           \/* if >0 filter all but specified alt *\/$/;"	v	file:
transLev	HLabel.c	/^static int transLev = 0;           \/* if >0 filter all but specified level *\/$/;"	v	file:
transP	HModel.h	/^   SMatrix transP;         \/* transition matrix (logs) *\/$/;"	m	struct:__anon49
transStack	HFB.h	/^  MemHeap transStack; \/* utterance transcript information heap *\/$/;"	m	struct:__anon17
translm	HExactMPE.c	83;"	d	file:
translm	HFBLat.c	145;"	d	file:
tree	HVQ.h	/^   VQNode tree[SMAX];   \/* 1 tree per stream *\/$/;"	m	struct:_VQTabRec
tscale	HNet.h	/^   float tscale;                \/* time scale factor (default: 1, i.e. seconds) *\/$/;"	m	struct:lattice
twoDataFiles	HFB.h	/^  Boolean twoDataFiles; \/* Using two data files *\/$/;"	m	struct:__anon17
twoDataFiles	HFBLat.h	/^  Boolean twoDataFiles;$/;"	m	struct:__anon23
twoModels	HFB.h	/^  Boolean twoModels;  \/* Enable two model reestimation *\/$/;"	m	struct:__anon20
type	HLM.h	/^   LMType type;                 \/* LM type *\/$/;"	m	struct:lmodel
type	HLabel.h	/^   MLFDefType type;     \/* type of this definition *\/$/;"	m	struct:_MLFEntry
type	HMem.h	/^   HeapType type;       \/*              type of this heap                 *\/$/;"	m	struct:__anon37
type	HModel.h	/^   char type;              \/* type of macro [hluvixdtmps*] *\/$/;"	m	struct:_MacroDef
type	HNet.h	/^   NetNodeType type;    \/* Type of this node (includes context) *\/$/;"	m	struct:_NetNode
type	HVQ.h	/^   TreeType type;       \/* linear or binary *\/$/;"	m	struct:_VQTabRec
type	esignal.h	/^    short       type;           \/* data type code *\/$/;"	m	struct:Array
type	esignal.h	/^    short       type;           \/* data type code *\/$/;"	m	struct:FieldSpec
uFlags	HFB.h	/^  UPDSet uFlags;      \/* parameter update flags *\/$/;"	m	struct:__anon20
uFlags	HFBLat.h	/^  UPDSet uFlags;$/;"	m	struct:__anon23
unigrams	HLM.h	/^   Vector unigrams;             \/* Unigram probabilities *\/$/;"	m	struct:ngramlm
units	esignal.h	/^    char        *units;         \/* string giving physical units *\/$/;"	m	struct:FieldSpec
unqPK	HParm.c	/^   ParmKind unqPK;    \/* Used to track conversion from srcPK to tgtPK *\/$/;"	m	struct:__anon62	file:
up_dataStack	HFBLat.h	/^  MemHeap up_dataStack;$/;"	m	struct:__anon23
up_hset	HFB.h	/^  HMMSet *up_hset;    \/* set of HMMs to be re-estimated *\/$/;"	m	struct:__anon20
up_info	HFBLat.h	/^  BufferInfo up_info;             \/* info from buffer on second data file *\/$/;"	m	struct:__anon23
up_ot	HFBLat.h	/^  Observation up_ot;$/;"	m	struct:__anon23
up_pbuf	HFBLat.h	/^  ParmBuf up_pbuf;$/;"	m	struct:__anon23
up_qList	HFB.h	/^  HLink *up_qList;    \/* array[1..Q] of active HMM defs *\/$/;"	m	struct:__anon19
usage	HNet.h	/^   int usage;               \/* Number of references to this SubLat *\/$/;"	m	struct:sublatdef
usage	HRec.c	/^   int usage;           \/* Times struct ref'd (by align or path) *\/$/;"	m	struct:align	file:
usage	HRec.h	/^   int usage;           \/* Times struct ref'd (by next path) *\/$/;"	m	struct:path
useBias	HAdapt.c	/^static Boolean useBias = TRUE;         \/* whether a bias is to be estimated for the xform *\/$/;"	v	file:
useHam	HParm.c	/^   Boolean useHam;            \/* Use Hamming Window *\/$/;"	m	struct:__anon62	file:
useInXForm	HAdapt.h	/^  Boolean useInXForm;$/;"	m	struct:__anon10
useOutXForm	HAdapt.h	/^  Boolean useOutXForm;$/;"	m	struct:__anon10
usePaXForm	HAdapt.h	/^  Boolean usePaXForm;$/;"	m	struct:__anon10
usePower	HParm.c	/^   Boolean usePower;          \/* Use power instead of Magnitude *\/$/;"	m	struct:__anon62	file:
usePower	HSigP.h	/^   Boolean usePower;    \/* use power rather than magnitude *\/$/;"	m	struct:__anon80
useSilDet	HParm.c	/^   Boolean useSilDet;         \/* Use Silence Detector *\/$/;"	m	struct:__anon62	file:
useSilDet	HParm.h	/^   Boolean useSilDet;         \/* Use Silence Detector *\/$/;"	m	struct:__anon70
used	HAudio.c	/^   int used,size;        \/* used in data, size of data *\/$/;"	m	struct:__anon13	file:
used	HMem.h	/^   ByteP used;          \/* alloc map, 1 bit\/elem         not used         *\/$/;"	m	struct:_Block
used	HRec.c	/^   Boolean used;        \/* Reference to struct by current inst *\/$/;"	m	struct:align	file:
used	HRec.h	/^   Boolean used;        \/* Reference to struct by current inst *\/$/;"	m	struct:path
used	HTrain.h	/^   int used;         \/* num items in this block *\/$/;"	m	struct:_ItemBlock
user	HLM.h	/^   void *user;                  \/* Accumulator or cache storage *\/$/;"	m	struct:nentry
user	HShell.h	/^   char *user;          \/* name of module\/tool to use this param *\/$/;"	m	struct:__anon78
utterance	HNet.h	/^   char *utterance;		\/* Utterance file name (NULL==unknown) *\/$/;"	m	struct:lattice
v	HNet.h	/^   short v;            \/* Pronunciation variant number *\/$/;"	m	struct:lnode
v1Compat	HParm.c	/^   Boolean v1Compat;          \/* V1 compatibility mode *\/$/;"	m	struct:__anon62	file:
vCtr	HTrain.h	/^   Vector vCtr;    \/* cluster centre vector *\/$/;"	m	struct:__anon82
vFloor	HMap.c	/^static Vector vFloor[SMAX]; \/* variance floor - default is all zero *\/$/;"	v	file:
vFloor	HModel.h	/^   SVector vFloor;      \/* enables flooring for multiple semi-tied transforms *\/$/;"	m	struct:__anon41
vFloor	HModel.h	/^  SVector vFloor;      \/* used for SEMIT variance flooring *\/$/;"	m	struct:__anon53
vInfoHd	HShell.c	/^static VersionEntry *vInfoHd = NULL;  \/* head of version info list *\/$/;"	v	file:
vInfoTl	HShell.c	/^static VersionEntry *vInfoTl = NULL;  \/* tail of version info list *\/$/;"	v	file:
vSize	HTrain.c	/^static int vSize;       \/* size of vectors *\/$/;"	v	file:
vTmp	HTrain.c	/^static Vector vTmp;     \/* temp vector *\/$/;"	v	file:
v_peak	HAudio.c	/^   v_peak=1,$/;"	e	enum:__anon11	file:
v_rms	HAudio.c	/^   v_rms$/;"	e	enum:__anon11	file:
vaC	HTrain.c	/^static int muC,vaC,trC,wtC,prC;$/;"	v	file:
val	HShell.h	/^   ConfVal val;         \/* value *\/$/;"	m	struct:__anon78
valid	HModel.h	/^  Boolean valid;       \/* is it valid to generate a transform at the root node *\/$/;"	m	struct:RegTree
var	HMath.h	/^   SVector var;         \/* if DIAGC or INVDIAGC *\/$/;"	m	union:__anon35
varScale	HParm.c	/^   Vector varScale;   \/* var scaling vector  *\/$/;"	m	struct:__anon62	file:
varScale	HParm.c	/^static float varScale[100];$/;"	v	file:
varScaleDN	HParm.c	/^   char* varScaleDN ;         \/* dir to find variance estimate files *\/$/;"	m	struct:__anon62	file:
varScaleDim	HParm.c	/^static int varScaleDim=0;$/;"	v	file:
varScaleFN	HParm.c	/^   char *varScaleFN;          \/* var scale file name *\/          $/;"	m	struct:__anon62	file:
varScaleFN	HParm.c	/^static char varScaleFN[MAXFNAMELEN] = "\\0";$/;"	v	file:
varScaleMask	HParm.c	/^   char* varScaleMask;        \/* variance estimate file selection mask *\/$/;"	m	struct:__anon62	file:
varScalePathMask	HParm.c	/^   char* varScalePathMask;    \/* variance estimate file path selection mask *\/$/;"	m	struct:__anon62	file:
varScaleVector	HParm.c	/^   Vector varScaleVector; \/* vector loaded from varscale dir *\/$/;"	m	struct:__anon62	file:
vaxOrder	HShell.c	/^Boolean vaxOrder = FALSE;$/;"	v
vecSize	HModel.h	/^   short vecSize;          \/* dimension of observation vectors *\/$/;"	m	struct:_HMMSet
vecSize	HModel.h	/^  int vecSize;         \/* must be matched to a stream width! *\/$/;"	m	struct:__anon53
ver	HShell.c	/^   char *ver;$/;"	m	struct:_VersionEntry	file:
version	HWave.c	/^   short version;$/;"	m	struct:__anon94	file:
version	HWave.c	/^   short version;$/;"	m	struct:__anon95	file:
voc	HNet.h	/^   Vocab *voc;                  \/* Dictionary lattice based on *\/$/;"	m	struct:lattice
vocSize	HLM.h	/^   int vocSize;                 \/* Core LM size *\/$/;"	m	struct:ngramlm
vocab	HNet.h	/^   Vocab *vocab;      \/* Dictionary from which words appear *\/$/;"	m	struct:__anon60
vocab	HNet.h	/^   char *vocab;			\/* Dictionary file name (NULL==unknown) *\/$/;"	m	struct:lattice
vol	HAudio.c	/^   float vol;                \/* current volume *\/$/;"	m	struct:_AudioOut	file:
volType	HAudio.c	/^static VolType volType = v_peak;$/;"	v	file:
vq	HParm.h	/^   short vq[SMAX];       \/* array[1..swidth[0]] of VQ index *\/$/;"	m	struct:__anon68
vqHeap	HVQ.c	/^static MemHeap vqHeap;     \/* MSTAK for allocating VQTables *\/$/;"	v	file:
vqList	HVQ.c	/^static VQTable vqList = NULL;$/;"	v	file:
vqSegs	HTrain.h	/^   Sequence vqSegs;     \/* each seg is a sequence of vq[SMAX] *\/$/;"	m	struct:_SegStoreRec
vqTab	HParm.c	/^   VQTable vqTab;             \/* VQ table *\/$/;"	m	struct:__anon62	file:
vqTabFN	HParm.c	/^   char *vqTabFN;             \/* Name of VQ Table Defn File *\/$/;"	m	struct:__anon62	file:
vqTabFN	HParm.h	/^   char *vqTabFN;             \/* Name of VQ Table Defn File *\/$/;"	m	struct:__anon70
vqidx	HVQ.h	/^   short vqidx;         \/* vq index of this node *\/$/;"	m	struct:_VQNodeRec
vrecinfo	HRec.h	/^struct vrecinfo$/;"	s
vsize	HModel.h	/^  int vsize;                \/* vector size associated with the baseclasses of this node *\/$/;"	m	struct:_RegNode
w	HGraf.h	/^   int x, y, w, h;            \/* size of button rectangle *\/$/;"	m	struct:_HButton
w	HParm.c	/^      Wave w;           \/* the waveform file *\/$/;"	m	union:_ParmBuf::__anon64	file:
w	HParm.h	/^   Wave w;                    \/* the wave input - if any *\/$/;"	m	struct:__anon70
waitForSigH	HAudio.c	/^static volatile Boolean waitForSigH;$/;"	v	file:
warpFreq	HParm.c	/^   float warpFreq;            \/* Warp freq axis for vocal tract normalisation *\/$/;"	m	struct:__anon62	file:
warpLowerCutOff	HParm.c	/^   float warpLowerCutOff;     \/* lower and upper threshold frequencies *\/$/;"	m	struct:__anon62	file:
warpUpperCutOff	HParm.c	/^   float warpUpperCutOff;     \/*   for linear frequency warping *\/  $/;"	m	struct:__anon62	file:
wasNewline	HShell.h	/^   Boolean wasNewline;  \/* true if SkipWhiteSpace went over newline *\/$/;"	m	struct:__anon75
wasQuoted	HShell.c	/^static Boolean wasQuoted;     \/* true if next arg was quoted *\/$/;"	v	file:
wasQuoted	HShell.h	/^   Boolean wasQuoted;   \/* true if ReadString returned quoted string *\/$/;"	m	struct:__anon75
waveData	HAudio.c	/^   LPSTR waveData;        \/* Data in buffer *\/$/;"	m	struct:mmapibuf	file:
waveFmt	HAudio.c	/^   LPPCMWAVEFORMAT waveFmt; \/* Pointer to PCMWAVEFORMAT *\/$/;"	m	struct:_AudioIn	file:
waveFmt	HAudio.c	/^   LPPCMWAVEFORMAT waveFmt; \/* Pointer to PCMWAVEFORMAT *\/$/;"	m	struct:_AudioOut	file:
waveHdr	HAudio.c	/^   LPWAVEHDR waveHdr;     \/* Pointer to WAVEHDR *\/$/;"	m	struct:mmapibuf	file:
waveIn	HAudio.c	/^   HWAVEIN waveIn;$/;"	m	struct:_AudioIn	file:
waveOut	HAudio.c	/^   HWAVEOUT waveOut;$/;"	m	struct:_AudioOut	file:
waveOutDev	HAudio.c	/^   UINT waveOutDev;         \/* Device being used for wave output *\/$/;"	m	struct:_AudioOut	file:
wavePos	HAudio.c	/^   LPMMTIME wavePos;        \/* Pointer to MMTIME *\/$/;"	m	struct:_AudioIn	file:
wavePos	HAudio.c	/^   LPMMTIME wavePos;        \/* Pointer to MMTIME *\/$/;"	m	struct:_AudioOut	file:
wdlist	HLM.h	/^   LabId *wdlist;               \/* Lookup table for words from lmId *\/$/;"	m	struct:matbilm
wdlist	HLM.h	/^   LabId *wdlist;               \/* Lookup table for words from lmId *\/$/;"	m	struct:ngramlm
wdlk	HRec.c	/^   LogFloat wdlk;       \/* Max likelihood of t=0 path to word end node *\/$/;"	m	struct:_NetInst	file:
wdpenalty	HNet.h	/^   LogFloat wdpenalty;		\/* Word insertion penalty *\/$/;"	m	struct:lattice
weight	HModel.h	/^   float weight;        \/* mixture weight *\/$/;"	m	struct:__anon42
weights	HModel.h	/^   SVector weights;     \/* vector of stream weights *\/$/;"	m	struct:__anon47
wgt	HModel.h	/^   Matrix wgt;          \/* for interpolated transforms *\/$/;"	m	union:__anon52
white	HGraf.c	/^static unsigned long black, white;$/;"	v	file:
width	esignal.h	/^    int     width;$/;"	m	struct:Annot
winCreated	HGraf.c	/^static Boolean       winCreated = FALSE;$/;"	v	file:
winCreated	HGraf_WIN32.c	/^static Boolean winCreated    = FALSE;               \/* prevent duplicate windows *\/$/;"	v	file:
winDur	HParm.c	/^   HTime winDur;              \/* Source window duration *\/$/;"	m	struct:__anon62	file:
winPoints	HGraf_WIN32.c	/^static POINT winPoints[MAX_POINT];$/;"	v	file:
wnHashTab	HNet.c	/^static NetNode *wnHashTab[WNHASHSIZE];$/;"	v	file:
word	HArc.h	/^  LabId word; $/;"	m	struct:_Arc
word	HDict.h	/^   Word word;      \/* Word this is a pronuciation of *\/$/;"	m	struct:_WordPron
word	HLM.h	/^   lmId word;                   \/* word id *\/$/;"	m	struct:sentry
word	HLM.h	/^   lmId word[NSIZE-1];          \/* Word history representing this entry *\/$/;"	m	struct:nentry
word	HNet.h	/^   Word word;          \/* Word represented by arc (labels may be on nodes) *\/$/;"	m	struct:lnode
wordBeam	HRec.h	/^   LogFloat wordBeam;       \/* Separte word end beam width *\/$/;"	m	struct:vrecinfo
wordHeap	HDict.h	/^   MemHeap wordHeap;    \/* for DictEntry structs  *\/$/;"	m	struct:__anon15
wordMaxNode	HRec.c	/^   NetNode *wordMaxNode;    \/* Most likely word end node in network *\/$/;"	m	struct:precinfo	file:
wordMaxNode	HRec.h	/^   NetNode *wordMaxNode;    \/* Most likely word end node in network *\/$/;"	m	struct:vrecinfo
wordMaxTok	HRec.c	/^   Token wordMaxTok;        \/* Most likely word end token *\/$/;"	m	struct:precinfo	file:
wordMaxTok	HRec.h	/^   Token wordMaxTok;        \/* Most likely word end token *\/$/;"	m	struct:vrecinfo
wordName	HDict.h	/^   LabId wordName;  \/* word identifier *\/$/;"	m	struct:_DictEntry
wordThresh	HRec.c	/^   LogFloat wordThresh;     \/* Cutoff for word end propagation *\/$/;"	m	struct:precinfo	file:
wordpen	HRec.c	/^   LogFloat wordpen;        \/* Word insertion penalty *\/$/;"	m	struct:precinfo	file:
wtC	HTrain.c	/^static int muC,vaC,trC,wtC,prC;$/;"	v	file:
wtab	HDict.h	/^   Word *wtab;          \/* hash table for DictEntry's *\/$/;"	m	struct:__anon15
x	HGraf.h	/^   int x, y, w, h;            \/* size of button rectangle *\/$/;"	m	struct:_HButton
x	HGraf.h	/^   int x,y;          \/* position of mouse *\/$/;"	m	struct:__anon24
x	HGraf.h	/^  short x, y;$/;"	m	struct:__anon25
x	HSigP.h	/^   Vector x;            \/* array[1..fftN] of fftchans *\/$/;"	m	struct:__anon80
x	HTrain.h	/^   MemHeap *x;     \/* memheap holding this set *\/$/;"	m	struct:__anon83
xInfo	HParm.c	/^   Ptr xInfo;         \/* Application data *\/$/;"	m	struct:hparmsrcdef	file:
xKind	HAdapt.c	/^static XFormKind xKind     = MLLRMEAN;  \/* Transform Kind to be created *\/$/;"	v	file:
xc	HNet.h	/^   int xc;         \/* Number of cross word contexts *\/$/;"	m	struct:hmmsetcxtinfo
xf	HModel.h	/^   InputXForm *xf;         \/* Input transform of HMMSet *\/$/;"	m	struct:_HMMSet
xform	HMath.h	/^   SMatrix xform;       \/* if XFORMC *\/$/;"	m	union:__anon35
xform	HModel.h	/^  LinXForm *xform;     \/* actual transform to be applied *\/$/;"	m	struct:__anon55
xform	HModel.h	/^  SMatrix* xform;      \/* 1..numBlocks matrix transforms *\/$/;"	m	struct:__anon53
xform	HParm.c	/^   InputXForm *xform;$/;"	m	struct:__anon62	file:
xform	HParm.h	/^   Ptr xform;                 \/* Used for input xform associated with this buffer *\/$/;"	m	struct:__anon70
xformAdaptKind	HAdapt.c	/^static AdaptKind xformAdaptKind = BASE;$/;"	v	file:
xformBaseClass	HAdapt.c	/^static char *xformBaseClass = NULL;$/;"	v	file:
xformBlockSize	HAdapt.c	/^static IntVec xformBlockSize = NULL;$/;"	v	file:
xformDirNames	HModel.c	/^static XFDirLink xformDirNames = NULL;  \/* linked list of input transform directories *\/$/;"	v	file:
xformName	HModel.h	/^  char* xformName;                  \/* name of the transform (macroname) *\/$/;"	m	struct:_AdaptXForm
xformName	HModel.h	/^  char* xformName;     \/* name of the transform (macroname) *\/$/;"	m	struct:__anon55
xformRegTree	HAdapt.c	/^static char *xformRegTree = NULL;$/;"	v	file:
xformSet	HModel.h	/^  XFormSet  *xformSet;              \/* set of linear transforms *\/$/;"	m	struct:_AdaptXForm
xformSplitThresh	HAdapt.c	/^static float xformSplitThresh = -1000.0;$/;"	v	file:
xformStack	HModel.c	/^static MemHeap xformStack;              \/* For Storage of xforms with no model sets ... *\/$/;"	v	file:
xformTMF	HAdapt.h	/^  char *xformTMF;$/;"	m	struct:__anon10
xformWgts	HModel.h	/^  AdaptWgt  xformWgts;              \/* set of weights for all the base classes *\/$/;"	m	struct:_AdaptXForm
xforms	HModel.h	/^  LinXForm **xforms;   \/* 1..numTrans linear transforms *\/$/;"	m	struct:__anon54
xkind	HAdapt.c	/^   XFormKind xkind;$/;"	m	struct:__anon6	file:
xkind	HModel.h	/^  XFormKind xkind;     \/* transform kind (MLLRMEAN, CMLLR etc *\/$/;"	m	struct:__anon54
y	HGraf.h	/^   int x, y, w, h;            \/* size of button rectangle *\/$/;"	m	struct:_HButton
y	HGraf.h	/^   int x,y;          \/* position of mouse *\/$/;"	m	struct:__anon24
y	HGraf.h	/^  short x, y;$/;"	m	struct:__anon25
zMeanSrc	HParm.c	/^   Boolean zMeanSrc;          \/* Zero Mean the Source *\/$/;"	m	struct:__anon62	file:
zero_buf	HAudio.c	/^static short zero_buf[BUF_SIZE];$/;"	v	file:
